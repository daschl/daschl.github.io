<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>plugin on daschl writes. sometimes.</title>
    <link>https://nitschinger.at/tags/plugin/</link>
    <description>Recent content in plugin on daschl writes. sometimes.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Feb 2012 00:00:00 +0000</lastBuildDate><atom:link href="https://nitschinger.at/tags/plugin/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RFC: li3_fixtures Rewrite</title>
      <link>https://nitschinger.at/RFC-li3_fixtures-Rewrite/</link>
      <pubDate>Fri, 24 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://nitschinger.at/RFC-li3_fixtures-Rewrite/</guid>
      <description>The li3_fixtures plugin was my first Lithium plugin ever, and while it works okay, I feel there is a lot I can do to make it better and more flexible. In this post I want to share my ideas for a new fixture plugin and also want to gather feedback from the community to make it even more awesome.
As far as I can see, there are three big use cases for fixtures:</description>
    </item>
    
    <item>
      <title>Introducing Fixtures for Lithium</title>
      <link>https://nitschinger.at/Introducing-Fixtures-for-Lithium/</link>
      <pubDate>Sat, 04 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>https://nitschinger.at/Introducing-Fixtures-for-Lithium/</guid>
      <description>When you write tests for your classes (and you should), you may run into the problem that you create large arrays of test data in your code. Consider the following example:
$expected = array( &#39;post1&#39; =&amp;gt; array( &#39;title&#39; =&amp;gt; &#39;My First Post&#39;, &#39;content&#39; =&amp;gt; &#39;First Content...&#39; ), &#39;post2&#39; =&amp;gt; array( &#39;title&#39; =&amp;gt; &#39;My Second Post&#39;, &#39;content&#39; =&amp;gt; &#39;Also some foobar text&#39; ), &#39;post3&#39; =&amp;gt; array( &#39;title&#39; =&amp;gt; &#39;My Third Post&#39;, &#39;content&#39; =&amp;gt; &#39;I like to write some foobar foo too&#39; ) ); $this-&amp;gt;assertEqual($expected[0], Post::first()); /* more tests down here */  This creates a nested array of test data where each inner array mocks a post stored in the database.</description>
    </item>
    
  </channel>
</rss>
