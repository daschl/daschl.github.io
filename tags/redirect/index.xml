<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>daschl writes. sometimes.</title>
    <link>http://nitschinger.at/tags/redirect/index.xml</link>
    <description>Recent content on daschl writes. sometimes.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://nitschinger.at/tags/redirect/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Quick Tip: Lithium Redirect</title>
      <link>http://nitschinger.at/Quick-Tip-Lithium-Redirect/</link>
      <pubDate>Fri, 16 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>http://nitschinger.at/Quick-Tip-Lithium-Redirect/</guid>
      <description>&lt;p&gt;While migrating &lt;a href=&#34;https://github.com/UnionOfRAD/lithium_bin&#34;&gt;lithium_bin&lt;/a&gt; as part of research over to MongoDB (from CouchDB), I found the following snippet in the &lt;code&gt;routes.php&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Router::connect(&#39;/&#39;, array(), function($request) {
    $location = array(&#39;controller&#39; =&amp;gt; &#39;pastes&#39;, &#39;action&#39; =&amp;gt; &#39;add&#39;);
    return new Response(compact(&#39;location&#39;));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This means that when the user enters the application via the root url (&lt;code&gt;/&lt;/code&gt;), he instantly gets redirected to &lt;code&gt;/pastes/add&lt;/code&gt; (or a different URL if you have custom routes configured).&lt;/p&gt;

&lt;p&gt;This may seem ok at first, but there&amp;rsquo;s a problem. It doesn&amp;rsquo;t take URLs into account that don&amp;rsquo;t live directly under the document root. So if your application lives under &lt;code&gt;http://localhost/pastium/&lt;/code&gt;, it will redirect you to &lt;code&gt;http://localhost/pastes/add/&lt;/code&gt; which is not really what you want. Instead, do it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Router::connect(&#39;/&#39;, array(), function($request) {
    $location = Router::match(&#39;Pastes::add&#39;, $request);
    return new Response(compact(&#39;location&#39;));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this snippet, the &lt;code&gt;Router&lt;/code&gt; takes the current &lt;code&gt;Request&lt;/code&gt; into account and returns the correct location (based on the reverse routing information). Now it should redirect you correctly to &lt;code&gt;http://localhost/pastium/pastes/add/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;By the way, this is extracted from the &lt;code&gt;Controller::redirect&lt;/code&gt; method, which is implemented in a similar way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public function redirect($url, array $options = array()) {
    //...
    $this-&amp;gt;_filter(__METHOD__, $params, function($self, $params) use ($router) {
        $options = $params[&#39;options&#39;];
        $location = $options[&#39;location&#39;] ?: $router::match($params[&#39;url&#39;], $self-&amp;gt;request);
        $self-&amp;gt;render(compact(&#39;location&#39;) + $options);
    });
    //...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you have any ideas on how to improve this further, feel free to comment below!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>