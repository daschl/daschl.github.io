<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lithium on daschl writes. sometimes.</title>
    <link>https://nitschinger.at/tags/lithium/</link>
    <description>Recent content in lithium on daschl writes. sometimes.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 03 Mar 2012 00:00:00 +0000</lastBuildDate><atom:link href="https://nitschinger.at/tags/lithium/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introducing Relationships in Lithium</title>
      <link>https://nitschinger.at/Introducing-Relationships-in-Lithium/</link>
      <pubDate>Sat, 03 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://nitschinger.at/Introducing-Relationships-in-Lithium/</guid>
      <description>Introduction The model relationship support in Lithium is one of the hottest topics on IRC lately, so I thought it would be a good idea to blog about it.
Currently, Lithium supports 1:1 and 1:n relationships for relational databases. There is no m:n support out of the box (like CakePHP&amp;rsquo;s $hasAndBelongsToMany). This also means that MongoDB relationships are not implemented for now. If you look at the Roadmap, you can see that this is on the &amp;ldquo;pre 1.</description>
    </item>
    
    <item>
      <title>RFC: li3_fixtures Rewrite</title>
      <link>https://nitschinger.at/RFC-li3_fixtures-Rewrite/</link>
      <pubDate>Fri, 24 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://nitschinger.at/RFC-li3_fixtures-Rewrite/</guid>
      <description>The li3_fixtures plugin was my first Lithium plugin ever, and while it works okay, I feel there is a lot I can do to make it better and more flexible. In this post I want to share my ideas for a new fixture plugin and also want to gather feedback from the community to make it even more awesome.
As far as I can see, there are three big use cases for fixtures:</description>
    </item>
    
    <item>
      <title>Playing with Composer and Lithium</title>
      <link>https://nitschinger.at/Playing-with-Composer-and-Lithium/</link>
      <pubDate>Mon, 23 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://nitschinger.at/Playing-with-Composer-and-Lithium/</guid>
      <description>About Composer Composer is a command-line tool that helps you manage your application dependencies. It automatically fetches packages, resolves dependencies and is easy to configure. The really good thing about Composer is that it isn&amp;rsquo;t bound to a specific framework and can be used with every kind of repository. Composer is similar to package managers like npm, so you may feel at home quickly.
The default repository of Composer is Packagist.</description>
    </item>
    
    <item>
      <title>Session Encryption with Lithium</title>
      <link>https://nitschinger.at/Session-Encryption-with-Lithium/</link>
      <pubDate>Fri, 20 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://nitschinger.at/Session-Encryption-with-Lithium/</guid>
      <description>The Basics If you check out the master branch, you can use the new Encrypt strategy to encrypt your session data automatically. This means that you can read and write session data in cleartext and they will be encrypted on the fly before getting stored (in a cookie, for example). You can read my post about &amp;ldquo;baking cookies like a chef&amp;rdquo; for PHPAdvent 2011 here. The article covers both HMAC signatures and encryption, and is a good place to start.</description>
    </item>
    
    <item>
      <title>Quick Tip: Lithium Redirect</title>
      <link>https://nitschinger.at/Quick-Tip-Lithium-Redirect/</link>
      <pubDate>Fri, 16 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>https://nitschinger.at/Quick-Tip-Lithium-Redirect/</guid>
      <description>While migrating lithium_bin as part of research over to MongoDB (from CouchDB), I found the following snippet in the routes.php file:
Router::connect(&#39;/&#39;, array(), function($request) { $location = array(&#39;controller&#39; =&amp;gt; &#39;pastes&#39;, &#39;action&#39; =&amp;gt; &#39;add&#39;); return new Response(compact(&#39;location&#39;)); });  This means that when the user enters the application via the root url (/), he instantly gets redirected to /pastes/add (or a different URL if you have custom routes configured).
This may seem ok at first, but there&amp;rsquo;s a problem.</description>
    </item>
    
    <item>
      <title>Letters from Lithium #2</title>
      <link>https://nitschinger.at/Letters-from-Lithium-2/</link>
      <pubDate>Mon, 05 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>https://nitschinger.at/Letters-from-Lithium-2/</guid>
      <description>About Letters from Lithium keeps you up to date about what happens in the Lithium core and community. If you have interesting news to share, comment below or ping me on twitter.
Core News Routing got a bit more awesome with route continuations. They allow you match more routes in one request, which is very useful in many cases. Take a look at this test case:
/** * Tests that continuation routes properly fall through and aggregate multiple route parameters.</description>
    </item>
    
    <item>
      <title>Letters from Lithium #1</title>
      <link>https://nitschinger.at/Letters-from-Lithium-1/</link>
      <pubDate>Tue, 02 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>https://nitschinger.at/Letters-from-Lithium-1/</guid>
      <description>About &amp;ldquo;Letters from Lithium&amp;rdquo; will be published on a regular basis to give you an update on what happens in the Lithium community. If you have interesting topics/plugins/stuff you want to read about, feel free to contact me through twitter or email.
Core News The Roadmap to 1.0 is going pretty well so far, and relationship support for relational databases has been already merged into master. For the impatient, there is also some documentation for it underway which can be found here.</description>
    </item>
    
    <item>
      <title>Using Environments in Lithium</title>
      <link>https://nitschinger.at/Using-Environments-in-Lithium/</link>
      <pubDate>Tue, 19 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>https://nitschinger.at/Using-Environments-in-Lithium/</guid>
      <description>Introduction Environments help you to manage multiple configurations for your application. Maybe you have a different database for testing than for production or you use file caching in development but APC in production. If your framework does not support this (or a similar) concept, it can be a pain to code this overhead for yourself. Therefore, Lithium frees you from this by providing a Environment class (in the \lithium\core namespace) which handles everything for you automatically.</description>
    </item>
    
    <item>
      <title>Testing the Lithium core for fun and profit</title>
      <link>https://nitschinger.at/Testing-the-Lithium-core-for-fun-and-profit/</link>
      <pubDate>Sat, 09 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>https://nitschinger.at/Testing-the-Lithium-core-for-fun-and-profit/</guid>
      <description>In modern web frameworks, testing is one of the most important pillars that ensure a clean, stable and extendable codebase. Testing support in Lithium was built in from the beginning and therefore it already features a great code coverage. The Lithium project aims to work out of the box on many platforms, including Microsoft Windows and its IIS, which was often neglected in the past.
The main purpose of this post is to show you how core tests work and were the core team needs help to improve things further.</description>
    </item>
    
    <item>
      <title>Lithium plugin roundup</title>
      <link>https://nitschinger.at/Lithium-plugin-roundup/</link>
      <pubDate>Wed, 22 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>https://nitschinger.at/Lithium-plugin-roundup/</guid>
      <description>Note that this list is by no means complete. If you don&amp;rsquo;t find your own mentioned here, feel free to comment below. I&amp;rsquo;ve also tried to roughly group them so you can find them later more easily.
Authentication &amp;amp; Security li3_access: Access control library by tmaiaroto.
li3_ids: Intrusion detection integration (phpids) by weluse.
li3_oauth: OAuth library by gwoo.
APIs and Externals li3_delayed_job: Ruby&amp;rsquo;s Delayed::Job port to Lithium by cgarvis.
li3_facebook: Facebook API wrapper by tmaiaroto.</description>
    </item>
    
  </channel>
</rss>
