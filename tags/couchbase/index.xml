<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Couchbase on daschl writes. sometimes.</title>
    <link>http://nitschinger.at/tags/couchbase/</link>
    <description>Recent content in Couchbase on daschl writes. sometimes.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 29 Jan 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://nitschinger.at/tags/couchbase/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Bootstrapping from DNS SRV records in Java</title>
      <link>http://nitschinger.at/Bootstrapping-from-DNS-SRV-records-in-Java/</link>
      <pubDate>Wed, 29 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://nitschinger.at/Bootstrapping-from-DNS-SRV-records-in-Java/</guid>
      <description>&lt;p&gt;I know this topic has a very narrow audience, but I hope that one or two people out there scratching their heads will benefit from it.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the itch we&amp;rsquo;re trying to scratch: is there an easy way to determine hostnames for - let&amp;rsquo;s say - a database connection? There are many ways to do this, like hardcoding it, providing them through a properties file and so on. All this techniques (maybe aside from fetching it over the network from a central storage) require some modifications on the server once one of the hostnames changes. If you need to maintain a lot of machines, this can get inefficient pretty quickly.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s step back a second and think about what we&amp;rsquo;re using anyway in our infrastructure: DNS. Until recently I haven&amp;rsquo;t heard of the SRV record that you can use to &amp;ldquo;refer&amp;rdquo; to other hostnames. The nice thing about this is that you can provide more endpoints and even add weights and and priorities. Let&amp;rsquo;s look at an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;_cbnodes._tcp.example.com.  0  IN  SRV  20  0  8091  node2.example.com.
_cbnodes._tcp.example.com.  0  IN  SRV  10  0  8091  node1.example.com.
_cbnodes._tcp.example.com.  0  IN  SRV  30  0  8091  node3.example.com.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, based on the &amp;ldquo;_cbnodes._tcp.example.com.&amp;rdquo; service information we get to know that there are three nodes configured that belong to this service. They all listen on port &lt;code&gt;8091&lt;/code&gt;, but have priorities associated with them (10, 20, 30). Lower priorities are considered more important, so you can use that to your advantage. The &lt;code&gt;0&lt;/code&gt; between the priority and the port is the weight. You can use different weights (which are probabilities) to generate some kind of load-balancing behaviour.&lt;/p&gt;

&lt;p&gt;Once this is configured on the DNS server, we can make use of that in our application. Say we want to infer the seed nodes to bootstrap from in our &lt;code&gt;CouchbaseClient&lt;/code&gt;. To make this happen, we need to make use of &lt;a href=&#34;http://en.wikipedia.org/wiki/Java_Naming_and_Directory_Interface&#34;&gt;JNDI&lt;/a&gt;. Let&amp;rsquo;s first create a simple class that will hold those records shown above:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #3F6E75&#34;&gt;DnsRecord&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Comparable&amp;lt;DnsRecord&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #A90D91&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;priority;&lt;/span&gt;
    &lt;span style=&#34;color: #A90D91&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;weight;&lt;/span&gt;
    &lt;span style=&#34;color: #A90D91&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;port;&lt;/span&gt;
    &lt;span style=&#34;color: #A90D91&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;host;&lt;/span&gt;

    &lt;span style=&#34;color: #A90D91&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;DnsRecord(&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;priority,&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;weight,&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;port,&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;host)&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #A90D91&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;priority&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;priority;&lt;/span&gt;
      &lt;span style=&#34;color: #A90D91&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;weight&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;weight;&lt;/span&gt;
      &lt;span style=&#34;color: #A90D91&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;port&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;port;&lt;/span&gt;
      &lt;span style=&#34;color: #A90D91&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;host&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;host.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;replaceAll&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #C41A16&#34;&gt;&amp;quot;\\\\.$&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #A90D91&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;getPriority()&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #A90D91&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;priority;&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #A90D91&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;getWeight()&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #A90D91&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;weight;&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #A90D91&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;getPort()&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #A90D91&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;port;&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #A90D91&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;getHost()&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #A90D91&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;host;&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #A90D91&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;DnsRecord&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;fromString(String&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;input)&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #000000&#34;&gt;String[]&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;splitted&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;input.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;split&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #C41A16&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;);&lt;/span&gt;
      &lt;span style=&#34;color: #A90D91&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;DnsRecord(&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;Integer.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;parseInt&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(splitted[&lt;/span&gt;&lt;span style=&#34;color: #1C01CE&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]),&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;Integer.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;parseInt&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(splitted[&lt;/span&gt;&lt;span style=&#34;color: #1C01CE&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]),&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;Integer.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;parseInt&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(splitted[&lt;/span&gt;&lt;span style=&#34;color: #1C01CE&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]),&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;splitted[&lt;/span&gt;&lt;span style=&#34;color: #1C01CE&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]&lt;/span&gt;
      &lt;span style=&#34;color: #000000&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #000000&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #A90D91&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;toString()&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #A90D91&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;quot;DnsRecord{&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;+&lt;/span&gt;
        &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;quot;priority=&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;priority&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;+&lt;/span&gt;
        &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;quot;, weight=&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;weight&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;+&lt;/span&gt;
        &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;quot;, port=&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;port&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;+&lt;/span&gt;
        &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;quot;, host=&amp;#39;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;host&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #2300CE&#34;&gt;&amp;#39;\\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;+&lt;/span&gt;
        &lt;span style=&#34;color: #2300CE&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #000000&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #A90D91&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;compareTo(DnsRecord&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;o)&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #A90D91&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;(getPriority()&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;o.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;getPriority&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #A90D91&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #1C01CE&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;;&lt;/span&gt;
      &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #A90D91&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #1C01CE&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;;&lt;/span&gt;
      &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We provide a custom &lt;code&gt;compareTo&lt;/code&gt; method in order to automatically sort each &lt;code&gt;DnsRecord&lt;/code&gt; by priority. The next step is to write a method that allows us to fetch the actual information:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;service&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;quot;_cbnodes._tcp.example.com&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #000000&#34;&gt;Hashtable&amp;lt;String,&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;String&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;env&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Hashtable&amp;lt;String,&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;String&amp;gt;();&lt;/span&gt;
&lt;span style=&#34;color: #000000&#34;&gt;env.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #C41A16&#34;&gt;&amp;quot;java.naming.factory.initial&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;quot;com.sun.jndi.dns.DnsContextFactory&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #000000&#34;&gt;env.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #C41A16&#34;&gt;&amp;quot;java.naming.provider.url&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;quot;dns:&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #000000&#34;&gt;DirContext&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;ctx&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;InitialDirContext(env);&lt;/span&gt;
&lt;span style=&#34;color: #000000&#34;&gt;Attributes&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;attrs&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;ctx.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;getAttributes&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(service,&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;String[]&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;quot;SRV&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;});&lt;/span&gt;

  &lt;span style=&#34;color: #000000&#34;&gt;NamingEnumeration&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;servers&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;attrs.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #C41A16&#34;&gt;&amp;quot;srv&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;getAll&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;color: #000000&#34;&gt;Set&amp;lt;DnsRecord&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;sortedRecords&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;TreeSet&amp;lt;DnsRecord&amp;gt;();&lt;/span&gt;
  &lt;span style=&#34;color: #A90D91&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;(servers.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;hasMore&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;DnsRecord&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;record&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;DnsRecord.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;fromString&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;((String)&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;servers.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;next&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;sortedRecords.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(record);&lt;/span&gt;
  &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we have a &lt;code&gt;Set&lt;/code&gt; of sorted &lt;code&gt;DnsRecords&lt;/code&gt;, which we can use however we want to. For example, with &lt;a href=&#34;http://couchbase.com&#34;&gt;Couchbase&lt;/a&gt; we can turn them into &lt;code&gt;URI&lt;/code&gt;s:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;List&amp;lt;URI&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;uris&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;ArrayList&amp;lt;URI&amp;gt;();&lt;/span&gt;
&lt;span style=&#34;color: #A90D91&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(DnsRecord&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;record&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;sortedRecords)&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #000000&#34;&gt;uris.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;URI(&lt;/span&gt;&lt;span style=&#34;color: #C41A16&#34;&gt;&amp;quot;http://&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;record.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;getHost&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;quot;:&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;record.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;getPort&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;quot;/pools&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;));&lt;/span&gt;
&lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you want to play around with the code and don&amp;rsquo;t have DNS SRV records set up, I recommend you to use &lt;code&gt;_xmpp-server._tcp.gmail.com&lt;/code&gt;. It exposes Googles GMail XMPP servers and lets
you try the code without much effort. In case you wonder how to mock that thing correctly, I recommend you to mock the &lt;code&gt;DirContext&lt;/code&gt; like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;service&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;quot;_seeds._tcp.couchbase.com&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #000000&#34;&gt;BasicAttributes&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;basicAttributes&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;BasicAttributes(&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #000000&#34;&gt;BasicAttribute&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;basicAttribute&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;BasicAttribute(&lt;/span&gt;&lt;span style=&#34;color: #C41A16&#34;&gt;&amp;quot;SRV&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #000000&#34;&gt;basicAttribute.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #C41A16&#34;&gt;&amp;quot;20 0 8091 node2.couchbase.com.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #000000&#34;&gt;basicAttribute.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #C41A16&#34;&gt;&amp;quot;10 0 8091 node1.couchbase.com.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #000000&#34;&gt;basicAttribute.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #C41A16&#34;&gt;&amp;quot;30 0 8091 node3.couchbase.com.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #000000&#34;&gt;basicAttribute.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #C41A16&#34;&gt;&amp;quot;40 0 8091 node4.couchbase.com.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #000000&#34;&gt;basicAttributes.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(basicAttribute);&lt;/span&gt;

&lt;span style=&#34;color: #000000&#34;&gt;DirContext&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;mockedContext&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;mock(DirContext.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #000000&#34;&gt;when(mockedContext.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;getAttributes&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(service,&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;String[]&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;quot;SRV&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;}))&lt;/span&gt;
  &lt;span style=&#34;color: #000000&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;thenReturn&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(basicAttributes);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The code shown here (and more advanced features) are part of the official Couchbase SDK, so check out the &lt;a href=&#34;https://github.com/couchbase/couchbase-java-client&#34;&gt;codebase&lt;/a&gt; if you want to learn more!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s new in the Couchbase Java SDK 1.2</title>
      <link>http://nitschinger.at/What-s-new-in-the-Couchbase-Java-SDK-1-2/</link>
      <pubDate>Fri, 11 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://nitschinger.at/What-s-new-in-the-Couchbase-Java-SDK-1-2/</guid>
      <description>

&lt;p&gt;For all users of our Java SDK, we prepared some nice additions for you. This post covers them in detail and shows how you can get more productive.&lt;/p&gt;

&lt;p&gt;Note that this blog post assumes you are running the 1.2.1 release, because there have been some slight changes between 1.2.0 and 1.2.1 that affect for example the listener support and metrics collection.&lt;/p&gt;

&lt;h2 id=&#34;maven-central-distribution&#34;&gt;Maven Central Distribution&lt;/h2&gt;

&lt;p&gt;From the 1.2.0 release forward, the Java SDK is distributed directly from Maven Central. This means that you don&amp;rsquo;t need to include the Couchbase repository anymore. The following maven code is enough to get started (note that the groupId has changed):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;com.couchbase.client&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;couchbase-client&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;1.2.1&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will automatically load the latest spymemcached dependency in as well (for 1.2.0 it&amp;rsquo;s 2.10.0). Before we dig into what has changed, &lt;a href=&#34;http://docs.couchbase.com/couchbase-sdk-java-1.2/#release-notes-for-couchbase-client-library-java-120-ga-13-september-2013&#34;&gt;here&lt;/a&gt; are the release notes for a quick reference.&lt;/p&gt;

&lt;h2 id=&#34;listener-support&#34;&gt;Listener Support&lt;/h2&gt;

&lt;p&gt;Until now, there were two ways to get the result of an asynchronous request. Either by blocking the current thread like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// do an async operation (returns immediately)
OperationFuture&amp;lt;Boolean&amp;gt; setFuture = client.set(&amp;quot;key&amp;quot;, &amp;quot;value&amp;quot;);

// block the current thread
Boolean result = setFuture.get();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or to loop on the non-blocking future methods. This is especially helpful if you are dealing with a list of futures.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;List&amp;lt;OperationFuture&amp;lt;Boolean&amp;gt;&amp;gt; futures = new ArrayList&amp;lt;OperationFuture&amp;lt;Boolean&amp;gt;&amp;gt;();
for (int i = 0; i &amp;lt; 100; i++) {
  futures.add(client.set(&amp;quot;key-&amp;quot; + i, &amp;quot;value&amp;quot;));
}

while (!futures.isEmpty()) {
  Iterator&amp;lt;OperationFuture&amp;lt;Boolean&amp;gt;&amp;gt; iter = futures.iterator();
  while (iter.hasNext()) {
    OperationFuture&amp;lt;Boolean&amp;gt; future = iter.next();
    if (future.isDone()) {
      iter.remove();
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now since 1.2.0, there is a new way to deal with responses - adding listeners. The idea is to supply a callback to the future which will be executed once the operation is done. A simple example is shown here:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;OperationFuture&amp;lt;Boolean&amp;gt; setFuture = client.set(&amp;quot;key&amp;quot;, &amp;quot;value&amp;quot;);
setFuture.addListener(new OperationCompletionListener() {
  @Override
  public void onComplete(OperationFuture&amp;lt;?&amp;gt; future) throws Exception {
    System.out.println(future.get());
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the &lt;code&gt;.get()&lt;/code&gt; method on the future will not block anymore because the result is already computed. Whatever you put in the callback method will be executed asynchronously on the thread pool. To see how flexible that approach is, let&amp;rsquo;s rewrite the example from above waiting until the 100 futures are done.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;final CountDownLatch latch = new CountDownLatch(100);
for (int i = 0; i &amp;lt; 100; i++) {
  OperationFuture&amp;lt;Boolean&amp;gt; future = client.set(&amp;quot;key-&amp;quot; + i, &amp;quot;value&amp;quot;);
  future.addListener(new OperationCompletionListener() {
    @Override
    public void onComplete(OperationFuture&amp;lt;?&amp;gt; future) throws Exception {
      latch.countDown();
    }
  });
}
latch.await();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we are using a &lt;a href=&#34;http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/CountDownLatch.html&#34;&gt;CountDownLatch&lt;/a&gt; which waits on the current thread as long as it has been counted down a hundred times. Exactly what we need in our situation, but the code is much easier to read. More importantly, its much more flexible because other things like firing off a new request, querying a web service or calculating a result can be done.&lt;/p&gt;

&lt;p&gt;It is also possible to override the default &lt;code&gt;ExecutorService&lt;/code&gt; implementation with a custom one. This may be needed if the default behavior (Basically a upper-bounded cachedThreadPool) does not suite your needs. Also, you should use this approach if you create a bunch of &lt;code&gt;CouchbaseClient&lt;/code&gt; instances so you can share the same service across all of them.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Create the Builder
CouchbaseConnectionFactoryBuilder builder = new CouchbaseConnectionFactoryBuilder();

// Create a thread pool of 5 fixed threads
ExecutorService service = Executors.newFixedThreadPool(5);
// Set it in the builder
builder.setListenerExecutorService(service);

// Create the instance
CouchbaseClient client = new CouchbaseClient(builder.buildCouchbaseConnection(...));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;enhanced-profiling-capabilities&#34;&gt;Enhanced Profiling Capabilities&lt;/h2&gt;

&lt;p&gt;Getting insight into a running application is always difficult, so we set out to make it easier for you. We incorporated a library called &lt;a href=&#34;http://metrics.codahale.com/&#34;&gt;metrics&lt;/a&gt; that profiles, depending on the configuration level chosen.&lt;/p&gt;

&lt;p&gt;Before you can use it, you need to add this optional dependency:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;com.codahale.metrics&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;metrics-core&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;3.0.1&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On the builder, there is a method that allows you to activate the the profiler:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CouchbaseConnectionFactoryBuilder builder = new CouchbaseConnectionFactoryBuilder();

// enable metric collection
builder.setEnableMetrics(MetricType.PERFORMANCE);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you look at the &lt;code&gt;MetricType&lt;/code&gt; enumeration you can see that there are three types of values you can choose from: OFF (which keeps metric collection off), PERFORMANCE (which only collects performance-relevant metrics) and DEBUG (which collects all kinds of metrics, including the performance ones). While the metrics library is quite efficient, keep in mind that metric collection takes some resources away from your application.&lt;/p&gt;

&lt;p&gt;By default, the metric information will be printed out on the console every 30 seconds. You can run the following test code from your IDE and see how it looks:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CouchbaseConnectionFactoryBuilder builder = new CouchbaseConnectionFactoryBuilder();
builder.setEnableMetrics(MetricType.PERFORMANCE);

CouchbaseConnectionFactory cf =
  builder.buildCouchbaseConnection(Arrays.asList(new URI(&amp;quot;http://127.0.0.1:8091/pools&amp;quot;)), &amp;quot;default&amp;quot;, &amp;quot;&amp;quot;);

CouchbaseClient client = new CouchbaseClient(cf);

while(true) {
  client.set(&amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;);
  Thread.sleep(100);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now wait 30 seconds and you&amp;rsquo;ll see output like this in the console:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  10/8/13 12:04:14 PM ============================================================

  -- Histograms ------------------------------------------------------------------
  [MEM] Average Bytes read from OS per read
               count = 893
                 min = 24
                 max = 24
                mean = 24.00
              stddev = 0.00
              median = 24.00
                75% &amp;lt;= 24.00
                95% &amp;lt;= 24.00
                98% &amp;lt;= 24.00
                99% &amp;lt;= 24.00
              99.9% &amp;lt;= 24.00
  [MEM] Average Bytes written to OS per write
               count = 893
                 min = 38
                 max = 38
                mean = 38.00
              stddev = 0.00
              median = 38.00
                75% &amp;lt;= 38.00
                95% &amp;lt;= 38.00
                98% &amp;lt;= 38.00
                99% &amp;lt;= 38.00
              99.9% &amp;lt;= 38.00
  [MEM] Average Time on wire for operations (Âµs)
               count = 893
                 min = 179
                 max = 1730
                mean = 263.80
              stddev = 75.43
              median = 251.00
                75% &amp;lt;= 280.00
                95% &amp;lt;= 351.90
                98% &amp;lt;= 425.36
                99% &amp;lt;= 559.70
              99.9% &amp;lt;= 1730.00

  -- Meters ----------------------------------------------------------------------
  [MEM] Request Rate: All
               count = 893
           mean rate = 9.92 events/second
       1-minute rate = 9.85 events/second
       5-minute rate = 9.68 events/second
      15-minute rate = 9.63 events/second
  [MEM] Response Rate: All (Failure + Success + Retry)
               count = 893
           mean rate = 9.92 events/second
       1-minute rate = 9.85 events/second
       5-minute rate = 9.68 events/second
      15-minute rate = 9.63 events/second
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I won&amp;rsquo;t go into detail of all these metrics in this blog post, please refer to the documentation for a more complete picture. One more thing I want to show you is that the metrics library is also able to expose these metrics through JMX. All you need to do is set a system property that changes the output mode: &lt;code&gt;net.spy.metrics.reporter.type=jmx&lt;/code&gt;. Other possible settings are &lt;code&gt;csv&lt;/code&gt; and slf4j&lt;code&gt;. If you choose a logger that prints out information at a given interval you can change it by setting&lt;/code&gt;net.spy.metrics.reporter.interval` to anything else than 30.&lt;/p&gt;

&lt;p&gt;So if you put the line &lt;code&gt;System.setProperty(&amp;quot;net.spy.metrics.reporter.type&amp;quot;, &amp;quot;jmx&amp;quot;);&lt;/code&gt; before the code shown above, you can open (for example) jConsole and switch to the MBeans tab of the application. You&amp;rsquo;ll see a &lt;code&gt;metrics&lt;/code&gt; subsection exposed that contains the same metrics as they would show up in the logs.&lt;/p&gt;

&lt;h2 id=&#34;cas-with-timeout&#34;&gt;CAS with Timeout&lt;/h2&gt;

&lt;p&gt;Before 1.2.0, it was not possible in one command to do a &lt;code&gt;cas&lt;/code&gt; update and set a new timeout at the same time. You had to do a second &lt;code&gt;touch&lt;/code&gt; operation which was not efficient nor atomic. Now, the API exposes a new &lt;code&gt;cas()&lt;/code&gt; method that allows you to pass in the timeout at the same time. It is easy to use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;client.cas(&amp;quot;key&amp;quot;, cas, nexExpiration, value);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The asynchronous variations have been exposed since 1.2.1 as well.&lt;/p&gt;

&lt;h2 id=&#34;initializing-through-properties&#34;&gt;Initializing through Properties&lt;/h2&gt;

&lt;p&gt;One thing that comes in handy if your cluster ip addresses change often is that you can now initialize a &lt;code&gt;CouchbaseClient&lt;/code&gt; object based on system properties. Here is an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;System.setProperty(&amp;quot;cbclient.nodes&amp;quot;, &amp;quot;http://127.0.0.1:8091/pools&amp;quot;);
System.setProperty(&amp;quot;cbclient.bucket&amp;quot;, &amp;quot;default&amp;quot;);
System.setProperty(&amp;quot;cbclient.password&amp;quot;, &amp;quot;&amp;quot;);

CouchbaseConnectionFactoryBuilder builder = new CouchbaseConnectionFactoryBuilder();
CouchbaseConnectionFactory cf = builder.buildCouchbaseConnection();
CouchbaseClient client = new CouchbaseClient(cf);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course you can set these properties in your application container or during startup, so it&amp;rsquo;s very flexible and not tied into your code directly. Note that if you forget to set one of these properties, the code will warn you like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Exception in thread &amp;quot;main&amp;quot; java.lang.IllegalArgumentException: System property cbclient.nodes not set or empty
    at com.couchbase.client.CouchbaseConnectionFactory.&amp;lt;init&amp;gt;(CouchbaseConnectionFactory.java:160)
    at com.couchbase.client.CouchbaseConnectionFactoryBuilder$2.&amp;lt;init&amp;gt;(CouchbaseConnectionFactoryBuilder.java:318)
    at com.couchbase.client.CouchbaseConnectionFactoryBuilder.buildCouchbaseConnection(CouchbaseConnectionFactoryBuilder.java:318)
    at Main.main(Main.java:33)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:601)
    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;other-changes&#34;&gt;Other Changes&lt;/h2&gt;

&lt;p&gt;In addition to the enhancements shown above, the release includes - as always - numerous smaller bugfixes. The default poll interval for &lt;code&gt;ReplicateTo&lt;/code&gt; and &lt;code&gt;PersistTo&lt;/code&gt; has been lowered to &lt;code&gt;10ms&lt;/code&gt; to account for performance changes that went into the Couchbase Sever 2.2 release. Also, the client now uses the &lt;code&gt;CRAM-MD5&lt;/code&gt; authentication mechanism automatically if the server supports it (since 2.2 as well).&lt;/p&gt;

&lt;p&gt;These awesome new features should be enough reason to upgrade right now! If anything pops up that doesn&amp;rsquo;t work as expected, please ask customer support or open a ticket &lt;a href=&#34;http://www.couchbase.com/issues/browse/JCBC&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using the Reactor Processor for High-Performance TCP</title>
      <link>http://nitschinger.at/Using-the-Reactor-Processor-for-High-Performance-TCP/</link>
      <pubDate>Tue, 13 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://nitschinger.at/Using-the-Reactor-Processor-for-High-Performance-TCP/</guid>
      <description>

&lt;p&gt;First, a disclaimer: the all-new &lt;a href=&#34;https://github.com/reactor/reactor&#34;&gt;Reactor&lt;/a&gt; framework is still under heavy development, but it already provides a very promising basement for applications and libraries that need high throughput and low latency. We at &lt;a href=&#34;http://www.couchbase.com/&#34;&gt;Couchbase&lt;/a&gt; aim to provide the highest throughput at the lowest latency, so it is very critical to build upon an infrastructure that can provide it. Current, we are performing early investigations for a possible &amp;ldquo;next generation Java SDK&amp;rdquo; and Reactor seems very promising so far.&lt;/p&gt;

&lt;p&gt;This blog post shows you how to quickly set up a Processor (we&amp;rsquo;ll see in a minute what that is) that dispatches requests to Consumers (also a very common term in Reactor). In our case, the Consumer is actually a TCP socket. Please note that the actual numbers, while impressive, can&amp;rsquo;t be used for real world measurements. What you&amp;rsquo;ll see here is a raw throughput test to define a baseline what can be expected under ideal conditions. We are also using localhost here to avoid network latency (which is the bottleneck for most network applications).&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to use a Couchbase server as an endpoint, but feel free to use whatever you want instead. The whole API is very generic and the consumers can be exchanged easily.&lt;/p&gt;

&lt;h1 id=&#34;setup&#34;&gt;Setup&lt;/h1&gt;

&lt;p&gt;Before we can get started, all we need to do is include the &lt;code&gt;reactor-tcp&lt;/code&gt; artifact from maven. Now you can do this through gradle, maven, ivy or what you want, but at this point, I would recommend you to check out the &lt;a href=&#34;https://github.com/reactor/reactor&#34;&gt;reactor&lt;/a&gt; project directly from github and build it on your own, so you&amp;rsquo;ll have the latest and greatest code in your local repository:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/reactor/reactor.git
$ cd reactor
$ ./gradlew install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will download and install everything you need. The next step is to create a maven or gradle project in your IDE, but I&amp;rsquo;ll leave that part up to the reader. The maven dependency you need to include is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.projectreactor&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;reactor-tcp&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0.0.BUILD-SNAPSHOT&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or, for all gradle folks:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dependencies {
    compile &#39;org.projectreactor:reactor-tcp:1.0.0.BUILD-SNAPSHOT&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;the-processor&#34;&gt;The Processor&lt;/h1&gt;

&lt;p&gt;Now, let&amp;rsquo;s get to some actual code. The Processor is a very lightweight abstraction over the &lt;a href=&#34;https://github.com/LMAX-Exchange/disruptor&#34;&gt;LMAX Disruptor&lt;/a&gt; a high performant RingBuffer. A RingBuffer provides much better characteristics than a normal Queue, and the Disruptor is heavily optimized for dispatching tasks in the nanosecond area (which means millions of operations per second). I recommend you to read &lt;a href=&#34;https://github.com/LMAX-Exchange/disruptor/blob/master/docs/Disruptor.docx&#34;&gt;this paper&lt;/a&gt; and also check out talks by &lt;a href=&#34;http://mechanical-sympathy.blogspot.co.at/&#34;&gt;Martin Thompson&lt;/a&gt; if you are interested.&lt;/p&gt;

&lt;p&gt;The basic idea is that we decouple consumers from producers, so that each of them can work on their own pace (not blocking each other) and also benefiting from batching if the producers are faster than the consumers. We&amp;rsquo;ll see why this is particularly important with TCP in a second.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;Processor&lt;/code&gt; can be created by instantiating a &lt;code&gt;ProcessorSpec&lt;/code&gt; and defining some mandatory options. Then, the &lt;code&gt;Processor&lt;/code&gt; is built for us.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;ProcessorSpec&amp;lt;Event&amp;lt;Buffer&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;writeProcessor&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;ProcessorSpec&amp;lt;Event&amp;lt;Buffer&amp;gt;&amp;gt;()&lt;/span&gt;
	&lt;span style=&#34;color: #000000&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;dataSupplier&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Supplier&amp;lt;Event&amp;lt;Buffer&amp;gt;&amp;gt;()&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #000000&#34;&gt;@Override&lt;/span&gt;
		&lt;span style=&#34;color: #A90D91&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Event&amp;lt;Buffer&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;get()&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
		  &lt;span style=&#34;color: #A90D91&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Event&amp;lt;Buffer&amp;gt;(&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Buffer());&lt;/span&gt;
		&lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color: #000000&#34;&gt;})&lt;/span&gt;
	&lt;span style=&#34;color: #000000&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;consume&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Node(&lt;/span&gt;&lt;span style=&#34;color: #C41A16&#34;&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;environment))&lt;/span&gt;
	&lt;span style=&#34;color: #000000&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that this &lt;code&gt;Spec&lt;/code&gt; pattern is very common in reactor, as it allows for very easy and yet flexible object creation. There are a few things that we need to cover.&lt;/p&gt;

&lt;p&gt;First, the generic type here is &lt;code&gt;Event&amp;lt;Buffer&amp;gt;&lt;/code&gt;. The producers will wrap the payload (here we use raw &lt;code&gt;Buffers&lt;/code&gt;) in an &lt;code&gt;Event&lt;/code&gt; and the consumers will unwrap and use it properly. The &lt;code&gt;Event&lt;/code&gt; type also allows for headers that can be used for custom routing, but we won&amp;rsquo;t cover that here.&lt;/p&gt;

&lt;p&gt;Second, the &lt;code&gt;dataSupplier&lt;/code&gt; is a speciality of the Disruptor RingBuffer. In order to minimize garbage collection and make effective use of memory layout, we need to pre-allocate our container objects. They will be reused throughout the application and will never be garbage collected.&lt;/p&gt;

&lt;p&gt;Third, through the &lt;code&gt;consume&lt;/code&gt; method we can tell the &lt;code&gt;Processor&lt;/code&gt; who will be notified when new data is added to the RingBuffer. In our case, the &lt;code&gt;Node&lt;/code&gt; represents the TCP client which we&amp;rsquo;ll build in a second.&lt;/p&gt;

&lt;p&gt;Now, how do we write to the Processor? Let&amp;rsquo;s add a simple method that does it for us:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;write(&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Buffer&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;data)&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #A90D91&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Operation&amp;lt;Event&amp;lt;Buffer&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;op&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;writeProcessor.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;();&lt;/span&gt;
	&lt;span style=&#34;color: #000000&#34;&gt;op.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;setData&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(data);&lt;/span&gt;
	&lt;span style=&#34;color: #000000&#34;&gt;op.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;commit&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, we get a &lt;code&gt;Operation&lt;/code&gt; out of the processor (that wraps our data) and override it with the data that we actually want to store this time. You can see that we are not allocating new objects in the RingBuffer, we just use the old one that has been provided for us. With the &lt;code&gt;commit&lt;/code&gt; method we put it back into the RingBuffer. Actually, behind the scenes, it makes use of Sequences and Barriers inside the RingBuffer, but this is completely hidden from us.&lt;/p&gt;

&lt;p&gt;Here is the full code for the lazy reader:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;reactor.core.Environment;&lt;/span&gt;
&lt;span style=&#34;color: #A90D91&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;reactor.core.processor.Operation;&lt;/span&gt;
&lt;span style=&#34;color: #A90D91&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;reactor.core.processor.Processor;&lt;/span&gt;
&lt;span style=&#34;color: #A90D91&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;reactor.core.processor.spec.ProcessorSpec;&lt;/span&gt;
&lt;span style=&#34;color: #A90D91&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;reactor.event.Event;&lt;/span&gt;
&lt;span style=&#34;color: #A90D91&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;reactor.function.Supplier;&lt;/span&gt;
&lt;span style=&#34;color: #A90D91&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;reactor.io.Buffer;&lt;/span&gt;

&lt;span style=&#34;color: #A90D91&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #3F6E75&#34;&gt;MessageDispatcher&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color: #A90D91&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Environment&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;environment;&lt;/span&gt;

  &lt;span style=&#34;color: #A90D91&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Processor&amp;lt;Event&amp;lt;Buffer&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;writeProcessor;&lt;/span&gt;

  &lt;span style=&#34;color: #A90D91&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;MessageDispatcher()&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #A90D91&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Environment());&lt;/span&gt;
  &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #000000&#34;&gt;MessageDispatcher(&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Environment&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;env)&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;environment&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;env;&lt;/span&gt;

    &lt;span style=&#34;color: #000000&#34;&gt;writeProcessor&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;ProcessorSpec&amp;lt;Event&amp;lt;Buffer&amp;gt;&amp;gt;()&lt;/span&gt;
      &lt;span style=&#34;color: #000000&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;dataSupplier&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Supplier&amp;lt;Event&amp;lt;Buffer&amp;gt;&amp;gt;()&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;@Override&lt;/span&gt;
        &lt;span style=&#34;color: #A90D91&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Event&amp;lt;Buffer&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;get()&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color: #A90D91&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Event&amp;lt;Buffer&amp;gt;(&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Buffer());&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;
      &lt;span style=&#34;color: #000000&#34;&gt;})&lt;/span&gt;
      &lt;span style=&#34;color: #000000&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;consume&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Node(&lt;/span&gt;&lt;span style=&#34;color: #C41A16&#34;&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;environment))&lt;/span&gt;
      &lt;span style=&#34;color: #000000&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;();&lt;/span&gt;

  &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #A90D91&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;write(&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Buffer&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;data)&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #A90D91&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Operation&amp;lt;Event&amp;lt;Buffer&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;op&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;writeProcessor.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;op.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;setData&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(data);&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;op.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;commit&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;One final note before we move on: did you spot the &lt;code&gt;Environment&lt;/code&gt; here? This is also a common theme in the Reactor framework. The &lt;code&gt;Environment&lt;/code&gt; is used in many places to signal information about - who would have thought that - the JVM environment. The general recommendation is to create only one &lt;code&gt;Environment&lt;/code&gt; instance per JVM, so we happily pass it around in our small application.&lt;/p&gt;

&lt;h1 id=&#34;the-consumer&#34;&gt;The Consumer&lt;/h1&gt;

&lt;p&gt;Before we get into the nitty-gritty network details, let&amp;rsquo;s add a consumer that just prints out the data that he &amp;ldquo;sees&amp;rdquo;. If you want to try this sample, make sure to change the previous code temporarily from &lt;code&gt;.consume(new Node(...))&lt;/code&gt; to &lt;code&gt;.consume(new EchoConsumer())&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #3F6E75&#34;&gt;EchoConsumer&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Consumer&amp;lt;Event&amp;lt;Buffer&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color: #000000&#34;&gt;@Override&lt;/span&gt;
  &lt;span style=&#34;color: #A90D91&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;accept(&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Event&amp;lt;Buffer&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;bufferEvent)&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;System.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(Arrays.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(bufferEvent.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;getData&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;asBytes&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;()));&lt;/span&gt;
  &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;accept&lt;/code&gt; method is always called once there is information available on the Processor. Let&amp;rsquo;s add a simple test case to verify that this works:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;org.junit.Test;&lt;/span&gt;
&lt;span style=&#34;color: #A90D91&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;reactor.io.Buffer;&lt;/span&gt;

&lt;span style=&#34;color: #A90D91&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #3F6E75&#34;&gt;MessageDispatcherTest&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color: #000000&#34;&gt;@Test&lt;/span&gt;
  &lt;span style=&#34;color: #A90D91&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;echoSomeGarbage()&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;MessageDispatcher&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;dispatcher&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;MessageDispatcher();&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;dispatcher.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;write&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(Buffer.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;wrap&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #C41A16&#34;&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;));&lt;/span&gt;
  &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now if we run this test, we should see &lt;code&gt;[72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]&lt;/code&gt; printed on the console - great! This is the byte array representation of our wrapped buffer. Of course we could make our lives easier and use &lt;code&gt;Strings&lt;/code&gt; instead of &lt;code&gt;Buffer&lt;/code&gt; in our implementation, but the &lt;code&gt;Buffer&lt;/code&gt; works much better with network communication.&lt;/p&gt;

&lt;p&gt;The next step would be to send the data over the network. Let&amp;rsquo;s replace our Consumer with a more intelligent one. Be aware that the &lt;code&gt;TcpClient&lt;/code&gt; that you&amp;rsquo;ll see doesn&amp;rsquo;t communicate with Java NIO directly - it makes use of the excellent &lt;a href=&#34;http://netty.io/&#34;&gt;Netty&lt;/a&gt; project which provides a convenient and performant wrapper around NIO and OIO (we use NIO here).&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #3F6E75&#34;&gt;Node&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Consumer&amp;lt;Event&amp;lt;Buffer&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color: #A90D91&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;TcpClient&amp;lt;Buffer,&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Buffer&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;client;&lt;/span&gt;
  &lt;span style=&#34;color: #A90D91&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;TcpConnection&amp;lt;Buffer,&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Buffer&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;conn&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color: #A90D91&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Node(String&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;hostname,&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Environment&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;env)&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;client&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;TcpClientSpec&amp;lt;Buffer,&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Buffer&amp;gt;(NettyTcpClient.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;)&lt;/span&gt;
      &lt;span style=&#34;color: #000000&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;env&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(env)&lt;/span&gt;
      &lt;span style=&#34;color: #000000&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;connect&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(hostname,&lt;/span&gt; &lt;span style=&#34;color: #1C01CE&#34;&gt;11210&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;)&lt;/span&gt;
      &lt;span style=&#34;color: #000000&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color: #A90D91&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #000000&#34;&gt;conn&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;client.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;open&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;(InterruptedException&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;e)&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #000000&#34;&gt;e.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;printStackTrace&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #000000&#34;&gt;@Override&lt;/span&gt;
  &lt;span style=&#34;color: #A90D91&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;accept(&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Event&amp;lt;Buffer&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;bufferEvent)&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;Buffer&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;buf&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;bufferEvent.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;getData&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color: #A90D91&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;CountDownLatch&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;latch&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;CountDownLatch(&lt;/span&gt;&lt;span style=&#34;color: #1C01CE&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;conn.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;send&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(buf,&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Consumer&amp;lt;Boolean&amp;gt;()&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #000000&#34;&gt;@Override&lt;/span&gt;
      &lt;span style=&#34;color: #A90D91&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;accept(&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Boolean&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;success)&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;latch.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;countDown&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;();&lt;/span&gt;
      &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;});&lt;/span&gt;

    &lt;span style=&#34;color: #A90D91&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #000000&#34;&gt;latch.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #1C01CE&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;TimeUnit.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;SECONDS&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;ex)&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #A90D91&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;RuntimeException(&lt;/span&gt;&lt;span style=&#34;color: #C41A16&#34;&gt;&amp;quot;Something went wrong while waiting :(&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;ex);&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While this might seem like a lot of code, it&amp;rsquo;s not so bad. We do two things here. During object construction, we create a new &lt;code&gt;TcpClient&lt;/code&gt; through the &lt;code&gt;TcpClientSpec&lt;/code&gt; (see the Spec again?) and pass it the environment and the socket to connect to. The next thing we need to do is actually open the connection and wait until finished.&lt;/p&gt;

&lt;p&gt;Now that we have an open connection, we can write to it. Since everything is non-blocking in Reactor, so is socket writing. In order to not overwhelm the underlying infrastructure, we have to wait until it is actually finished before moving on to handle the next &lt;code&gt;Event&lt;/code&gt; in the Processor. We do this by using a &lt;code&gt;CountDownLatch&lt;/code&gt;, which will be counted down once the writing has finished. In our simple example we just fail if it took longer than one second. In a real application, one could report errors or retry with Backoff.&lt;/p&gt;

&lt;p&gt;Before we can run that code, we need to add a test case to make it all work.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;Buffer[]&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;buffers&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Buffer[&lt;/span&gt;&lt;span style=&#34;color: #1C01CE&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;];&lt;/span&gt;

&lt;span style=&#34;color: #000000&#34;&gt;@Before&lt;/span&gt;
&lt;span style=&#34;color: #A90D91&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;initBuffers()&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #A90D91&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #1C01CE&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #1C01CE&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;i++)&lt;/span&gt;  &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #000000&#34;&gt;Buffer&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;buf&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Buffer(&lt;/span&gt;&lt;span style=&#34;color: #1C01CE&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;);&lt;/span&gt;
		&lt;span style=&#34;color: #000000&#34;&gt;buf.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #1C01CE&#34;&gt;0x80&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color: #177500&#34;&gt;// Magic Byte&lt;/span&gt;
		&lt;span style=&#34;color: #000000&#34;&gt;buf.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #1C01CE&#34;&gt;0x09&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color: #177500&#34;&gt;// GETQ Opcode&lt;/span&gt;
		&lt;span style=&#34;color: #000000&#34;&gt;buf.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #1C01CE&#34;&gt;0x00&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #1C01CE&#34;&gt;0x03&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;});&lt;/span&gt; &lt;span style=&#34;color: #177500&#34;&gt;// 3 byte keylength (KEY)&lt;/span&gt;
		&lt;span style=&#34;color: #000000&#34;&gt;buf.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #1C01CE&#34;&gt;0x00&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color: #177500&#34;&gt;// Extra Length&lt;/span&gt;
		&lt;span style=&#34;color: #000000&#34;&gt;buf.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #1C01CE&#34;&gt;0x00&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color: #177500&#34;&gt;// data type&lt;/span&gt;
		&lt;span style=&#34;color: #000000&#34;&gt;buf.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #1C01CE&#34;&gt;0x00&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #1C01CE&#34;&gt;0x00&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;});&lt;/span&gt; &lt;span style=&#34;color: #177500&#34;&gt;// reserved&lt;/span&gt;
		&lt;span style=&#34;color: #000000&#34;&gt;buf.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #1C01CE&#34;&gt;0x00&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #1C01CE&#34;&gt;0x00&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #1C01CE&#34;&gt;0x00&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #1C01CE&#34;&gt;0x03&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;});&lt;/span&gt; &lt;span style=&#34;color: #177500&#34;&gt;// total body size&lt;/span&gt;
		&lt;span style=&#34;color: #000000&#34;&gt;buf.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #1C01CE&#34;&gt;0x00&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #1C01CE&#34;&gt;0x00&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #1C01CE&#34;&gt;0x00&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #1C01CE&#34;&gt;0x00&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;});&lt;/span&gt; &lt;span style=&#34;color: #177500&#34;&gt;// Opaque&lt;/span&gt;
		&lt;span style=&#34;color: #000000&#34;&gt;buf.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #1C01CE&#34;&gt;0x00&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #1C01CE&#34;&gt;0x00&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #1C01CE&#34;&gt;0x00&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #1C01CE&#34;&gt;0x00&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #1C01CE&#34;&gt;0x00&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #1C01CE&#34;&gt;0x00&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #1C01CE&#34;&gt;0x00&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #1C01CE&#34;&gt;0x00&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;});&lt;/span&gt; &lt;span style=&#34;color: #177500&#34;&gt;// CAS&lt;/span&gt;
		&lt;span style=&#34;color: #000000&#34;&gt;buf.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #1C01CE&#34;&gt;0x65&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #1C01CE&#34;&gt;0x6F&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;)(i&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #1C01CE&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;)});&lt;/span&gt;
		&lt;span style=&#34;color: #000000&#34;&gt;buffers[i]&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;buf;&lt;/span&gt;
	&lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #000000&#34;&gt;@Test&lt;/span&gt;
&lt;span style=&#34;color: #A90D91&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;giveItSomeLoad()&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #000000&#34;&gt;MessageDispatcher&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;dispatcher&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;MessageDispatcher();&lt;/span&gt;

	&lt;span style=&#34;color: #A90D91&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;amountOfOps&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #1C01CE&#34;&gt;100000000&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;;&lt;/span&gt;
	&lt;span style=&#34;color: #A90D91&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #1C01CE&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;amountOfOps;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;i++)&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color: #000000&#34;&gt;dispatcher.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;write&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Buffer(buffers[(&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;)(i&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #1C01CE&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;)]).&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;flip&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;());&lt;/span&gt;
	&lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To actually simulate something real, this test creates ten buffer instances with Couchbase messages. Those familiar with the memcached binary protocol can identify it as a GETQ request. This means it does not return anything when the key is not found (which is what we want, because in this case we want to benchmark the upper limit for write throughput and not concern us with parsing of error responses). Once the data is created, we run a given amount of operations and call the &lt;code&gt;write&lt;/code&gt; method on the &lt;code&gt;MessageDispatcher&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;batch-all-the-things&#34;&gt;Batch all the things!&lt;/h1&gt;

&lt;p&gt;If we run this, we get a - very disappointing - number of only 50K ops/s. In addition, we get lots of CPU usage on the Java process (100% and more on a quad core processor here). Why is it so slow? The answer is: network overhead. In our case, we send out 27 byte chunks over the network. With all the TCP, IP and Ethernet headers, there is lots of unnecessary overhead involved that puts down our performance. The answer to that is batching! If our producers are faster than the consumers, we can batch the intermediate data up into a buffer and send it over the wire in one chunk. This will give us a much better goodput ratio.&lt;/p&gt;

&lt;p&gt;To help us with batching the Disruptor and the Processor expose the start end end of a batching phase to our consumer. To get this information, we need to extend from the &lt;code&gt;BatchConsumer&lt;/code&gt; instead of the regular &lt;code&gt;Consumer&lt;/code&gt;. Let&amp;rsquo;s refactor our node and add some batching characteristics:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #3F6E75&#34;&gt;BatchingNode&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;BatchConsumer&amp;lt;Event&amp;lt;Buffer&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color: #A90D91&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;TcpClient&amp;lt;Buffer,&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Buffer&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;client;&lt;/span&gt;
  &lt;span style=&#34;color: #A90D91&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;TcpConnection&amp;lt;Buffer,&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Buffer&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;conn&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #A90D91&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Buffer&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;writeBuffer;&lt;/span&gt;

  &lt;span style=&#34;color: #A90D91&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;BatchingNode(String&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;hostname,&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Environment&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;env)&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;client&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;TcpClientSpec&amp;lt;Buffer,&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Buffer&amp;gt;(NettyTcpClient.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;)&lt;/span&gt;
      &lt;span style=&#34;color: #000000&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;env&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(env)&lt;/span&gt;
      &lt;span style=&#34;color: #000000&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;connect&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(hostname,&lt;/span&gt; &lt;span style=&#34;color: #1C01CE&#34;&gt;11210&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;)&lt;/span&gt;
      &lt;span style=&#34;color: #000000&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color: #A90D91&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #000000&#34;&gt;conn&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;client.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;open&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;(InterruptedException&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;e)&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #000000&#34;&gt;e.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;printStackTrace&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #000000&#34;&gt;writeBuffer&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Buffer(&lt;/span&gt;&lt;span style=&#34;color: #1C01CE&#34;&gt;1500&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;);&lt;/span&gt;

  &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #000000&#34;&gt;@Override&lt;/span&gt;
  &lt;span style=&#34;color: #A90D91&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;start()&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #000000&#34;&gt;@Override&lt;/span&gt;
  &lt;span style=&#34;color: #A90D91&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;end()&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;flush();&lt;/span&gt;
  &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #000000&#34;&gt;@Override&lt;/span&gt;
  &lt;span style=&#34;color: #A90D91&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;accept(&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Event&amp;lt;Buffer&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;bufferEvent)&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;Buffer&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;buf&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;bufferEvent.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;getData&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color: #A90D91&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;(writeBuffer.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;remaining&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;buf.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;remaining&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #000000&#34;&gt;flush();&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #000000&#34;&gt;writeBuffer.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(buf);&lt;/span&gt;
  &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #A90D91&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;flush()&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #A90D91&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;CountDownLatch&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;latch&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;CountDownLatch(&lt;/span&gt;&lt;span style=&#34;color: #1C01CE&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;writeBuffer.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;flip&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;conn.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;send&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(writeBuffer,&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Consumer&amp;lt;Boolean&amp;gt;()&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #000000&#34;&gt;@Override&lt;/span&gt;
      &lt;span style=&#34;color: #A90D91&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;accept(&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Boolean&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;success)&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;latch.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;countDown&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;();&lt;/span&gt;
      &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;});&lt;/span&gt;
    &lt;span style=&#34;color: #A90D91&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #000000&#34;&gt;latch.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #1C01CE&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;TimeUnit.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;SECONDS&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;ex)&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #A90D91&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;RuntimeException(&lt;/span&gt;&lt;span style=&#34;color: #C41A16&#34;&gt;&amp;quot;got ex&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;ex);&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;writeBuffer.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;clear&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The code here is not much different. Note that we refactored the writing part out into the &lt;code&gt;flush&lt;/code&gt; method. In the &lt;code&gt;accept&lt;/code&gt; method, we write to the network if the buffer is full, otherwise we just add it to our write buffer. Note that we also need to &lt;code&gt;flush&lt;/code&gt; if the batching is over (notified through the &lt;code&gt;end&lt;/code&gt; method), otherwise we would potentially keep data around for a longer time than needed (and latency is still important to us).&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s run the test case again&amp;hellip; now we get 500k ops/s with only 40% CPU load on the java process! Now that&amp;rsquo;s what I call an improvement!&lt;/p&gt;

&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;

&lt;p&gt;This was a very quick introduction into the Processor, just one piece in the very promising Reactor framework. There is so much more to blog about in the future, so stay tuned!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Useful Couchbase Resources &amp; Blog Posts</title>
      <link>http://nitschinger.at/Useful-Couchbase-Resources-Blog-Posts/</link>
      <pubDate>Tue, 06 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://nitschinger.at/Useful-Couchbase-Resources-Blog-Posts/</guid>
      <description>

&lt;p&gt;The following list is a convenient way to get access to lots of resources, blog posts and material that have been shared throughout the past months. I tried to separate them by area, but of course lots of them overlap to some extent.&lt;/p&gt;

&lt;p&gt;They are sorted by date (so you&amp;rsquo;ll find the most recent ones on top) and include the author where possible. Be aware that some of the older articles may already be outdated  or not 100% accurate.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll try to update this page as new articles get published, so it may pay off to come back here from time to time and check out the topmost ones. If you want to see your article included, post them in the comments!&lt;/p&gt;

&lt;h2 id=&#34;starting-out&#34;&gt;Starting Out&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.couchbase.com/docs/couchbase-manual-2.1.0/&#34;&gt;Official Couchbase Server 2.1 Manual&lt;/a&gt;: The official manual and a good starting point for all kinds of general-purpose and architectural questions.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.couchbase.com/docs/couchbase-devguide-2.1.0/&#34;&gt;Couchbase Server 2.1 Developer Guide&lt;/a&gt;: The developer guide is particularly useful for developers that are new to document modeling and general app-related questions.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.couchbase.com/communities&#34;&gt;The Community Portal&lt;/a&gt;: Starting point for all SDK-related questions and links.&lt;/li&gt;
&lt;li&gt;2013-04-24 &lt;a href=&#34;http://blog.couchbase.com/top-10-things-ops-sys-admin-must-know-about-couchbase&#34;&gt;Top 10 things an Ops / Sys admin must know about Couchbase&lt;/a&gt;: Ten short rules that sys admins that maintain Couchbase clusters should keep in mind.&lt;/li&gt;
&lt;li&gt;2012-07-06 &lt;a href=&#34;http://tugdualgrall.blogspot.co.at/2012/07/couchbase-101-install-store-and-query.html&#34;&gt;Couchbase 101 : Install, Store and Query Data (tgrall)&lt;/a&gt;: A very basic introduction for people starting out, teaching the very basics in a hands-on fashion.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;installation-infrastructure&#34;&gt;Installation &amp;amp; Infrastructure&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.couchbase.com/docs/couchbase-manual-2.1.0/couchbase-getting-started.html&#34;&gt;Official Installation Guide for 2.1&lt;/a&gt;: The official installation guide, read this before installing on production systems.&lt;/li&gt;
&lt;li&gt;2013-08-05 &lt;a href=&#34;http://trondn.blogspot.no/2013/08/running-couchbase-211-on-smartos.html&#34;&gt;Running Couchbase 2.1.1 on SmartOS (trondn)&lt;/a&gt;: Learn how to - step by step - compile and run a Couchbase cluster on SmartOS. This is for all the Solaris fans out there!&lt;/li&gt;
&lt;li&gt;2013-07-22 &lt;a href=&#34;http://blog.couchbase.com/deploying-couchbase-chef&#34;&gt;Deploying Couchbase with Chef (ketakigangal)&lt;/a&gt;: If you use Chef to automate your infrastructure, this blog post shows you how to integrate Couchbase with it.&lt;/li&gt;
&lt;li&gt;2013-07-11 &lt;a href=&#34;http://tugdualgrall.blogspot.co.at/2013/07/deploy-your-nodecouchbase-application.html&#34;&gt;Deploy your Node/Couchbase application to the cloud with Clever Cloud (tgrall)&lt;/a&gt;: You&amp;rsquo;ll learn how to deploy your Node.JS app with Couchbase onto &amp;ldquo;clever cloud&amp;rdquo;, a PaaS provider.&lt;/li&gt;
&lt;li&gt;2013-06-27 &lt;a href=&#34;http://www.ebruakagunduz.com/2013/06/nagios-plugin-to-monitor-couchbase.html?spref=tw&#34;&gt;Nagios plugin to monitor Couchbase (Ebru Akagündüz)&lt;/a&gt;: If you are using Nagios to monitor your infrastructure, this post shows you how to integrate Couchbase with a single plugin.&lt;/li&gt;
&lt;li&gt;2013-05-31 &lt;a href=&#34;http://tugdualgrall.blogspot.co.at/2013/05/create-couchbase-cluster-in-one-command.html&#34;&gt;Create a Couchbase cluster in less than a minute with Ansible (tgrall)&lt;/a&gt;: Create a Couchbase cluster automatically with Ansible, a systems automation framework like chef.&lt;/li&gt;
&lt;li&gt;2013-05-27 &lt;a href=&#34;http://nitschinger.at/A-Couchbase-Cluster-in-Minutes-with-Vagrant-and-Puppet&#34;&gt;A Couchbase Cluster in Minutes with Vagrant and Puppet (daschl)&lt;/a&gt;: If you want to setup a 4 node cluster with couchbase in minutes, this blog post shows you how to do it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;document-design-data-import-export&#34;&gt;Document Design &amp;amp; Data Import/Export&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;2013-07-18 &lt;a href=&#34;http://tugdualgrall.blogspot.co.at/2013/07/how-to-implement-document-versioning.html&#34;&gt;How to implement Document Versioning with Couchbase (tgrall)&lt;/a&gt;: See how to implement document versioning by using a key-based approach. Uses the Java SDK, but can be adapted for all languages.&lt;/li&gt;
&lt;li&gt;2013-07-08 &lt;a href=&#34;http://dev.theladders.com/2013/07/denormalize-the-datas-for-great-good&#34;&gt;Denormalize the Datas for Great Good (John Connolly)&lt;/a&gt;: See how TheLadders benefited from denormalizing its dataset and using Couchbase, greatly reducing their response times.&lt;/li&gt;
&lt;li&gt;2013-07-03 &lt;a href=&#34;http://tugdualgrall.blogspot.co.at/2013/07/sql-to-nosql-importing-data-from-rdbms.html&#34;&gt;SQL to NoSQL : Copy your data from MySQL to Couchbase (tgrall)&lt;/a&gt;: A Java-based tool to import data from a SQL database into Couchbase.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;views&#34;&gt;Views&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;2013-07-25 &lt;a href=&#34;http://blog.couchbase.com/caching-queries-couchbase-high-performance&#34;&gt;Caching queries in Couchbase for high performance (Alexis Roos)&lt;/a&gt;: Learn how to cache view results for better performance.&lt;/li&gt;
&lt;li&gt;2013-07-12 &lt;a href=&#34;http://blog.couchbase.com/calculating-average-document-size-documents-stored-couchbase&#34;&gt;Calculating average document size of documents stored in Couchbase. (Alexis Roos)&lt;/a&gt;: With a simple map and a custom reduce function, one can easily calculate the average document size in the bucket.&lt;/li&gt;
&lt;li&gt;2013-06-14 &lt;a href=&#34;http://avsej.net/2013/analyzing-binary-data-in-couchbase&#34;&gt;Analyzing Binary Data in Couchbase (avsej)&lt;/a&gt;: Shows how to access binary (non-json) data from a View. Uses ruby to store the data, but can be adapted to any language.&lt;/li&gt;
&lt;li&gt;2013-02-18 &lt;a href=&#34;http://tugdualgrall.blogspot.co.at/2013/02/how-to-get-latest-document-by-datetime.html&#34;&gt;How to get the latest document by date/time field (tgrall)&lt;/a&gt;: A simple example on how to sort View-data based on a timestamp.&lt;/li&gt;
&lt;li&gt;2013-02-13 &lt;a href=&#34;http://tugdualgrall.blogspot.co.at/2013/02/introduction-to-collated-views-with.html&#34;&gt;Introduction to Collated Views with Couchbase 2.0 (tgrall)&lt;/a&gt;: Views can also be used to output &amp;ldquo;master/detail&amp;rdquo;-like scenarios. This post shows how.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;java-sdk-jvm&#34;&gt;Java SDK &amp;amp; JVM&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.couchbase.com/communities/java/getting-started&#34;&gt;Getting Started &amp;amp; Download&lt;/a&gt;: The official &amp;ldquo;Getting Started&amp;rdquo; page for the Java SDK. Introduction, Tutorial and Downloads.&lt;/li&gt;
&lt;li&gt;2013-05-16 &lt;a href=&#34;http://nitschinger.at/Logging-with-the-Couchbase-Java-Client&#34;&gt;Logging with the Couchbase Java Client (daschl)&lt;/a&gt;: An in-depth post about how to correctly configure logging for the Java SDK (and the underlying spymemcached library).&lt;/li&gt;
&lt;li&gt;2013-04-17 &lt;a href=&#34;http://nitschinger.at/Couchbase-Java-SDK-Internals&#34;&gt;Couchbase Java SDK Internals (daschl)&lt;/a&gt;: A very detailed post about the inner workings of the Java SDK. Recommended for advanced users who want to understand more of the internals.&lt;/li&gt;
&lt;li&gt;2012-12-30 &lt;a href=&#34;http://tugdualgrall.blogspot.co.at/2012/12/couchbase-101-create-views-mapreduce.html&#34;&gt;Couchbase 101: Create views (MapReduce) from your Java application (tgrall)&lt;/a&gt;: How to create views and design documents directly from the Java SDK.&lt;/li&gt;
&lt;li&gt;2012-11-05 &lt;a href=&#34;http://tugdualgrall.blogspot.co.at/2012/11/couchbase-create-large-dataset-using.html&#34;&gt;Couchbase : Create a large dataset using Twitter and Java (tgrall)&lt;/a&gt;: Feed data from Twitter directly into your Couchbase cluster through the Java SDK.&lt;/li&gt;
&lt;li&gt;2012-04-26 &lt;a href=&#34;http://nitschinger.at/Accessing-Couchbase-from-Scala&#34;&gt;Accessing Couchbase from Scala (daschl)&lt;/a&gt;: How to access the Couchbase Java SDK from the Scala programing language.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;net&#34;&gt;.NET&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.couchbase.com/communities/net/getting-started&#34;&gt;Getting Started &amp;amp; Download&lt;/a&gt;: The official &amp;ldquo;Getting Started&amp;rdquo; page for the .NET SDK. Introduction, Tutorial and Downloads.&lt;/li&gt;
&lt;li&gt;2013-06-14 &lt;a href=&#34;http://vimeo.com/68378224&#34;&gt;Video: Code-First NoSQL with .NET and Couchbase (John Zablocki)&lt;/a&gt;: A video where John Zablocki gives an introduction into NoSQL development and especially with Couchbase.&lt;/li&gt;
&lt;li&gt;2013-03-06 &lt;a href=&#34;http://blog.couchbase.com/net-couchbase-client-instrumentation-aspnet-and-glimpse&#34;&gt;.NET Couchbase Client Instrumentation with ASP.NET and Glimpse (John Zablocki)&lt;/a&gt;: See how to get your Couchbase server-side logging errors easily displayed in the browser console. Very helpful during development.&lt;/li&gt;
&lt;li&gt;2013-02-01 &lt;a href=&#34;http://blog.couchbase.com/moving-no-schema-stack-c-and-dynamic-types&#34;&gt;Moving No Schema up the Stack with C# and Dynamic Types (John Zablocki)&lt;/a&gt;: This blog post shows how to store schemaless data with both dictionaries and C#&amp;rsquo;s dynamic typing.&lt;/li&gt;
&lt;li&gt;2013-01-04 &lt;a href=&#34;http://blog.couchbase.com/xdcr-aspnet-and-nancy&#34;&gt;XDCR with ASP.NET and Nancy (John Zablocki)&lt;/a&gt;: Learn how to build an XDCR endpoint (like ElasticSearch integration) and read the data through our XDCR mechanisms.&lt;/li&gt;
&lt;li&gt;2012-10-23 &lt;a href=&#34;http://blog.couchbase.com/using-c-domain-objects-define-couchbase-views&#34;&gt;Using C# Domain Objects to Define Couchbase Views (John Zablocki)&lt;/a&gt;: How to automatically create DesignDocuments based of C# domain objects.&lt;/li&gt;
&lt;li&gt;2012-10-05 &lt;a href=&#34;http://blog.couchbase.com/new-visual-studio-code-snippets-net-couchbase-client-library&#34;&gt;New Visual Studio Code Snippets for the .NET Couchbase Client Library (John Zablocki)&lt;/a&gt;: A collection of helpful snippets in the day-to-day development process.&lt;/li&gt;
&lt;li&gt;2012-09-20 &lt;a href=&#34;http://blog.couchbase.com/strongly-typed-views-net-client-library&#34;&gt;Strongly Typed Views with the .NET Client Library (John Zablocki)&lt;/a&gt;: Learn how to map View responses directly onto domain objects.&lt;/li&gt;
&lt;li&gt;2012-08-01 &lt;a href=&#34;http://blog.couchbase.com/introducing-couchbase-aspnet-outputcache-provider&#34;&gt;Introducing the Couchbase ASP.NET OutputCache Provider (John Zablocki)&lt;/a&gt;: A short post on how to use Couchbase for easy caching in the ASP.NET environment.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;php&#34;&gt;PHP&lt;/h2&gt;

&lt;p&gt;(Note: some of these posts are outdated in the way that currently the &amp;ldquo;way to go&amp;rdquo; when installing the PHP SDK is through PECL. See the the &lt;a href=&#34;http://www.couchbase.com/communities/php/getting-started&#34;&gt;Getting Started &amp;amp; Download&lt;/a&gt; guide for more information.)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.couchbase.com/communities/php/getting-started&#34;&gt;Getting Started &amp;amp; Download&lt;/a&gt;: The official &amp;ldquo;Getting Started&amp;rdquo; page for the PHP SDK. Introduction, Tutorial and Downloads.&lt;/li&gt;
&lt;li&gt;2013-04-02  &lt;a href=&#34;http://trondn.blogspot.co.at/2013/04/couchbase-php-xampp-and-windows.html&#34;&gt;Couchbase, PHP, XAMPP and Windows (trondn)&lt;/a&gt;: A short post on how to use the PHP SDK from Microsoft Windows.&lt;/li&gt;
&lt;li&gt;2013-04-01 &lt;a href=&#34;http://trondn.blogspot.co.at/2013/04/building-couchbase-php-driver-on-ubuntu.html&#34;&gt;Building Couchbase PHP driver on Ubuntu (trondn)&lt;/a&gt;: Learn how to build the Couchbase driver on Ubuntu and use it in a simple program.&lt;/li&gt;
&lt;li&gt;2013-02-04 &lt;a href=&#34;http://trondn.blogspot.co.at/2013/02/accessing-couchbase-from-php-on-your-mac.html&#34;&gt;Accessing Couchbase from PHP on your Mac! (trondn)&lt;/a&gt; Building and running the SDK on your Mac is easy, learn how to do it in this post.&lt;/li&gt;
&lt;li&gt;2012-11-01 &lt;a href=&#34;http://trondn.blogspot.co.at/2012/11/building-php-extension-for-couchbase-on.html&#34;&gt;Building the PHP extension for Couchbase on Microsoft Windows! (trondn)&lt;/a&gt;: Learn how to compile the SDK on Windows using Visual Studio 2008.&lt;/li&gt;
&lt;li&gt;2012-06-25 &lt;a href=&#34;http://nitschinger.at/How-to-store-PHP-sessions-in-Couchbase&#34;&gt;How to store PHP sessions in Couchbase (daschl)&lt;/a&gt;: This post shows how to store PHP sessions in Couchbase using different mechanims (not only the official SDK).&lt;/li&gt;
&lt;li&gt;2012-06-21 &lt;a href=&#34;http://nitschinger.at/Using-Couchbase-as-a-flexible-session-store&#34;&gt;Using Couchbase as a flexible session store (daschl)&lt;/a&gt;: With Couchbase Server 2.0, JSON data and Views, its easy to run metrics over your sessions and identify user behavior. Learn how in this post.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;c-go&#34;&gt;C &amp;amp; Go&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.couchbase.com/communities/c/getting-started&#34;&gt;Getting Started &amp;amp; Download with the C SDK&lt;/a&gt;: The official &amp;ldquo;Getting Started&amp;rdquo; page for the C SDK. Introduction, Tutorial and Downloads.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/couchbaselabs/go-couchbase&#34;&gt;Official Go Client Repository&lt;/a&gt;: The Go repository with code and simple examples.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ruby&#34;&gt;Ruby&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.couchbase.com/communities/ruby/getting-started&#34;&gt;Getting Started &amp;amp; Download&lt;/a&gt;: The official &amp;ldquo;Getting Started&amp;rdquo; page for the Ruby SDK. Introduction, Tutorial and Downloads.&lt;/li&gt;
&lt;li&gt;2013-02-23 &lt;a href=&#34;http://avsej.net/links/2013/couchbase-and-rails/&#34;&gt;Couchbase and Rails Talk (avsej)&lt;/a&gt;: A presentation by our lead Ruby SDK developer on how to integrate it with Ruby on Rails.&lt;/li&gt;
&lt;li&gt;2013-02-11 &lt;a href=&#34;http://blog.couchbase.com/using-couchbase-ruby-gem-eventmachine&#34;&gt;Using Couchbase Ruby Gem with EventMachine (avsej)&lt;/a&gt;: This post shows how to use the Ruby SDK together with the high performance EventMachine (custom protocols and performance for TCP/IP) gem.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;node-js&#34;&gt;Node.JS&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;2013-03-06 &lt;a href=&#34;http://tugdualgrall.blogspot.co.at/2013/03/easy-application-development-with.html&#34;&gt;Easy application development with Couchbase, Angular and Node (tgrall)&lt;/a&gt;: Storing Ideas and Votes in Couchbase with Angular and NodeJS.&lt;/li&gt;
&lt;li&gt;2013-01-04 &lt;a href=&#34;http://tugdualgrall.blogspot.co.at/2013/01/getting-started-with-couchbase-and.html&#34;&gt;Getting started with Couchbase and node.js on Windows (tgrall)&lt;/a&gt;: How to install and use the NodeJS Couchbase client library on Windows.&lt;/li&gt;
&lt;li&gt;2012-11-13 &lt;a href=&#34;http://tugdualgrall.blogspot.co.at/2012/11/building-chat-application-using-nodejs.html&#34;&gt;Building a chat application using Node.js and Couchbase (tgrall)&lt;/a&gt;: A nice chat application using Couchbase, NodeJS and socket.io for &amp;ldquo;real time&amp;rdquo; feeling.&lt;/li&gt;
&lt;li&gt;2012-09-24 &lt;a href=&#34;http://tugdualgrall.blogspot.co.at/2012/09/create-simple-nodejs-and-couchbase.html&#34;&gt;Create a Simple Node.js and Couchbase application&amp;hellip; on OS X (tgrall)&lt;/a&gt; A simple (but maybe outdated) tutorial on how to use the NodeJS driver from OSX.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;python&#34;&gt;Python&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.couchbase.com/communities/python/getting-started&#34;&gt;Getting Started &amp;amp; Download&lt;/a&gt;: The official &amp;ldquo;Getting Started&amp;rdquo; page for the Python SDK. Introduction, Tutorial and Downloads.&lt;/li&gt;
&lt;li&gt;2013-06-21 &lt;a href=&#34;http://mnunberg.github.io/2013/python-extension-windows-binaries&#34;&gt;Python Extension Windows Binaries (mnunberg)&lt;/a&gt;: A tale by our maintainer of the Python SDK on how to upload Windows binaries to PyPi.&lt;/li&gt;
&lt;li&gt;2013-05-30 &lt;a href=&#34;http://blog.couchbase.com/whats-python-couchbase-sdk&#34;&gt;What&amp;rsquo;s up with the Python Couchbase SDK (volker)&lt;/a&gt;: A rundown of the latest changes on the Python SDK.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ecosystem&#34;&gt;Ecosystem&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;2013-07-31 &lt;a href=&#34;http://www.ortussolutions.com/blog/couchbase-cluster-setup-orm-secondary-cache-introduction&#34;&gt;Couchbase: Cluster Setup + ORM Secondary Cache Introduction (Brad Wood)&lt;/a&gt;: Using ColdFusion and looking for a secondary cache implementation? Look no further.&lt;/li&gt;
&lt;li&gt;2013-07-22 &lt;a href=&#34;http://blog.jeroenreijn.com/2013/07/visitor-analysis-with-couchbase-elasticsearch.html&#34;&gt;Real-time visitor analysis with Couchbase, Elasticsearch and Kibana (Jeroen Reijn)&lt;/a&gt;: A great post on a customer&amp;rsquo;s use case for real-time visitor analysis.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;troubleshooting&#34;&gt;Troubleshooting&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.couchbase.com/docs/couchbase-manual-2.1.0/couchbase-troubleshooting.html&#34;&gt;Official troubleshooting Guide&lt;/a&gt;: The best place to start if something goes wrong on the server and you don&amp;rsquo;t know why.&lt;/li&gt;
&lt;li&gt;2012-12-26 &lt;a href=&#34;http://tugdualgrall.blogspot.co.at/2012/12/what-to-do-if-your-couchbase-server.html&#34;&gt;What to do if your Couchbase Server does not start? (tgrall)&lt;/a&gt;: If you have troubles getting older Couchbase Server 2.0 versions to run on Windows, this post is for you.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;fun-stuff&#34;&gt;Fun Stuff&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/couchbaselabs/DeveloperDay&#34;&gt;Example code for lots of SDKs and Languages&lt;/a&gt;: Our DeveloperDay material with hands-on code examples to try and learn.&lt;/li&gt;
&lt;li&gt;2013-06-18 &lt;a href=&#34;http://nitschinger.at/Fun-with-Couchbase-Views-and-Message-Pack&#34;&gt;Fun with Couchbase Views and MessagePack (daschl)&lt;/a&gt;: While JSON is tried and true, with a little twiggling and some fun you can get Couchbase Views to speak MessagePack!&lt;/li&gt;
&lt;li&gt;2013-04-29 &lt;a href=&#34;http://tugdualgrall.blogspot.co.at/2013/04/screencast-fun-with-couchbase-mapreduce.html&#34;&gt;Screencast : Fun with Couchbase, MapReduce and Twitter (tgrall)&lt;/a&gt;: A Screencast on importing Twitter data into Couchbase and analyzing it on the fly through Views.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Last Updated: 2013-08-06 (daschl)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fun with Couchbase Views and MessagePack</title>
      <link>http://nitschinger.at/Fun-with-Couchbase-Views-and-Message-Pack/</link>
      <pubDate>Tue, 18 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://nitschinger.at/Fun-with-Couchbase-Views-and-Message-Pack/</guid>
      <description>

&lt;p&gt;Alright, before we start I have to admit that this is a little bit of a hack. Not that it doesn&amp;rsquo;t work, but of course Couchbase Server 2.0 officially only supports JSON documents to be queried through Views. In addition to that, it is not so much known that you have access to all the other documents through Base64 encoding. Recently, &lt;a href=&#34;http://avsej.net/2013/analyzing-binary-data-in-couchbase/&#34;&gt;Sergey&lt;/a&gt; showed us how to very easily analyze binary data in Couchbase Views and this brought me on the idea to take it one step further.&lt;/p&gt;

&lt;p&gt;In this blog post we&amp;rsquo;re going to store &lt;a href=&#34;http://msgpack.org/&#34;&gt;MessagePack&lt;/a&gt; formatted data in Couchbase and then make its content available to Views (and allow us to query it). Note that you don&amp;rsquo;t need to patch Couchbase for this, its just a snippet of JavaScript code that you need to include in your map function. We&amp;rsquo;ll be using Java on the client side here, but nearly every combination of our official SDKs and MessagePack modules works for this.&lt;/p&gt;

&lt;h2 id=&#34;storing-the-data&#34;&gt;Storing the Data&lt;/h2&gt;

&lt;p&gt;In order to store something meaningful we can query later, let&amp;rsquo;s create a Maven project with all needed dependencies. Note that I&amp;rsquo;m assuming you have a Couchbase Server installation running and are familiar with the Couchbase Java SDK (at least a little bit). Also I won&amp;rsquo;t cover the View fundamentals since this is a little advanced topic.&lt;/p&gt;

&lt;p&gt;Here are the required dependencies to start with the fun:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;couchbase&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;couchbase-client&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;1.1.7&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.msgpack&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;msgpack&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;0.6.7&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, don&amp;rsquo;t forget that the Couchbase SDK lives in its own repository:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;repository&amp;gt;
    &amp;lt;id&amp;gt;couchbase&amp;lt;/id&amp;gt;
    &amp;lt;name&amp;gt;Couchbase Maven Repository&amp;lt;/name&amp;gt;
    &amp;lt;url&amp;gt;http://files.couchbase.com/maven2/&amp;lt;/url&amp;gt;
    &amp;lt;snapshots&amp;gt;
        &amp;lt;enabled&amp;gt;false&amp;lt;/enabled&amp;gt;
    &amp;lt;/snapshots&amp;gt;
&amp;lt;/repository&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we can create a simple script that connects to Couchbase, creates some HashMaps with meaningful content, encodes them with the MessagePack encoder and stores them in the database:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import com.couchbase.client.CouchbaseClient;
import org.msgpack.MessagePack;

import java.net.URI;
import java.util.Arrays;
import java.util.HashMap;

public class Main {

  public static void main(String[] args) throws Exception {

    // Connect to Couchbase
    CouchbaseClient cb = new CouchbaseClient(Arrays.asList(new URI(&amp;quot;http://127.0.0.1:8091/pools&amp;quot;)), &amp;quot;default&amp;quot;, &amp;quot;&amp;quot;);

    // Init MessagePack
    MessagePack msgpack = new MessagePack();

    // Create a few Documents with some content
    HashMap&amp;lt;String, String&amp;gt; user1 = new HashMap&amp;lt;String, String&amp;gt;();
    user1.put(&amp;quot;firstname&amp;quot;, &amp;quot;Michael&amp;quot;);
    user1.put(&amp;quot;lastname&amp;quot;, &amp;quot;Nitschinger&amp;quot;);

    HashMap&amp;lt;String, String&amp;gt; user2 = new HashMap&amp;lt;String, String&amp;gt;();
    user2.put(&amp;quot;firstname&amp;quot;, &amp;quot;Matt&amp;quot;);
    user2.put(&amp;quot;lastname&amp;quot;, &amp;quot;Ingenthron&amp;quot;);

    HashMap&amp;lt;String, String&amp;gt; user3 = new HashMap&amp;lt;String, String&amp;gt;();
    user3.put(&amp;quot;firstname&amp;quot;, &amp;quot;Sergey&amp;quot;);
    user3.put(&amp;quot;lastname&amp;quot;, &amp;quot;Avseyev&amp;quot;);

    // Encode and store them
    cb.set(&amp;quot;user:michael&amp;quot;, msgpack.write(user1)).get();
    cb.set(&amp;quot;user:matt&amp;quot;, msgpack.write(user2)).get();
    cb.set(&amp;quot;user:sergey&amp;quot;, msgpack.write(user3)).get();

    // Close the Connection
    cb.shutdown();
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The only new part to Couchbase folks is the &amp;ldquo;MessagePack&amp;rdquo; code. You create a new instance of &lt;code&gt;MessagePack&lt;/code&gt; and then pass the data to the &lt;code&gt;write&lt;/code&gt; method. I&amp;rsquo;m not an expert on this library, but it looks like you can also make it work with generic POJOs, which would be something to look into if you model an actual application with it.&lt;/p&gt;

&lt;h2 id=&#34;querying-the-data&#34;&gt;Querying the Data&lt;/h2&gt;

&lt;p&gt;Now if we run the code, we&amp;rsquo;ll see that three documents have been persisted, but they show up as binary. That&amp;rsquo;s because its not JSON and kind of expected. Now, go create a View on your bucket and start out with an empty map function like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function(doc, meta) {
  emit(doc, null);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you query it, you&amp;rsquo;ll see the document keys emitted like &lt;code&gt;gqhsYXN0bmFtZadBdnNleWV2qWZpcnN0bmFtZaZTZXJnZXk&lt;/code&gt;, which is &lt;a href=&#34;http://en.wikipedia.org/wiki/Base64&#34;&gt;Base64&lt;/a&gt; encoding. Now, let&amp;rsquo;s change the view function a bit and use the built-in &lt;code&gt;decodeBase64&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function(doc, meta) {
  emit(decodeBase64(doc), null);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now your output looks more like &lt;code&gt;[130,168,108,97,115,116,110,97,109,...121]&lt;/code&gt;, which is the native format of MessagePack! You would also see the same output if you take the result of &lt;code&gt;msgpack.write()&lt;/code&gt; and print out the byte array properly.&lt;/p&gt;

&lt;p&gt;The first step is done, we have direct access to the stored data. Now we need to decode it. The good news is that there is a JavaScript library for MessagePack, but it doesn&amp;rsquo;t work out of the box with our view code. The library does lots of browser stuff which we don&amp;rsquo;t have in the environment. &lt;a href=&#34;https://raw.github.com/msgpack/msgpack-javascript/master/msgpack.js&#34;&gt;here&lt;/a&gt; is the link to the original library.&lt;/p&gt;

&lt;p&gt;Now, after some fiddling with the code and removing unneeded parts (but actually not changing how it works), I ended up with something that works. You can go ahead and grab the full snippet &lt;a href=&#34;https://gist.github.com/daschl/5796263&#34;&gt;here&lt;/a&gt;. Personally, I prefer to have my map functions short and sweet, so here is the same code, but &lt;a href=&#34;https://gist.github.com/daschl/5796268&#34;&gt;minified&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, we can plug this code into our map function and use the method to decode our data on the fly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function(doc, meta) {
    /*!{id:msgpack.js,ver:1.05,license:&amp;quot;MIT&amp;quot;,author:&amp;quot;uupaa.js@gmail.com&amp;quot;}*/
    /* Modified by @daschl and @avsej to strip out whats not needed */
    var msgunpack=function(){function k(){var g,d,e,b=0,f,h,c=m;d=c[++a];if(224&amp;lt;=d)return d-256;if(192&amp;gt;d){if(128&amp;gt;d)return d;144&amp;gt;d?(b=d-128,d=128):160&amp;gt;d?(b=d-144,d=144):(b=d-160,d=160)}switch(d){case 192:return null;case 194:return!1;case 195:return!0;case 202:return b=16777216*c[++a]+(c[++a]&amp;lt;&amp;lt;16)+(c[++a]&amp;lt;&amp;lt;8)+c[++a],f=b&amp;gt;&amp;gt;23&amp;amp;255,h=b&amp;amp;8388607,!b||2147483648===b?0:255===f?h?NaN:Infinity:(b&amp;amp;2147483648?-1:1)*(h|8388608)*Math.pow(2,f-127-23);case 203:b=16777216*c[++a]+(c[++a]&amp;lt;&amp;lt;16)+(c[++a]&amp;lt;&amp;lt;8)+c[++a];d=b&amp;amp;2147483648;
    f=b&amp;gt;&amp;gt;20&amp;amp;2047;h=b&amp;amp;1048575;if(!b||2147483648===b)return a+=4,0;if(2047===f)return a+=4,h?NaN:Infinity;b=16777216*c[++a]+(c[++a]&amp;lt;&amp;lt;16)+(c[++a]&amp;lt;&amp;lt;8)+c[++a];return(d?-1:1)*((h|1048576)*Math.pow(2,f-1023-20)+b*Math.pow(2,f-1023-52));case 207:return b=16777216*c[++a]+(c[++a]&amp;lt;&amp;lt;16)+(c[++a]&amp;lt;&amp;lt;8)+c[++a],4294967296*b+16777216*c[++a]+(c[++a]&amp;lt;&amp;lt;16)+(c[++a]&amp;lt;&amp;lt;8)+c[++a];case 206:b+=16777216*c[++a]+(c[++a]&amp;lt;&amp;lt;16);case 205:b+=c[++a]&amp;lt;&amp;lt;8;case 204:return b+c[++a];case 211:return b=c[++a],b&amp;amp;128?-1*(72057594037927936*(b^255)+
    281474976710656*(c[++a]^255)+1099511627776*(c[++a]^255)+4294967296*(c[++a]^255)+16777216*(c[++a]^255)+65536*(c[++a]^255)+256*(c[++a]^255)+(c[++a]^255)+1):72057594037927936*b+281474976710656*c[++a]+1099511627776*c[++a]+4294967296*c[++a]+16777216*c[++a]+65536*c[++a]+256*c[++a]+c[++a];case 210:return b=16777216*c[++a]+(c[++a]&amp;lt;&amp;lt;16)+(c[++a]&amp;lt;&amp;lt;8)+c[++a],2147483648&amp;gt;b?b:b-4294967296;case 209:return b=(c[++a]&amp;lt;&amp;lt;8)+c[++a],32768&amp;gt;b?b:b-65536;case 208:return b=c[++a],128&amp;gt;b?b:b-256;case 219:b+=16777216*c[++a]+(c[++a]&amp;lt;&amp;lt;
    16);case 218:b+=(c[++a]&amp;lt;&amp;lt;8)+c[++a];case 160:f=[];d=a;for(g=d+b;d&amp;lt;g;)e=c[++d],f.push(128&amp;gt;e?e:224&amp;gt;e?(e&amp;amp;31)&amp;lt;&amp;lt;6|c[++d]&amp;amp;63:(e&amp;amp;15)&amp;lt;&amp;lt;12|(c[++d]&amp;amp;63)&amp;lt;&amp;lt;6|c[++d]&amp;amp;63);a=d;return 10240&amp;gt;f.length?l.apply(null,f):n(f);case 223:b+=16777216*c[++a]+(c[++a]&amp;lt;&amp;lt;16);case 222:b+=(c[++a]&amp;lt;&amp;lt;8)+c[++a];case 128:for(h={};b--;){g=c[++a]-160;f=[];d=a;for(g=d+g;d&amp;lt;g;)e=c[++d],f.push(128&amp;gt;e?e:224&amp;gt;e?(e&amp;amp;31)&amp;lt;&amp;lt;6|c[++d]&amp;amp;63:(e&amp;amp;15)&amp;lt;&amp;lt;12|(c[++d]&amp;amp;63)&amp;lt;&amp;lt;6|c[++d]&amp;amp;63);a=d;h[l.apply(null,f)]=k()}return h;case 221:b+=16777216*c[++a]+(c[++a]&amp;lt;&amp;lt;16);case 220:b+=
    (c[++a]&amp;lt;&amp;lt;8)+c[++a];case 144:for(f=[];b--;)f.push(k());return f}}function n(a){try{return l.apply(this,a)}catch(d){}for(var e=[],b=0,f=a.length,h=p;b&amp;lt;f;++b)e[b]=h[a[b]];return e.join(&amp;quot;&amp;quot;)}var j={},p={},m=[],a=0,l=String.fromCharCode;return function(g){var d;if(&amp;quot;string&amp;quot;===typeof g){d=[];var e=g.split(&amp;quot;&amp;quot;),b=-1,f;f=e.length;for(g=f%8;g--;)++b,d[b]=j[e[b]];for(g=f&amp;gt;&amp;gt;3;g--;)d.push(j[e[++b]],j[e[++b]],j[e[++b]],j[e[++b]],j[e[++b]],j[e[++b]],j[e[++b]],j[e[++b]])}else d=g;m=d;a=-1;return k()}}();

    var obj = msgunpack(decodeBase64(doc));
    if(obj.firstname) {
        emit(obj.firstname, null);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This map function decodes our MessagePack data and just emits the value with key &amp;ldquo;firstname&amp;rdquo;. Once you query this view, you&amp;rsquo;ll see stuff like this emitted:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    total_rows: 3,
    rows: [{
        id: &amp;quot;user:matt&amp;quot;,
        key: &amp;quot;Matt&amp;quot;,
        value: null
    },{
        id: &amp;quot;user:michael&amp;quot;,
        key: &amp;quot;Michael&amp;quot;,
        value: null
    },{
        id: &amp;quot;user:sergey&amp;quot;,
        key: &amp;quot;Sergey&amp;quot;,
        value: null
    }]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Isn&amp;rsquo;t that lovely? We can now query this view from our Java SDK and use the MessagePack decoding facilities to retrieve the full documents as needed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Query View
View view = cb.getView(&amp;quot;designname&amp;quot;, &amp;quot;viewname&amp;quot;);
ViewResponse response = cb.query(view, new Query().setIncludeDocs(true));

// Iterate and load full documents
for (ViewRow row : response) {
  System.out.println(msgpack.read((byte[]) row.getDocument()));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On the console, you&amp;rsquo;ll see the full document content:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{&amp;quot;lastname&amp;quot;:&amp;quot;Ingenthron&amp;quot;,&amp;quot;firstname&amp;quot;:&amp;quot;Matt&amp;quot;}
{&amp;quot;lastname&amp;quot;:&amp;quot;Nitschinger&amp;quot;,&amp;quot;firstname&amp;quot;:&amp;quot;Michael&amp;quot;}
{&amp;quot;lastname&amp;quot;:&amp;quot;Avseyev&amp;quot;,&amp;quot;firstname&amp;quot;:&amp;quot;Sergey&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, feel free to use all the well-known query mechanisms for Views.&lt;/p&gt;

&lt;h2 id=&#34;benefits-anyone&#34;&gt;Benefits, anyone?&lt;/h2&gt;

&lt;p&gt;Now one could argue that this is nice to play around with, but what do I actually gain from it? Arguably, there is more work included for the developer, and maybe for the Server side as well.&lt;/p&gt;

&lt;p&gt;MessagePack makes bold claims that its faster and smaller than JSON, so lets try to verify this in our environment.&lt;/p&gt;

&lt;p&gt;To verify the size argument, let&amp;rsquo;s go ahead and create 1M docs with a &amp;ldquo;reasonable&amp;rdquo; size and store them both through JSON and MessagePack. Since the overhead for each document is static inside Couchbase Server, we can very easily see how much RAM is used to hold the documents and conclude on the size difference (which is what matters at the end).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int numdocs = 1000000;
HashMap&amp;lt;String, Object&amp;gt; user = new HashMap&amp;lt;String, Object&amp;gt;();
user.put(&amp;quot;firstname&amp;quot;, &amp;quot;Michael&amp;quot;);
user.put(&amp;quot;lastname&amp;quot;, &amp;quot;Nitschinger&amp;quot;);
user.put(&amp;quot;age&amp;quot;, 25);
user.put(&amp;quot;loggedIn&amp;quot;, false);
user.put(&amp;quot;active&amp;quot;, true);

for (int i = 0; i &amp;lt; numdocs; i++) {
  cb.set(&amp;quot;user:&amp;quot; + i, msgpack.write(user)).get();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For 1M documents on my machine with Couchbase Server 2.0, the amount of RAM used is 166MB. Now, let&amp;rsquo;s do the same with JSON. I&amp;rsquo;m going to use &lt;a href=&#34;https://code.google.com/p/google-gson/&#34;&gt;Google GSON&lt;/a&gt; to convert the HashMap:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int numdocs = 1000000;
HashMap&amp;lt;String, Object&amp;gt; user = new HashMap&amp;lt;String, Object&amp;gt;();
user.put(&amp;quot;firstname&amp;quot;, &amp;quot;Michael&amp;quot;);
user.put(&amp;quot;lastname&amp;quot;, &amp;quot;Nitschinger&amp;quot;);
user.put(&amp;quot;age&amp;quot;, 25);
user.put(&amp;quot;loggedIn&amp;quot;, false);
user.put(&amp;quot;active&amp;quot;, true);

for (int i = 0; i &amp;lt; numdocs; i++) {
  cb.set(&amp;quot;user:&amp;quot; + i, gson.toJson(user)).get();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After inserting those 1M JSON records, Couchbase Server reported exactly 198MB of RAM used! So the difference is 32MB (1/5th of the total data size), or 32 byte per document. That pays off if you have lots of records in your cluster! After doubling the content of the HashMap and storing twice as many documents (2M) MessagePack is ahead of raw JSON by around 96MB. That&amp;rsquo;s another 400K documents you could store (one document is around 230 bytes compared to 285 with raw JSON).&lt;/p&gt;

&lt;p&gt;Of course, YMMV depending on the number and size of the documents. I&amp;rsquo;m curious if you could do the same runs on your real workload and see by how much you could improve.&lt;/p&gt;

&lt;p&gt;Now, before we talk about RAW encoding/decoding performance, we also need to look into the overhead involved on the server side. Storing and retreiving documents is not slower than any other document, because the server doesn&amp;rsquo;t need to do anything special. The only overhead I can think of is that during index creation, more CPU will be consumed because you execute more JavaScript logic. I guess this CPU overhead increases with the document sizes, but I don&amp;rsquo;t have any actual numbers to share here. Personally, I&amp;rsquo;d use the [sizing]() guidelines for Views and maybe add some more CPU just to be safe. It&amp;rsquo;s important to note that at query time, you won&amp;rsquo;t see a difference between JSON and MessagePack, because the index is already created.&lt;/p&gt;

&lt;p&gt;Congratulations if you followed to this point! As a bonus, we&amp;rsquo;ll look into the raw encoding/decoding performance of JSON and MessagePack on the JVM. Since there are lots of JSON libraries out there, we&amp;rsquo;re going to use &lt;a href=&#34;http://jackson.codehaus.org/&#34;&gt;Jackson&lt;/a&gt; and Google GSON. Benchmarking on the JVM is not a trivial task, so I&amp;rsquo;ll do my best to keep it objective and we&amp;rsquo;re going to use &lt;a href=&#34;https://code.google.com/p/caliper/&#34;&gt;Google Caliper&lt;/a&gt; to handle things like JVM warmup. Make sure to add everything to your &lt;code&gt;pom.xml&lt;/code&gt; like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.msgpack&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;msgpack&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;0.6.7&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;com.google.code.gson&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;gson&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.2.4&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;com.google.caliper&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;caliper&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0-beta-1&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;com.google.code.java-allocation-instrumenter&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;java-allocation-instrumenter&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.1&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;com.fasterxml.jackson.core&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;jackson-databind&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.2.2&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this simple benchmark, we are only testing smaller and slightly larger &lt;code&gt;HashMap&lt;/code&gt;s. I know that this test is not conclusive, but it should give you a starting point from where you can do your own research.&lt;/p&gt;

&lt;p&gt;To write a Caliper benchmark, you need to extend the &lt;code&gt;Benchmark&lt;/code&gt; class from the caliper package. its as simple as this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class EncodingBenchmark extends Benchmark {

  private final Gson gson = new Gson();
  private final MessagePack msgpack = new MessagePack();
  private final ObjectMapper mapper = new ObjectMapper();

  private HashMap&amp;lt;String, Object&amp;gt; smallMap;
  private HashMap&amp;lt;String, Object&amp;gt; largeMap;

  @Override
  protected void setUp() {
    smallMap = new HashMap&amp;lt;String, Object&amp;gt;();
    smallMap.put(&amp;quot;firstname&amp;quot;, &amp;quot;Foo&amp;quot;);
    smallMap.put(&amp;quot;lastname&amp;quot;, &amp;quot;bar&amp;quot;);
    smallMap.put(&amp;quot;active&amp;quot;, false);

    largeMap = new HashMap&amp;lt;String, Object&amp;gt;();
    largeMap.put(&amp;quot;firstname&amp;quot;, &amp;quot;Foo&amp;quot;);
    largeMap.put(&amp;quot;lastname&amp;quot;, &amp;quot;bar&amp;quot;);
    largeMap.put(&amp;quot;active&amp;quot;, false);
    largeMap.put(&amp;quot;firstname1&amp;quot;, &amp;quot;Foo&amp;quot;);
    largeMap.put(&amp;quot;lastname1&amp;quot;, &amp;quot;bar&amp;quot;);
    largeMap.put(&amp;quot;active1&amp;quot;, false);
    largeMap.put(&amp;quot;firstname2&amp;quot;, &amp;quot;Foo&amp;quot;);
    largeMap.put(&amp;quot;lastname2&amp;quot;, &amp;quot;bar&amp;quot;);
    largeMap.put(&amp;quot;active2&amp;quot;, false);
    largeMap.put(&amp;quot;firstname3&amp;quot;, &amp;quot;Foo&amp;quot;);
    largeMap.put(&amp;quot;lastname3&amp;quot;, &amp;quot;bar&amp;quot;);
    largeMap.put(&amp;quot;active3&amp;quot;, false);
  }

  public void timeMessagePackSmall(final int reps) throws Exception {
    for (int i = 0; i &amp;lt; reps; i++) {
      msgpack.write(smallMap);
    }
  }

  public void timeGoogleGsonSmall(int reps) throws Exception {
    for (int i = 0; i &amp;lt; reps; i++) {
      gson.toJson(smallMap);
    }
  }

  public void timeJacksonSmall(int reps) throws Exception {
    for (int i = 0; i &amp;lt; reps; i++) {
      mapper.writeValueAsString(smallMap);
    }
  }
  public void timeJsonSmartSmall(int reps) throws Exception {
    for (int i = 0; i &amp;lt; reps; i++) {
      mapper.writeValueAsString(smallMap);
    }
  }

  public void timeMessagePackLarge(final int reps) throws Exception {
    for (int i = 0; i &amp;lt; reps; i++) {
      msgpack.write(largeMap);
    }
  }

  public void timeGoogleGsonLarge(int reps) throws Exception {
    for (int i = 0; i &amp;lt; reps; i++) {
      gson.toJson(largeMap);
    }
  }

  public void timeJacksonLarge(int reps) throws Exception {
    for (int i = 0; i &amp;lt; reps; i++) {
      mapper.writeValueAsString(largeMap);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First, we create our converter instances (for MessagePack, GSON and Jackson) and the HashMaps. All the runs in this benchmark are executed by Caliper. We need to modify our &lt;code&gt;main&lt;/code&gt; class to load the wrapper:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import business.MsgpackBenchmark;
import com.google.caliper.runner.CaliperMain;

public class Main {
  public static void main(String[] args) throws Exception {
    CaliperMain.main(EncodingBenchmark.class, args);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now if you run this in your IDE, you&amp;rsquo;ll see some logging going on:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Experiment selection: 
  Instruments:   [allocation, micro]
  User parameters:   {}
  Virtual machines:  [default]
  Selection type:    Full cartesian product

This selection yields 12 experiments.
Starting experiment 1 of 12: {instrument=allocation, method=GoogleGsonLarge, vm=default, parameters={}}
Complete!
Starting experiment 2 of 12: {instrument=allocation, method=GoogleGsonSmall, vm=default, parameters={}}
Complete!
Starting experiment 3 of 12: {instrument=allocation, method=JacksonLarge, vm=default, parameters={}}
Complete!
Starting experiment 4 of 12: {instrument=allocation, method=JacksonSmall, vm=default, parameters={}}
Complete!
...
Starting experiment 11 of 12: {instrument=micro, method=MessagePackLarge, vm=default, parameters={}}
Complete!
Starting experiment 12 of 12: {instrument=micro, method=MessagePackSmall, vm=default, parameters={}}
Complete!

Execution complete: 7.058m.
Collected 162 measurements from:
  2 instrument(s)
  1 virtual machine(s)
  6 benchmark(s)
Results have been uploaded. View them at: https://microbenchmarks.appspot.com/runs/f25820e0-08dd-43f8-833e-e44847400f19
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once finished, Caliper even uploaded your results to a webpage (so make sure to have internet connection)! Note that if you see &amp;ldquo;GC errors&amp;rdquo; during your runs, it may be good to retry and if they still persist, consider increasing your heap size a bit. I don&amp;rsquo;t know for how long the data is held on the web page, but &lt;a href=&#34;https://microbenchmarks.appspot.com/runs/f25820e0-08dd-43f8-833e-e44847400f19#r:scenario.benchmarkSpec.methodName&#34;&gt;here&lt;/a&gt; are my results.&lt;/p&gt;

&lt;p&gt;At least in my benchmarks I found that libraries like Jackson outperform MessagePack by a large amount when encoding &lt;code&gt;HashMap&lt;/code&gt;s. Maybe it&amp;rsquo;s different with other data types and sizes though.&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;I hope this blog post was a fun introduction and showed what&amp;rsquo;s possible with Couchbase Server 2.0 and its new View engine. I found that MessagePack really saves you a good amount of bytes on the wire (and on the server), but is much slower on the JVM when it comes to encoding data (here &lt;code&gt;HashMap&lt;/code&gt;s).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Couchbase Cluster in Minutes with Vagrant and Puppet</title>
      <link>http://nitschinger.at/A-Couchbase-Cluster-in-Minutes-with-Vagrant-and-Puppet/</link>
      <pubDate>Mon, 27 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://nitschinger.at/A-Couchbase-Cluster-in-Minutes-with-Vagrant-and-Puppet/</guid>
      <description>

&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;Since I work as part of the engineering team at Couchbase, I need to run my code against a variety of server deployments. We run a multitude of operating systems and software versions, and so do our customers. In order to fix bugs reliably and build new features, it is critical to get a cluster up and running that resembles these deployments as good as possible. I know that I can run all of these combinations on EC2, but the cost for this would be very high and most of the time its overkill.&lt;/p&gt;

&lt;p&gt;What I need is to get such a cluster up and running in minutes and not spending too much time on configuring it. I heard about &lt;a href=&#34;http://www.vagrantup.com/&#34;&gt;Vagrant&lt;/a&gt; and &lt;a href=&#34;https://puppetlabs.com/&#34;&gt;Puppet&lt;/a&gt; in the past, but never got around to use them on my own box (though I always use &lt;a href=&#34;https://www.virtualbox.org/&#34;&gt;VirtualBox&lt;/a&gt; on MacOS to create virtual machines by hand).&lt;/p&gt;

&lt;p&gt;This morning I sat down to take a closer look on how these tools can help me to get more productive - and to my huge surprise I got a 4 node Couchbase Server cluster running in less than 30 minutes (with looking up all the configuration details). Since its so easy, I want to share it with you.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;Before we can provision our nodes, you need to make sure to have Vagrant and VirtualBox installed. If you use MacOS like me, just download the &lt;code&gt;.dmg&lt;/code&gt; files for both and you&amp;rsquo;re set. Now, create a directory somewhere to store the configuration files - I called mine &amp;lsquo;vagrants&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;In this directory, you need to create a &lt;code&gt;Vagrantfile&lt;/code&gt;. Its like the Vagrants &lt;code&gt;makefile&lt;/code&gt; and it will pick it up to learn how you want to have your nodes provisioned. Note that this doesn&amp;rsquo;t configure the software on top of the OS (like installing Couchbase), this is handled by puppet in a separate step. Here is the full config:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Vagrant.configure(&amp;quot;2&amp;quot;) do |config|

    # Number of nodes to provision
    numNodes = 4

    # IP Address Base for private network
    ipAddrPrefix = &amp;quot;192.168.56.10&amp;quot;

    # Define Number of RAM for each node
    config.vm.provider &amp;quot;virtualbox&amp;quot; do |v|
        v.customize [&amp;quot;modifyvm&amp;quot;, :id, &amp;quot;--memory&amp;quot;, 1024]
    end

    # Provision the server itself with puppet
    config.vm.provision :puppet

    # Download the initial box from this url
    config.vm.box_url = &amp;quot;http://files.vagrantup.com/precise64.box&amp;quot;

    # Provision Config for each of the nodes
    1.upto(numNodes) do |num|
        nodeName = (&amp;quot;node&amp;quot; + num.to_s).to_sym
        config.vm.define nodeName do |node|
            node.vm.box = &amp;quot;precise64&amp;quot;
            node.vm.network :private_network, ip: ipAddrPrefix + num.to_s
            node.vm.provider &amp;quot;virtualbox&amp;quot; do |v|
                v.name = &amp;quot;Couchbase Server Node &amp;quot; + num.to_s
            end
        end
    end

end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This file is just ruby code that configures Vagrant. Let&amp;rsquo;s go through each directive and see what it does for us.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Number of nodes to provision
numNodes = 4

# IP Address Base for private network
ipAddrPrefix = &amp;quot;192.168.56.10&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can change these values, I just created them to fit my environment here. Depending on the amount of &lt;code&gt;numNodes&lt;/code&gt; set, VMs will be created. I added a loop down below depending on this setting, so I don&amp;rsquo;t have to duplicate code a lot. The ip address prefix is used to easily determine the (static) IP address for the server. The numbers will be counted upwards incrementally, so you will end up with four servers accessible through &lt;code&gt;192.168.56.101&lt;/code&gt; to &lt;code&gt;192.168.56.104&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Define Number of RAM for each node
config.vm.provider &amp;quot;virtualbox&amp;quot; do |v|
    v.customize [&amp;quot;modifyvm&amp;quot;, :id, &amp;quot;--memory&amp;quot;, 1024]
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This config block is needed to increase the memory size of the VM. By default its less than that (I believe around 512MB), and I want to have 1 gig of RAM for each. Of course, feel free to tune that value or remove it completely.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Provision the server itself with puppet
config.vm.provision :puppet
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because we&amp;rsquo;ll be using puppet to provision the server software, we need to tell Vagrant to use it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Download the initial box from this url
config.vm.box_url = &amp;quot;http://files.vagrantup.com/precise64.box&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vagrant reuses predefined images so you don&amp;rsquo;t have to reinstall everything from scratch. Here we use a predefined Ubuntu 12.04 64bit box.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Provision Config for each of the nodes
1.upto(numNodes) do |num|
    nodeName = (&amp;quot;node&amp;quot; + num.to_s).to_sym
    config.vm.define nodeName do |node|
        node.vm.box = &amp;quot;precise64&amp;quot;
        node.vm.network :private_network, ip: ipAddrPrefix + num.to_s
        node.vm.provider &amp;quot;virtualbox&amp;quot; do |v|
            v.name = &amp;quot;Couchbase Server Node &amp;quot; + num.to_s
        end
    end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code block configures each virtual machine. Given the number of nodes we want to create, for each of them it assigns an IP address and gives it a descriptive name inside Virtualbox. If you want to add server-dependent settings, the &amp;ldquo;node&amp;rdquo; block is the right place for it. Otherwise it will pick the cluster wide settings defined in the &amp;ldquo;config&amp;rdquo; block.&lt;/p&gt;

&lt;p&gt;Now if we would run &lt;code&gt;vagrant up&lt;/code&gt; from the command line in this directory, we&amp;rsquo;d get four Ubuntu machines setup where we could SSH into, but nothing else would be installed. In order to make them do something, we want to install Couchbase Server. Puppet is a system automation software and very good at provisioning systems. Vagrant has amazing support for it, all we need to is create a &lt;code&gt;default.pp&lt;/code&gt; file inside a &lt;code&gt;manifests&lt;/code&gt; directory that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;exec { &amp;quot;couchbase-server-source&amp;quot;: 
    command =&amp;gt; &amp;quot;/usr/bin/wget http://packages.couchbase.com/releases/2.0.1/couchbase-server-enterprise_x86_64_2.0.1.deb&amp;quot;,
    cwd =&amp;gt; &amp;quot;/home/vagrant/&amp;quot;,
    creates =&amp;gt; &amp;quot;/home/vagrant/couchbase-server-enterprise_x86_64_2.0.1.deb&amp;quot;,
    before =&amp;gt; Package[&#39;couchbase-server&#39;]
}

exec { &amp;quot;install-deps&amp;quot;:
    command =&amp;gt; &amp;quot;/usr/bin/apt-get install libssl0.9.8&amp;quot;,
    before =&amp;gt; Package[&#39;couchbase-server&#39;]
}

package { &amp;quot;couchbase-server&amp;quot;:
    provider =&amp;gt; dpkg,
    ensure =&amp;gt; installed,
    source =&amp;gt; &amp;quot;/home/vagrant/couchbase-server-enterprise_x86_64_2.0.1.deb&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s go over the internals once more.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;exec { &amp;quot;couchbase-server-source&amp;quot;: 
    command =&amp;gt; &amp;quot;/usr/bin/wget http://packages.couchbase.com/releases/2.0.1/couchbase-server-enterprise_x86_64_2.0.1.deb&amp;quot;,
    cwd =&amp;gt; &amp;quot;/home/vagrant/&amp;quot;,
    creates =&amp;gt; &amp;quot;/home/vagrant/couchbase-server-enterprise_x86_64_2.0.1.deb&amp;quot;,
    before =&amp;gt; Package[&#39;couchbase-server&#39;]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In puppet, we define some tasks that we want to run. This task executes a shell command &lt;code&gt;wget&lt;/code&gt; and stores the file inside the home directory of the user. We tell puppet to download the debian package of the server. Note that there is a &lt;code&gt;before&lt;/code&gt; dependency to the package installation task, because we can&amp;rsquo;t install it before the file wasn&amp;rsquo;t downloaded.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;exec { &amp;quot;install-deps&amp;quot;:
    command =&amp;gt; &amp;quot;/usr/bin/apt-get install libssl0.9.8&amp;quot;,
    before =&amp;gt; Package[&#39;couchbase-server&#39;]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also need to install &lt;code&gt;libssl0.9.8&lt;/code&gt; on the server, this is the only dependency it has. We use the command line tool &lt;code&gt;apt-get&lt;/code&gt; for this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package { &amp;quot;couchbase-server&amp;quot;:
    provider =&amp;gt; dpkg,
    ensure =&amp;gt; installed,
    source =&amp;gt; &amp;quot;/home/vagrant/couchbase-server-enterprise_x86_64_2.0.1.deb&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we can install the debian package from couchbase-server, because the file is in place and all dependencies are satisfied.&lt;/p&gt;

&lt;p&gt;Of course, this puppet file is very simple and I&amp;rsquo;m you can do much more with it (and maybe even simplify it more) - but for my needs it is more than enough. If I want a different server version, I just need to change the puppet file and point it to the new debian package.&lt;/p&gt;

&lt;p&gt;Now if we run &lt;code&gt;vagrant up&lt;/code&gt; again, much more happens. Note that if you want to play with your puppet files, you can also use &lt;code&gt;vagrant provision&lt;/code&gt; to apply the changes while the node is running.&lt;/p&gt;

&lt;p&gt;If everything is okay, the output should look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Bringing machine &#39;node1&#39; up with &#39;virtualbox&#39; provider...
Bringing machine &#39;node2&#39; up with &#39;virtualbox&#39; provider...
Bringing machine &#39;node3&#39; up with &#39;virtualbox&#39; provider...
Bringing machine &#39;node4&#39; up with &#39;virtualbox&#39; provider...
[node1] Clearing any previously set forwarded ports...
[node1] Creating shared folders metadata...
[node1] Clearing any previously set network interfaces...
[node1] Preparing network interfaces based on configuration...
[node1] Forwarding ports...
[node1] -- 22 =&amp;gt; 2222 (adapter 1)
[node1] Running any VM customizations...
[node1] Booting VM...
[node1] Waiting for VM to boot. This can take a few minutes.
[node1] VM booted and ready for use!
[node1] Configuring and enabling network interfaces...
[node1] Mounting shared folders...
[node1] -- /vagrant
[node1] -- /tmp/vagrant-puppet/manifests
[node1] Running provisioner: puppet...
Running Puppet with default.pp...
stdin: is not a tty
notice: /Stage[main]//Exec[install-deps]/returns: executed successfully
notice: Finished catalog run in 0.77 seconds
.... more for all the other nodes.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can then point your browser to &lt;code&gt;192.168.56.10[1-4]&lt;/code&gt; and work with your Couchbase cluster. If you are done with it, you can use the &lt;code&gt;vagrant halt&lt;/code&gt; command to shut it down cleanly. Very handy is also &lt;code&gt;vagrant suspend&lt;/code&gt;, which will save the state of the nodes instead of shutting them down completely.&lt;/p&gt;

&lt;p&gt;If you want to interact with one of the nodes instead of the whole cluster, you can always specify the node identifier. For example, if you want to start only the first node you can do it with the &lt;code&gt;vagrant up node1&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;To me, this is a very fast and clean way to provision server nodes. I just need to change a few lines in a file and get a new cluster without much hassle. Even more important, I can put those config files in version control and &lt;a href=&#34;https://github.com/daschl/vagrants&#34;&gt;share them&lt;/a&gt; with other folks!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Logging with the Couchbase Java Client</title>
      <link>http://nitschinger.at/Logging-with-the-Couchbase-Java-Client/</link>
      <pubDate>Thu, 16 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://nitschinger.at/Logging-with-the-Couchbase-Java-Client/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;There is a huge variety in logging frameworks for Java, and its hard to please everyone. To understand how logging is currently handled in the SDK, we have to go back a few years. As you may know, the SDK depends on the &lt;a href=&#34;https://code.google.com/p/spymemcached/&#34;&gt;spymemcached&lt;/a&gt; library and therefore also inherits its logging mechanisms. Back in the days when &lt;a href=&#34;https://twitter.com/dlsspy&#34;&gt;@dustin&lt;/a&gt; wrote spy, there was no good abstraction for logging available (like SLF4J), so he wrote his own. Nowadays things have changed, but spy still inherits this legacy.&lt;/p&gt;

&lt;p&gt;At the time of writing, the SDK supports logging to a simple default logger (logs to STDERR from INFO level up), &lt;a href=&#34;http://logging.apache.org/log4j/1.2/&#34;&gt;Log4J&lt;/a&gt; and the SunLogger (java.util.logging). In the upcoming 2.9.0 release of spymemcached, it will also support the SLF4J logging facade where you can plug in your own implementation. The next version of the SDK (most likely 1.1.7) will depend on spy 2.9, so you&amp;rsquo;ll also get the benefits there.&lt;/p&gt;

&lt;p&gt;Before we dig into the concepts, here are the supported Log Levels (defined by &lt;code&gt;net.spy.memcached.compat.log.Level&lt;/code&gt;):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TRACE (with 2.9)&lt;/li&gt;
&lt;li&gt;DEBUG&lt;/li&gt;
&lt;li&gt;INFO&lt;/li&gt;
&lt;li&gt;WARN&lt;/li&gt;
&lt;li&gt;ERROR&lt;/li&gt;
&lt;li&gt;FATAL&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keep in mind that different loggers implement different levels, so for some of them a mapping needs top happen. This will be noted during the descriptions of each implementation.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll now look at the different logging mechanisms available and how you can configure them. SLF4J will be covered towards the end.&lt;/p&gt;

&lt;h2 id=&#34;switching-logging&#34;&gt;Switching Logging&lt;/h2&gt;

&lt;p&gt;If you don&amp;rsquo;t change anything, the default logger will be used. This mechanism just prints log messages to STDERR (from INFO level upwards). Chances are that you want to integrate the SDK with the same logging library that you use as well. The LoggerFactory inside spy decides at construction which one to choose, based on a system property. So you can either change this programmatically or through a param to the &lt;code&gt;java&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;If you want to use the Log4JLogger programmatically, do it this way (before initializing the &lt;code&gt;CouchbaseClient&lt;/code&gt; object):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Properties systemProperties = System.getProperties();
systemProperties.put(&amp;quot;net.spy.log.LoggerImpl&amp;quot;, &amp;quot;net.spy.memcached.compat.log.Log4JLogger&amp;quot;);
System.setProperties(systemProperties);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, you need to add the Log4J JAR to your CLASSPATH to make it work (as we&amp;rsquo;ll see later). Alternatively, you can set it this way on the comman dline:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;java -Dnet.spy.log.LoggerImpl=net.spy.memcached.compat.log.Log4JLogger ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we know how to enable the different implementations, let&amp;rsquo;s look at them in greater detail.&lt;/p&gt;

&lt;h2 id=&#34;the-simple-default-logger&#34;&gt;The Simple Default Logger&lt;/h2&gt;

&lt;p&gt;If you don&amp;rsquo;t change anything, the SDK will use the DefaultLogger (net.spy.memcached.compat.log.DefaultLogger). This logger has no dependencies and prints every log message that is INFO level or higher (INFO, WARN, ERROR and FATAL) to the systems STDERR. Since the STDERR is covered by most IDEs automatically, you&amp;rsquo;ll also see them in the console output window.&lt;/p&gt;

&lt;p&gt;Since its so simple, you can&amp;rsquo;t customize this behavior. Every log message gets timestamped as well (the format is &lt;code&gt;yyyy-MM-dd HH:mm:ss.SSS&lt;/code&gt;). Connecting to Couchbase commonly looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2013-05-07 12:28:41.852 INFO com.couchbase.client.CouchbaseConnection:  Added {QA sa=/127.0.0.1:11210, #Rops=0, #Wops=0, #iq=0, topRop=null, topWop=null, toWrite=0, interested=0} to connect queue
2013-05-07 12:28:41.862 INFO com.couchbase.client.CouchbaseConnection:  Connection state changed for sun.nio.ch.SelectionKeyImpl@3d9360e2
2013-05-07 12:28:41.887 INFO com.couchbase.client.ViewConnection:  Added localhost to connect queue
2013-05-07 12:28:41.888 INFO com.couchbase.client.CouchbaseClient:  viewmode property isn&#39;t defined. Setting viewmode to production mode
2013-05-07 12:28:41.986 INFO com.couchbase.client.CouchbaseConnection:  Shut down Couchbase client
2013-05-07 12:28:41.991 INFO com.couchbase.client.ViewConnection:  Node localhost has no ops in the queue
2013-05-07 12:28:41.992 INFO com.couchbase.client.ViewNode:  I/O reactor terminated for localhost
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So the format is always: &lt;code&gt;&amp;lt;timestamp&amp;gt; &amp;lt;level&amp;gt; &amp;lt;classname&amp;gt; &amp;lt;message&amp;gt;&lt;/code&gt;. Remeber that DEBUG messages or so will not be logged, so you won&amp;rsquo;t see them with the DefaultLogger.&lt;/p&gt;

&lt;h2 id=&#34;the-sunlogger-java-util-logging&#34;&gt;The SunLogger (java.util.logging)&lt;/h2&gt;

&lt;p&gt;The SunLogger also doesn&amp;rsquo;t introduce additional dependencies, since it depends on the &lt;code&gt;java.util.logging&lt;/code&gt; implementation. The &lt;code&gt;java.util.logging.Level&lt;/code&gt; enum defines the following levels: ALL, CONFIG, FINEST, FINER, FINE, INFO, WARNING, SEVERE and OFF. Since this does not map well to our defined Levels, here is the mapping that happens:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TRACE to FINEST (with 2.9)&lt;/li&gt;
&lt;li&gt;DEBUG to FINE&lt;/li&gt;
&lt;li&gt;INFO to INFO&lt;/li&gt;
&lt;li&gt;WARN to WARNING&lt;/li&gt;
&lt;li&gt;ERROR to SEVERE&lt;/li&gt;
&lt;li&gt;FATAL to SEVERE&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Without any further changes, the SunLogger also prints from INFO level upwards like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;May 7, 2013 12:42:16 PM com.couchbase.client.CouchbaseProperties setPropertyFile
INFO: Could not load properties file &amp;quot;cbclient.properties&amp;quot; because: File not found with system classloader.
May 7, 2013 12:42:16 PM net.spy.memcached.MemcachedConnection createConnections
INFO: Added {QA sa=/127.0.0.1:11210, #Rops=0, #Wops=0, #iq=0, topRop=null, topWop=null, toWrite=0, interested=0} to connect queue
May 7, 2013 12:42:16 PM net.spy.memcached.MemcachedConnection handleIO
INFO: Connection state changed for sun.nio.ch.SelectionKeyImpl@4ce2cb55
May 7, 2013 12:42:16 PM com.couchbase.client.ViewConnection createConnections
INFO: Added localhost to connect queue
May 7, 2013 12:42:16 PM com.couchbase.client.CouchbaseClient &amp;lt;init&amp;gt;
INFO: viewmode property isn&#39;t defined. Setting viewmode to production mode
May 7, 2013 12:42:16 PM com.couchbase.client.CouchbaseConnection run
INFO: Shut down Couchbase client
May 7, 2013 12:42:16 PM com.couchbase.client.ViewConnection shutdown
INFO: Node localhost has no ops in the queue
May 7, 2013 12:42:16 PM com.couchbase.client.ViewNode$1 run
INFO: I/O reactor terminated for localhost
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to change the log level to DEBUG and lower, you can do it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Logger.getLogger(&amp;quot;com.couchbase.client&amp;quot;).setLevel(Level.FINEST);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now there is one more thing you need to do if you want to print all debug messages to the console. You set the logging level correctly, but the &lt;code&gt;ConsoleHandler&lt;/code&gt; is not set to debug yet (so most likely you will pay the price for debug logging, but won&amp;rsquo;t actually see anything in your IDE).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for(Handler h : Logger.getLogger(&amp;quot;com.couchbase.client&amp;quot;).getParent().getHandlers()) {
    if(h instanceof ConsoleHandler) {
        h.setLevel(Level.FINEST);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, here is a full example on how to use the &lt;code&gt;SunLogger&lt;/code&gt; and get all Debug messages on the console.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Properties systemProperties = System.getProperties();
systemProperties.put(&amp;quot;net.spy.log.LoggerImpl&amp;quot;, &amp;quot;net.spy.memcached.compat.log.SunLogger&amp;quot;);
System.setProperties(systemProperties);

Logger logger = Logger.getLogger(&amp;quot;com.couchbase.client&amp;quot;);
logger.setLevel(Level.FINEST);
for(Handler h : logger.getParent().getHandlers()) {
    if(h instanceof ConsoleHandler){
        h.setLevel(Level.FINEST);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then just go ahead and create your &lt;code&gt;CouchbaseClient&lt;/code&gt; object, you will see detailed output like this (trimmed here):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;May 7, 2013 12:54:34 PM com.couchbase.client.vbucket.ReconfigurableObserver update
FINEST: Received an update, notifying reconfigurables about a com.couchbase.client.vbucket.config.Bucketcom.couchbase.client.vbucket.config.Bucket@3d77949
May 7, 2013 12:54:34 PM com.couchbase.client.vbucket.ReconfigurableObserver update
FINEST: Received an update, notifying reconfigurables about a com.couchbase.client.vbucket.config.Bucketcom.couchbase.client.vbucket.config.Bucket@4e927aef
May 7, 2013 12:54:34 PM com.couchbase.client.vbucket.ReconfigurableObserver update
FINEST: It says it is default and it&#39;s talking to /pools/default/bucketsStreaming/default?bucket_uuid=adfff22b70e09fafaa26ca37b7e05e9d
May 7, 2013 12:54:34 PM com.couchbase.client.vbucket.ReconfigurableObserver update
FINEST: It says it is default and it&#39;s talking to /pools/default/bucketsStreaming/default?bucket_uuid=adfff22b70e09fafaa26ca37b7e05e9d
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;log4j&#34;&gt;Log4J&lt;/h2&gt;

&lt;p&gt;Most people will need more flexibility, and Log4J was (and still is) standard in lots of applications. The SDK provides support for Log4J as well. To make it work, you first need to set the instance correctly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Properties systemProperties = System.getProperties();
systemProperties.put(&amp;quot;net.spy.log.LoggerImpl&amp;quot;, &amp;quot;net.spy.memcached.compat.log.Log4JLogger&amp;quot;);
System.setProperties(systemProperties);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now if you run this, you&amp;rsquo;ll get an error that some of the Log4J classes can not be found. This is not a surprise, because its not on the classpath. Let&amp;rsquo;s fix this by adding it accordingly. If you use maven, add the &lt;code&gt;log4j.log4j&lt;/code&gt; dependency (current version is 1.2.17). You can also just download the JAR and add it to the CLASSPATH as needed.&lt;/p&gt;

&lt;p&gt;Now if we run it again, we get another error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;log4j:WARN No appenders could be found for logger (com.couchbase.client.vbucket.ConfigurationProviderHTTP).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One way to fix this is to get a correct &lt;code&gt;log4j.xml&lt;/code&gt; configuration file into our CLASSPATH, but to make it work quickly Log4J provides a &lt;code&gt;BasicConfigurator&lt;/code&gt;. Right after the system property configurations, add this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;org.apache.log4j.BasicConfigurator.configure();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you run it with the code change applied, you will see that we get nicely printed log messages. You can also see that they show up straight from the DEBUG level (and even contain information from which thread they got logged):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;69 [main] INFO com.couchbase.client.CouchbaseConnection  - Added {QA sa=/127.0.0.1:11210, #Rops=0, #Wops=0, #iq=0, topRop=null, topWop=null, toWrite=0, interested=0} to connect queue
70 [main] DEBUG com.couchbase.client.vbucket.VBucketNodeLocator  - Updating nodesMap in VBucketNodeLocator.
73 [main] DEBUG com.couchbase.client.vbucket.VBucketNodeLocator  - Adding node with hostname 127.0.0.1:11210.
74 [main] DEBUG com.couchbase.client.vbucket.VBucketNodeLocator  - Node added is {QA sa=localhost/127.0.0.1:11210, #Rops=0, #Wops=0, #iq=0, topRop=null, topWop=null, toWrite=0, interested=8}.
74 [Memcached IO over {MemcachedConnection to localhost/127.0.0.1:11210}] DEBUG com.couchbase.client.CouchbaseConnection  - Done dealing with queue.
74 [Memcached IO over {MemcachedConnection to localhost/127.0.0.1:11210}] DEBUG com.couchbase.client.CouchbaseConnection  - Selecting with delay of 0ms
79 [Memcached IO over {MemcachedConnection to localhost/127.0.0.1:11210}] DEBUG com.couchbase.client.CouchbaseConnection  - Selected 1, selected 1 keys
79 [Memcached IO over
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can control the logging levels through the usual Log4J mechanisms. I won&amp;rsquo;t go into detail about them here, so please &lt;a href=&#34;http://logging.apache.org/log4j/1.2/manual.html&#34;&gt;check out&lt;/a&gt; their official documentation (for example on how to use the &lt;code&gt;PropertyConfigurator&lt;/code&gt; instead).&lt;/p&gt;

&lt;p&gt;Speaking of Log4J, &lt;a href=&#34;https://twitter.com/zooldk&#34;&gt;Steffen Larsen&lt;/a&gt; implemented a &lt;a href=&#34;https://github.com/zooldk/log4j-couchbase&#34;&gt;Log4J appender&lt;/a&gt; to store logs in Couchbase (instead of a file)!&lt;/p&gt;

&lt;h2 id=&#34;the-new-facade-slf4j&#34;&gt;The new Facade: SLF4J&lt;/h2&gt;

&lt;p&gt;Not binding the application to a specific logging library is always a good idea. SLF4J is a facade for various pluggable logging frameworks behind it. So you can choose the logging implementation during runtime, be it &lt;a href=&#34;http://logback.qos.ch/&#34;&gt;logback&lt;/a&gt;, Log4J or others. Since we already tried Log4J, let&amp;rsquo;s make SLF4J work with Logback, one of the other very common log frameworks out there.&lt;/p&gt;

&lt;p&gt;Note that SLF4J support will be available in the 1.9.0 release of spymemcached and therefore also in one of the next releases of the Couchbase Java SDK.&lt;/p&gt;

&lt;p&gt;First, we need to configure it accordingly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Properties systemProperties = System.getProperties();
systemProperties.put(&amp;quot;net.spy.log.LoggerImpl&amp;quot;, &amp;quot;net.spy.memcached.compat.log.SLF4JLogger&amp;quot;);
System.setProperties(systemProperties);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we need to include two JARs into our classpath. The first one is the SLF4J facade API and the other one is our logging framework of choice. The facade API package is called &lt;code&gt;slf4j-api&lt;/code&gt; (this package always needs to be in place) and since we want to use logback we need to include the &lt;code&gt;logback-classic&lt;/code&gt; JAR. Note that this is not specific to the SDK, you can find this information &lt;a href=&#34;http://logback.qos.ch/manual/introduction.html&#34;&gt;here&lt;/a&gt;. If you use maven, you can use this snippet:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;slf4j-api&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;1.7.5&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;ch.qos.logback&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;logback-classic&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;1.0.12&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SLF4J will automatically pick up our logback implementation, so the logs will look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;13:25:43.692 [main] INFO  c.c.client.CouchbaseConnection - Added {QA sa=/127.0.0.1:11210, #Rops=0, #Wops=0, #iq=0, topRop=null, topWop=null, toWrite=0, interested=0} to connect queue
13:25:43.694 [main] DEBUG c.c.c.vbucket.VBucketNodeLocator - Updating nodesMap in VBucketNodeLocator.
13:25:43.697 [main] DEBUG c.c.c.vbucket.VBucketNodeLocator - Adding node with hostname 127.0.0.1:11210.
13:25:43.697 [main] DEBUG c.c.c.vbucket.VBucketNodeLocator - Node added is {QA sa=localhost/127.0.0.1:11210, #Rops=0, #Wops=0, #iq=0, topRop=null, topWop=null, toWrite=0, interested=8}.
13:25:43.698 [Memcached IO over {MemcachedConnection to localhost/127.0.0.1:11210}] DEBUG c.c.client.CouchbaseConnection - Done dealing with queue.
13:25:43.699 [Memcached IO over {MemcachedConnection to localhost/127.0.0.1:11210}] DEBUG c.c.client.CouchbaseConnection - Selecting with delay of 0ms
13:25:43.702 [Memcached IO over {MemcachedConnection to localhost/127.0.0.1:11210}] DEBUG c.c.client.CouchbaseConnection - Selected 1, selected 1 keys
13:25:43.703 [Memcached IO over {MemcachedConnection to localhost/127.0.0.1:11210}] DEBUG c.c.client.CouchbaseConnection - Handling IO for:  sun.nio.ch.SelectionKeyImpl@48ff2413 (r=false, w=false, c=true, op={QA sa=localhost/127.0.0.1:11210, #Rops=0, #Wops=0, #iq=0, topRop=null, topWop=null, toWrite=0, interested=8})
13:25:43.703 [Memcached IO over {MemcachedConnection to localhost/127.0.0.1:11210}] INFO  c.c.client.CouchbaseConnection - Connection state changed for sun.nio.ch.SelectionKeyImpl@48ff2413
13:25:43.713
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, they also include DEBUG level logging here. If you don&amp;rsquo;t include the logging implementation during runtime, SLF4J will complain at startup:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SLF4J: Failed to load class &amp;quot;org.slf4j.impl.StaticLoggerBinder&amp;quot;.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to learn how to configure logback, &lt;a href=&#34;http://logback.qos.ch/manual/configuration.html&#34;&gt;look here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Once you know the abstraction in spymemcached and how it works, switching logging implementations is easy and straightforward. If you work with one of the Couchbase people to report errors, please try to include output with DEBUG turned on, because this includes lots of useful information that can be used to determine the failure sources.&lt;/p&gt;

&lt;p&gt;With the SLF4J facade added in the next spy release (2.9), you will be able to plug every large logging framework out there into the SDK. Let us know if you see a use case not covered with these mechanisms or if you have other comments on this.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Couchbase Java SDK Internals</title>
      <link>http://nitschinger.at/Couchbase-Java-SDK-Internals/</link>
      <pubDate>Wed, 17 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://nitschinger.at/Couchbase-Java-SDK-Internals/</guid>
      <description>

&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;This blog post is intended to be a very detailed and informative article for those who already have used the Couchbase Java SDK and want to know how the internals work. This is not a introduction on how to use the Java SDK and we&amp;rsquo;ll cover some fairly advanced topics on the way.&lt;/p&gt;

&lt;p&gt;Normally, when talking about the SDK we mean everything that is needed to get you going (Client library, documentation, release notes,&amp;hellip;). In this article though, the SDK refers to the Client library (code) unless stated otherwise.&lt;/p&gt;

&lt;p&gt;As always, if you have feedback please let me/us know!&lt;/p&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;First and foremost, it is important to understand that the SDK wraps and extends the functionality of the &lt;a href=&#34;https://github.com/couchbase/spymemcached&#34;&gt;spymemcached&lt;/a&gt; (called &amp;ldquo;spy&amp;rdquo;) memcached library. One of the protocols used internally is the memcached protocol, and a lot of functionality can be reused. On the other hand, once you start to peel off the first layers of the SDK you will notice that some components are somewhat more complex because of the fact that spy provides more features than the SDK needs in the first place. The other part is to remember that a lot of the components are interwoven, so you always need to get the dependency right. Most of the time, we release a new spy version at the same date with a new SDK, because new stuff has been added or fixed.&lt;/p&gt;

&lt;p&gt;So, aside from reusing the functionality provided by spy, the SDK mainly adds two blocks of functionality: automatic cluster topology management and since 1.1 (and 2.0 server) support for Views. Aside from that it also provides administrative facilities like bucket and design document management.&lt;/p&gt;

&lt;p&gt;To understand how the client operates, we&amp;rsquo;ll dissect the whole process in different life cycle phases of the client. After we go through all three phases (bootstrap, operation and shutdown) you should have a clear picture of whats going on under the hood. Note that there is a separate blog post in the making about error handling, so we won&amp;rsquo;t cover that here in greater detail (which will be published a few weeks later on the same blog here).&lt;/p&gt;

&lt;h2 id=&#34;phase-1-bootstrap&#34;&gt;Phase 1: Bootstrap&lt;/h2&gt;

&lt;p&gt;Before we can actually start serving operations like &lt;code&gt;get()&lt;/code&gt; and &lt;code&gt;set()&lt;/code&gt;, we need to bootstrap the &lt;code&gt;CouchbaseClient&lt;/code&gt; object. The important part that we need to accomplish here is to initially get a cluster configuration (which contains the nodes and vBucket map), but also to establish a streaming connection to receive cluster updates in (near) real-time.&lt;/p&gt;

&lt;p&gt;We take the list of nodes passing during bootstrap and iterate over it. The first node in the list that can be contacted on port 8091 is used to walk the RESTful interface on the server. If it is not available, the next one will be tried. This means that going from the provided &lt;code&gt;http://host:port/pools&lt;/code&gt; URI we eventually follow the links to the bucket entity. All this happens inside a &lt;code&gt;ConfigurationProvider&lt;/code&gt;, which is in this case the &lt;code&gt;com.couchbase.client.vbucket.ConfigurationProviderHTTP&lt;/code&gt;. If you want to poke around on the internals, look for &lt;code&gt;getBucketConfiguration&lt;/code&gt; and &lt;code&gt;readPools&lt;/code&gt; methods.&lt;/p&gt;

&lt;p&gt;A (successful) walk can be illustrated like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GET /pools&lt;/li&gt;
&lt;li&gt;look for the &amp;ldquo;default&amp;rdquo; pools&lt;/li&gt;
&lt;li&gt;GET /pools/default&lt;/li&gt;
&lt;li&gt;look for the &amp;ldquo;buckets&amp;rdquo; hash which contains the bucket list&lt;/li&gt;
&lt;li&gt;GET /pools/default/buckets&lt;/li&gt;
&lt;li&gt;parse the list of buckets and extract the one provided by the application&lt;/li&gt;
&lt;li&gt;GET /pools/default/buckets/&lt;bucketname&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we are at the REST endpoint we need. Inside this JSON response, you&amp;rsquo;ll find all useful details that gets also be used by SDK internally (for example &lt;code&gt;stre  amingUri&lt;/code&gt;, &lt;code&gt;nodes&lt;/code&gt; and &lt;code&gt;vBucketServerMap&lt;/code&gt;). The config gets parsed and stored. Before we move on, let&amp;rsquo;s quickly discuss the strange &lt;code&gt;pools&lt;/code&gt; part inside our REST walk:&lt;/p&gt;

&lt;p&gt;The concept of a resource pool to group buckets was designed for Couchbase Server, but is currently not implemented. Still, the REST API is implemented that way and therefore all SDKs support it. That said, while we could theoretically just go directly to &lt;code&gt;/pools/default/buckets&lt;/code&gt; and skip the first few queries, the current behaviour is future proof so you won&amp;rsquo;t have to change the bootstrap code once the server implements it.&lt;/p&gt;

&lt;p&gt;Back to our bootstrap phase. Now that we have a valid cluster config which contains all the nodes (and their hostnames or ip addresses), we can establish connections to them. Aside from establishing the data connections, we also need to instantiate a streaming connection to one of them. For simplicity reasons, we just establish the streaming connection to the node from the list where we got our initial configuration.&lt;/p&gt;

&lt;p&gt;This gets us to an important point to keep in mind: if you have lots of CouchbaseClient objects running on many nodes and they all get bootstrapped with the same list, they may end up connecting to the same node for the streaming connection and create a possible bottleneck. Therefore, to distribute the load a little better I recommend shuffling the array before it gets passed in to the CouchbaseClient object. When you only have a few CouchbaseClient objects connected to your cluster, that won&amp;rsquo;t be a problem at all.&lt;/p&gt;

&lt;p&gt;The streaming connection URI is taken from the config we got previously, and normally looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;streamingUri: &amp;quot;/pools/default/bucketsStreaming/default?bucket_uuid=88cae4a609eea500d8ad072fe71a7290&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you point your browser to this address, you will also get the cluster topology updates streamed in real-time. Since the streaming connection needs to be established all the time and potentially blocks a thread, this is done in the background handled by different threads. We are using the NIO framework &lt;a href=&#34;http://netty.io&#34;&gt;Netty&lt;/a&gt; for this task, which provides a very handy way of dealing with asynchronous operations. If you want to start digging into this part, keep in mind that all read operations are completely separate from write operations, so you need to deal with handlers that take care of what comes back from the server. Aside from some wiring needed for Netty, the business logic can be found in &lt;code&gt;com.couchbase.client.vbucket.BucketMonitor&lt;/code&gt; and &lt;code&gt;com.couchbase.client.vbucket.BucketUpdateResponseHandler&lt;/code&gt;. We also try to reestablish this streaming connection if the socket gets closed (for example if this node gets rebalanced out of the cluster).&lt;/p&gt;

&lt;p&gt;To actually shuffle data to the cluster nodes, we need to open various sockets to them. Note that there is absolutely no connection pooling needed inside the client, because we manage all sockets proactively. Aside from the special streaming connection to one of the severs (which is opened against port 8091), we need to open the following connections:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Memcached Socket: Port 11210&lt;/li&gt;
&lt;li&gt;View Socket: Port 8092&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that port 11211 is not used inside the client SDKs, but used to connect generic memcached clients that are not cluster aware. This means that these generic clients do not get updated cluster topologies.&lt;/p&gt;

&lt;p&gt;So as a rule of thumb, if you have a 10 node cluster running, one CouchbaseClient object open about 21 (2*10 + 1) client sockets. These are directly managed, so if a node gets removed or added the numbers will change accordingly.&lt;/p&gt;

&lt;p&gt;Now that all sockets have been opened, we are ready to perform regular cluster operations. As you can see, there is a lot of overhead involved when the CouchbaseClient object gets bootstrapped. Because of this fact, we strongly discourage you from either creating a new object on every request or running a lot of CouchbaseClient objects in one application server. This only adds unnecessary overhead and load on the application server and adds on the total sockets opened against the cluster (resulting in a possible performance problem).&lt;/p&gt;

&lt;p&gt;As a point of reference, with regular INFO level logging enabled this is how connecting and disconnecting to a 1-node cluster (Couchbase bucket) should look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Apr 17, 2013 3:14:49 PM com.couchbase.client.CouchbaseProperties setPropertyFile
INFO: Could not load properties file &amp;quot;cbclient.properties&amp;quot; because: File not found with system classloader.
2013-04-17 15:14:49.656 INFO com.couchbase.client.CouchbaseConnection:  Added {QA sa=/127.0.0.1:11210, #Rops=0, #Wops=0, #iq=0, topRop=null, topWop=null, toWrite=0, interested=0} to connect queue
2013-04-17 15:14:49.673 INFO com.couchbase.client.CouchbaseConnection:  Connection state changed for sun.nio.ch.SelectionKeyImpl@2adb1d4
2013-04-17 15:14:49.718 INFO com.couchbase.client.ViewConnection:  Added localhost to connect queue
2013-04-17 15:14:49.720 INFO com.couchbase.client.CouchbaseClient:  viewmode property isn&#39;t defined. Setting viewmode to production mode
2013-04-17 15:14:49.856 INFO com.couchbase.client.CouchbaseConnection:  Shut down Couchbase client
2013-04-17 15:14:49.861 INFO com.couchbase.client.ViewConnection:  Node localhost has no ops in the queue
2013-04-17 15:14:49.861 INFO com.couchbase.client.ViewNode:  I/O reactor terminated for localhost
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are connecting to a Couchbase Server 1.8 or against a Memcache-Bucket you won&amp;rsquo;t see View connections getting established:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INFO: Could not load properties file &amp;quot;cbclient.properties&amp;quot; because: File not found with system classloader.
2013-04-17 15:16:44.295 INFO com.couchbase.client.CouchbaseConnection:  Added {QA sa=/192.168.56.101:11210, #Rops=0, #Wops=0, #iq=0, topRop=null, topWop=null, toWrite=0, interested=0} to connect queue
2013-04-17 15:16:44.297 INFO com.couchbase.client.CouchbaseConnection:  Added {QA sa=/192.168.56.102:11210, #Rops=0, #Wops=0, #iq=0, topRop=null, topWop=null, toWrite=0, interested=0} to connect queue
2013-04-17 15:16:44.298 INFO com.couchbase.client.CouchbaseConnection:  Added {QA sa=/192.168.56.103:11210, #Rops=0, #Wops=0, #iq=0, topRop=null, topWop=null, toWrite=0, interested=0} to connect queue
2013-04-17 15:16:44.298 INFO com.couchbase.client.CouchbaseConnection:  Added {QA sa=/192.168.56.104:11210, #Rops=0, #Wops=0, #iq=0, topRop=null, topWop=null, toWrite=0, interested=0} to connect queue
2013-04-17 15:16:44.306 INFO com.couchbase.client.CouchbaseConnection:  Connection state changed for sun.nio.ch.SelectionKeyImpl@38b5dac4
2013-04-17 15:16:44.313 INFO com.couchbase.client.CouchbaseClient:  viewmode property isn&#39;t defined. Setting viewmode to production mode
2013-04-17 15:16:44.332 INFO com.couchbase.client.CouchbaseConnection:  Connection state changed for sun.nio.ch.SelectionKeyImpl@69945ce
2013-04-17 15:16:44.333 INFO com.couchbase.client.CouchbaseConnection:  Connection state changed for sun.nio.ch.SelectionKeyImpl@6766afb3
2013-04-17 15:16:44.334 INFO com.couchbase.client.CouchbaseConnection:  Connection state changed for sun.nio.ch.SelectionKeyImpl@2b2d96f2
2013-04-17 15:16:44.368 INFO net.spy.memcached.auth.AuthThread:  Authenticated to 192.168.56.103/192.168.56.103:11210
2013-04-17 15:16:44.368 INFO net.spy.memcached.auth.AuthThread:  Authenticated to 192.168.56.102/192.168.56.102:11210
2013-04-17 15:16:44.369 INFO net.spy.memcached.auth.AuthThread:  Authenticated to 192.168.56.101/192.168.56.101:11210
2013-04-17 15:16:44.369 INFO net.spy.memcached.auth.AuthThread:  Authenticated to 192.168.56.104/192.168.56.104:11210
2013-04-17 15:16:44.490 INFO com.couchbase.client.CouchbaseConnection:  Shut down Couchbase client
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;phase-2-operations&#34;&gt;Phase 2: Operations&lt;/h2&gt;

&lt;p&gt;When the SDK is bootstrapped, it enables your application to run operations against the attached cluster. For the purpose of this blog post, we need to distinguish between operations that get executed against a stable cluster and operations on a cluster that is currently experiencing some form of topology change (be it planned because of adding nodes or unplanned because of a node failure). Let&amp;rsquo;s tackle the regular operations first.&lt;/p&gt;

&lt;h3 id=&#34;operations-against-a-stable-cluster&#34;&gt;Operations against a stable cluster&lt;/h3&gt;

&lt;p&gt;While not directly visible in the first place, inside the SDK we need to distinguish between memcached operations and View operations. All operations that have a unique key in their method signature can be treaded as memcached operations. All of them eventually end up getting funneled through spy. View operations on the other hand are implemented completely inside the SDK itself.&lt;/p&gt;

&lt;p&gt;Both View and memcached operations are asynchronous. Inside spy, there is one thread (call the I/O thread) dedicated to deal with IO operations. Note that in high-traffic environments, its not unusual that this thread is always active. It uses the non-blocking Java NIO mechanisms to deal with traffic, and loops around &amp;ldquo;selectors&amp;rdquo; that get notified when data can either be written or read. If you profile your application you&amp;rsquo;ll see that this thread spends most of its time waiting on a &lt;code&gt;select&lt;/code&gt; method, it means that it is idling there waiting to be notified for new traffic. The concepts used inside spy to deal with this are common Java NIO knowledge, so you may want to look into the &lt;a href=&#34;https://www.ibm.com/developerworks/java/tutorials/j-nio/&#34;&gt;NIO internals&lt;/a&gt; first before digging into that code path. Good starting points are the &lt;code&gt;net.spy.memcached.MemcachedConnection&lt;/code&gt; and &lt;code&gt;net.spy.memcached.protocol.TCPMemcachedNodeImpl&lt;/code&gt; classes. Note that inside the SDK, we override the &lt;code&gt;MemcachedConnection&lt;/code&gt; to hook in our own reconfiguration logic. This class can be found inside the SDK at &lt;code&gt;com.couchbase.client.CouchbaseConnection&lt;/code&gt; and for memcached-type buckets in &lt;code&gt;com.couchbase.client.CouchbaseMemcachedConnection&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So if a memcached operations (like &lt;code&gt;get()&lt;/code&gt;) gets issued, it gets passed down until it reaches the IO thread. The IO thread will then put it on a write queue towards its target node. It gets written eventually and then the IO thread adds information to a read queue so the responses can be mapped accordingly. This approach is based on futures, so when the result actually arrives, the Future is marked as completed, the result gets parsed and attached as Object.&lt;/p&gt;

&lt;p&gt;The SDK only uses the memcached binary protocol, although spy would also support ASCII. The binary format is much more efficient and some of the advanced operations are only implemented there.&lt;/p&gt;

&lt;p&gt;You may wonder how the SDK knows where to send the operation? Since we already have the up-to-date cluster map, we can hash the key and then based on the node list and vBucketMap determine which node to access. The vBucketMap not only contains the information for the master node of the array, but also the information for zero to three replica nodes. Look at this (shortened) example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vBucketServerMap: {
hashAlgorithm: &amp;quot;CRC&amp;quot;,
numReplicas: 1,
serverList: [
    &amp;quot;192.168.56.101:11210&amp;quot;,
    &amp;quot;192.168.56.102:11210&amp;quot;
],
vBucketMap: [
[0,1],
[0,1],
[0,1],
[1,0],
[1,0],
[1,0]
//.....
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;serverList&lt;/code&gt; contains our nodes, and the &lt;code&gt;vBucketMap&lt;/code&gt; has pointers to the &lt;code&gt;serverList&lt;/code&gt; array. We have 1024 vBuckets, so only some of them are shown here. You can see from looking at it that all keys that has into the first vBucket have its master node at index 0 (so the &lt;code&gt;.101&lt;/code&gt; node) and its replica at index 1 (so the &lt;code&gt;.102&lt;/code&gt; node). Once the cluster map changes and the vBuckets move around, we just need to update our config and know all the time where to point our operations towards.&lt;/p&gt;

&lt;p&gt;View operations are handled differently. Since views can&amp;rsquo;t be sent to a specific node (because we don&amp;rsquo;t have a way to hash a key or something), we round-robin between the connected nodes. The operation gets assigned to a &lt;a href=&#34;http://www.couchbase.com/autodocs/couchbase-java-client-1.1.5/com/couchbase/client/ViewNode.html&#34;&gt;com.couchbase.client.ViewNode&lt;/a&gt; once it has free connections and then executed. The result is also handled through futures. To implement this functionality, the SDK uses the third party Apache HTTP Commons (NIO) library.&lt;/p&gt;

&lt;p&gt;The whole View API hides behind port 8092 on every node and is very similar to &lt;a href=&#34;http://couchdb.apache.org/&#34;&gt;CouchDB&lt;/a&gt;. It also contains a RESTful API, but the structure is a little bit different. For example, you can reach a design document at &lt;code&gt;/&amp;lt;bucketname&amp;gt;/_design/&amp;lt;designname&amp;gt;&lt;/code&gt;. It contains the View definitions in JSON:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    language: &amp;quot;javascript&amp;quot;,
    views: {
        all: {
            map: &amp;quot;function (doc) { if(doc.type == &amp;quot;city&amp;quot;) {emit([doc.continent, doc.country, doc.name], 1)}}&amp;quot;,
            reduce: &amp;quot;_sum&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can then reach down one level further like &lt;code&gt;/&amp;lt;bucketname&amp;gt;/_design/&amp;lt;designname&amp;gt;/_view/&amp;lt;viewname&amp;gt;&lt;/code&gt; to actually query it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{&amp;quot;total_rows&amp;quot;:9,&amp;quot;rows&amp;quot;:[
{&amp;quot;id&amp;quot;:&amp;quot;city:shanghai&amp;quot;,&amp;quot;key&amp;quot;:[&amp;quot;asia&amp;quot;,&amp;quot;china&amp;quot;,&amp;quot;shanghai&amp;quot;],&amp;quot;value&amp;quot;:1},
{&amp;quot;id&amp;quot;:&amp;quot;city:tokyo&amp;quot;,&amp;quot;key&amp;quot;:[&amp;quot;asia&amp;quot;,&amp;quot;japan&amp;quot;,&amp;quot;tokyo&amp;quot;],&amp;quot;value&amp;quot;:1},
{&amp;quot;id&amp;quot;:&amp;quot;city:moscow&amp;quot;,&amp;quot;key&amp;quot;:[&amp;quot;asia&amp;quot;,&amp;quot;russia&amp;quot;,&amp;quot;moscow&amp;quot;],&amp;quot;value&amp;quot;:1},
{&amp;quot;id&amp;quot;:&amp;quot;city:vienna&amp;quot;,&amp;quot;key&amp;quot;:[&amp;quot;europe&amp;quot;,&amp;quot;austria&amp;quot;,&amp;quot;vienna&amp;quot;],&amp;quot;value&amp;quot;:1},
{&amp;quot;id&amp;quot;:&amp;quot;city:paris&amp;quot;,&amp;quot;key&amp;quot;:[&amp;quot;europe&amp;quot;,&amp;quot;france&amp;quot;,&amp;quot;paris&amp;quot;],&amp;quot;value&amp;quot;:1},
{&amp;quot;id&amp;quot;:&amp;quot;city:rome&amp;quot;,&amp;quot;key&amp;quot;:[&amp;quot;europe&amp;quot;,&amp;quot;italy&amp;quot;,&amp;quot;rome&amp;quot;],&amp;quot;value&amp;quot;:1},
{&amp;quot;id&amp;quot;:&amp;quot;city:amsterdam&amp;quot;,&amp;quot;key&amp;quot;:[&amp;quot;europe&amp;quot;,&amp;quot;netherlands&amp;quot;,&amp;quot;amsterdam&amp;quot;],&amp;quot;value&amp;quot;:1},
{&amp;quot;id&amp;quot;:&amp;quot;city:new_york&amp;quot;,&amp;quot;key&amp;quot;:[&amp;quot;north_america&amp;quot;,&amp;quot;usa&amp;quot;,&amp;quot;new_york&amp;quot;],&amp;quot;value&amp;quot;:1},
{&amp;quot;id&amp;quot;:&amp;quot;city:san_francisco&amp;quot;,&amp;quot;key&amp;quot;:[&amp;quot;north_america&amp;quot;,&amp;quot;usa&amp;quot;,&amp;quot;san_francisco&amp;quot;],&amp;quot;value&amp;quot;:1}
]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the request is sent and a response gets back, it depends on the type of View request to determine on how the response gets parsed. It makes a difference, because reduced View queries look different than non-reduced. The SDK also includes support for spatial Views and they need to be handled differently as well.&lt;/p&gt;

&lt;p&gt;The whole View response parsing implementation can be found inside the &lt;a href=&#34;http://www.couchbase.com/autodocs/couchbase-java-client-1.1.5/com/couchbase/client/protocol/views/package-frame.html&#34;&gt;com.couchbase.client.protocol.views&lt;/a&gt; namespace. You&amp;rsquo;ll find abstract classes and interfaces like &lt;code&gt;ViewResponse&lt;/code&gt; in there, and then their special implementations like &lt;code&gt;ViewResponseNoDocs&lt;/code&gt;, &lt;code&gt;ViewResponseWithDocs&lt;/code&gt; or &lt;code&gt;ViewResponseReduced&lt;/code&gt;. It also makes a different if &lt;code&gt;setIncludeDocs()&lt;/code&gt; is used on the Query object, because the SDK also needs to load the full documents using the memcached protocol behind the scenes. This is also done while parsing the Views.&lt;/p&gt;

&lt;p&gt;Now that you have a basic understanding on how the SDK distributes its operations under stable conditions, we need to cover an important topic: how the SDK deals with cluster topology changes.&lt;/p&gt;

&lt;h3 id=&#34;operations-against-a-rebalancing-cluster&#34;&gt;Operations against a rebalancing cluster&lt;/h3&gt;

&lt;p&gt;Note that there is a separate blog post upcoming dealing with all the scenarios that may come up when something goes wrong on the SDK. Since rebalancing and failover are crucial parts of the SDK, this post deals more with the general process on how this is handled.&lt;/p&gt;

&lt;p&gt;As mentioned earlier, the SDK receives topology updates through the streaming connection. Leaving the special case aside where this node actually gets removed or fails, all updates will stream in near real-time (in a eventually consistent architecture, it may take some time until the cluster updates get populated to that node). The chunks that come in over the stream look exactly like the ones we&amp;rsquo;ve seen when reading the initial configuration. After those chunks have been parsed, we need to check if the changes really affect the SDK (since there are many more parameters than the SDK needs, it won&amp;rsquo;t make sense to listen to all of them). All changes that affect the topology and/or vBucket map are considered as important. If nodes get added or removed (be it either through failure or planned), we need to open or close the sockets. This process is called &amp;ldquo;reconfiguration&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Once such a reconfiguration is triggered, lots of actions need to happen in various places. Spymemcached needs to handle its sockets, View nodes need to be managed and new configuration needs to be updated. The SDK makes sure that only one reconfiguration can happen at the same time through locks so we don&amp;rsquo;t have any race conditions going on.&lt;/p&gt;

&lt;p&gt;The Netty-based &lt;code&gt;BucketUpdateResponseHandler&lt;/code&gt; triggers the &lt;code&gt;CouchbaseClient#reconfigure&lt;/code&gt; method, which then starts to dispatch everything. Depending on the bucket type used (i.e. memcached type buckets don&amp;rsquo;t have Views and therefore no ViewNodes), configs are updated and sockets closed. Once the reconfiguration is done, it can receive new ones. During planned changes, everything should be pretty much controlled and no operations should fail. If a node is actually down and cannot be reached, those operations will be cancelled. Reconfiguration is tricky because the topology changes while operations are flowing through the system.&lt;/p&gt;

&lt;p&gt;Finally, let&amp;rsquo;s cover some differences between Couchbase and Memcache type buckets. All the information hat you&amp;rsquo;ve been reading previously only applies to Couchbase buckets. Memcache buckets are pretty basic and do not have the concept of vBuckets. Since you don&amp;rsquo;t have vBuckets, all that the Client has to do is to manage the nodes and their corresponding sockets. Also, a different hashing algorithm is used (mostly Ketama) to determine the target node for each key. Also, memcache buckets don&amp;rsquo;t have views, so you can&amp;rsquo;t use the View API and it doesn&amp;rsquo;t make much sense to keep View sockets around. So to clarify the previous statement, if you are running against a memcache bucket, for a 10 node cluster you&amp;rsquo;ll only have 11 open connections.&lt;/p&gt;

&lt;h2 id=&#34;phase-3-shutdown&#34;&gt;Phase 3: Shutdown&lt;/h2&gt;

&lt;p&gt;Once the &lt;code&gt;CouchbaseClient#shutdown()&lt;/code&gt; method is called, no more operations are allowed to be added onto the &lt;code&gt;CouchbaseConnection&lt;/code&gt;. Until the timeout is reached, the client wants to make sure that all operations went through accordingly. All sockets for both memcached and View connections are shut down once there are no more operations in the queue (or they get dropped). Note that that the &lt;code&gt;shutdown&lt;/code&gt; methods on those sockets are also used when a node gets removed from the cluster during normal operations, so it&amp;rsquo;s basically the same, but just for all attached nodes at the same time.&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;After reading this blog post, you should have a much more clear picture on how the client SDK works and why it is designed the way it is. We have lots of enhancements planned for future releases, mostly enhancing the direct API experience. Note that this blog post didn&amp;rsquo;t cover how errors are handled inside the SDK; this will be published in a separate blog post because there is also lots of information to cover.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Never awaitUninterruptibly() on Netty Channels</title>
      <link>http://nitschinger.at/Never-await-Uninterruptibly-on-Netty-Channels/</link>
      <pubDate>Tue, 05 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://nitschinger.at/Never-await-Uninterruptibly-on-Netty-Channels/</guid>
      <description>&lt;p&gt;TL:DR; When acquiring &lt;a href=&#34;http://netty.io/3.6/api/org/jboss/netty/channel/Channel.html&#34;&gt;Channels&lt;/a&gt; in &lt;a href=&#34;http://netty.io&#34;&gt;Netty&lt;/a&gt;, always use a &lt;a href=&#34;http://netty.io/3.6/api/org/jboss/netty/channel/ChannelFutureListener.html&#34;&gt;ChannelFutureListener&lt;/a&gt; and never &lt;a href=&#34;http://docs.jboss.org/netty/3.2/api/org/jboss/netty/channel/ChannelFuture.html#awaitUninterruptibly()&#34;&gt;awaitUninterruptibly()&lt;/a&gt;. Curious why? Read on.&lt;/p&gt;

&lt;p&gt;In the &lt;a href=&#34;http://www.couchbase.com/develop/java/current&#34;&gt;Java SDK&lt;/a&gt; for &lt;a href=&#34;http://www.couchbase.com/&#34;&gt;Couchbase&lt;/a&gt;, we use Netty to establish and maintain a streaming connection to one of the cluster nodes in order to get notified when topology changes happen. This streaming connection needs to be established during the bootstrap process of the client and we need to block until the connection is established (actually we don&amp;rsquo;t need to, but the current implementation works that way). The old implementation to acquire the Channel looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ClientBootstrap bootstrap = new ClientBootstrap(factory);
bootstrap.setPipelineFactory(new BucketMonitorPipelineFactory());
ChannelFuture future = bootstrap.connect(new InetSocketAddress(host, port));

channel = future.awaitUninterruptibly().getChannel();
if (!future.isSuccess()) {
  bootstrap.releaseExternalResources();
  throw new ConnectionException(&amp;quot;Something bad happened...&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works great, but there is a problem associated that is not obvious in the first place. As long as you use this code only in a client side context, Netty will not complain and happily work with your code. When people started to use our client library inside a Netty based server framework (for example &lt;a href=&#34;http://www.playframework.com/&#34;&gt;Play&lt;/a&gt;), Netty complained like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Unexpected exception[IllegalStateException: await*() in I/O thread causes a dead lock or sudden performance drop. Use addListener() instead or call await*() from a different thread.]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The environment where this happens is clearly defined: we are bootstrapping a Netty client inside the I/O thread of a Netty server, so we basically have two Netty environments running and one is complaining about the other. Once you are aware of this situation, it is more or less easy to fix:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bootstrap = new ClientBootstrap(factory);
bootstrap.setPipelineFactory(new BucketMonitorPipelineFactory());
ChannelFuture future =  bootstrap.connect(new InetSocketAddress(host, port));
channelFuture.addListener(new ChannelFutureListener() {
  @Override
  public void operationComplete(ChannelFuture cf) throws Exception {
    if(cf.isSuccess()) {
      channel = cf.getChannel();
    } else {
      bootstrap.releaseExternalResources();
      throw new ConnectionException(&amp;quot;Something bad happened...&amp;quot;);
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, instead of waiting on the caller thread, we move the waiting part to a separate thread managed by the Netty execution context. There&amp;rsquo;s only one problem left: we still need to block, because the code down the stack depends on a established Channel to work with. To solve this issue, we can use a &lt;a href=&#34;http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/CountDownLatch.html&#34;&gt;CountDownLatch&lt;/a&gt; like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;final CountDownLatch channelLatch = new CountDownLatch(1);
channelFuture.addListener(new ChannelFutureListener() {
  @Override
  public void operationComplete(ChannelFuture cf) throws Exception {
    if(cf.isSuccess()) {
      channel = cf.getChannel();
      channelLatch.countDown();
    } else {
      bootstrap.releaseExternalResources();
      throw new ConnectionException(&amp;quot;Something bad happened...&amp;quot;);
    }
  }
});

try {
  channelLatch.await();
} catch(InterruptedException ex) {
  throw new ConnectionException(&amp;quot;Interrupted while waiting for streaming &amp;quot;
    + &amp;quot;connection to arrive.&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the end we still block on the caller thread, but we are compliant with Netty. The main takeaway for me is that you should never block on acquiring Channels in Netty, just because of the fact that your client side code may be used in a server side context as well. This is especially true for library developers like me.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Caching Doctrine Entities with Couchbase</title>
      <link>http://nitschinger.at/Caching-Doctrine-Entities-with-Couchbase/</link>
      <pubDate>Tue, 08 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>http://nitschinger.at/Caching-Doctrine-Entities-with-Couchbase/</guid>
      <description>

&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;As part of our ongoing efforts to make Couchbase more integrated with frameworks and libraries, we added caching support for the &lt;a href=&#34;http://www.doctrine-project.org/&#34;&gt;Doctrine ORM&lt;/a&gt;. Recently, the pull request has been merged into the master branch and is scheduled to be published along with the &lt;a href=&#34;http://doctrine-project.org/jira/browse/DCOM/fixforversion/10327&#34;&gt;2.4&lt;/a&gt; release.&lt;/p&gt;

&lt;p&gt;Caching can either be used standalone (through the API provided by &lt;a href=&#34;http://www.doctrine-project.org/projects/common.html&#34;&gt;doctrine/common&lt;/a&gt;) or integrated with the ORM functionality. We&amp;rsquo;ll look at both variants through simple examples, a good documentation can also be found &lt;a href=&#34;http://docs.doctrine-project.org/en/latest/reference/caching.html&#34;&gt;here&lt;/a&gt;. Note that at the time of writing, the CouchbaseCache is not mentioned as a caching driver because the documentation still needs to be updated.&lt;/p&gt;

&lt;p&gt;Since 2.4 has not been released yet, we need to work against the &lt;code&gt;2.4.x-dev&lt;/code&gt; branch. We&amp;rsquo;ll be using &lt;a href=&#34;http://getcomposer.org/&#34;&gt;Composer&lt;/a&gt; to fetch our dependencies, so just need change the version number if you want to pin it down to 2.4 later.&lt;/p&gt;

&lt;h2 id=&#34;simple-caching&#34;&gt;Simple Caching&lt;/h2&gt;

&lt;p&gt;Our first example shows how the caching API can be used directly. If you are familiar with the Couchbase API, you may think that it&amp;rsquo;s more or less just a different API with the same (and maybe less) semantics, but the point is that it uses the Doctrine Cache API interface and as a result you can switch between different caching implementations very easily.&lt;/p&gt;

&lt;p&gt;Create a directory called &lt;code&gt;couchbase-doctrine-simple&lt;/code&gt; with the following &lt;code&gt;composer.json&lt;/code&gt; inside:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;require&amp;quot;: {
        &amp;quot;doctrine/common&amp;quot;: &amp;quot;2.4.x-dev&amp;quot;,
        &amp;quot;ext-couchbase&amp;quot;: &amp;quot;1.1.x&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This installs the &lt;a href=&#34;https://packagist.org/packages/doctrine/common&#34;&gt;doctrine/common&lt;/a&gt; package and also makes sure that we have the &lt;code&gt;couchbase.so&lt;/code&gt; extension in place. If you haven&amp;rsquo;t installed the Couchbase PHP extension already, head over to the &lt;a href=&#34;http://www.couchbase.com/develop/php/current&#34;&gt;official website&lt;/a&gt; and install it based on the tutorial and the docs.&lt;/p&gt;

&lt;p&gt;Create a &lt;code&gt;index.php&lt;/code&gt; with the following content (we&amp;rsquo;ll break up the code afterwards):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
// 0: Composer Autoloader
require &#39;vendor/autoload.php&#39;;

// 1: Open the Couchbase Connection
$couchbase = new Couchbase(&amp;quot;127.0.0.1&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;default&amp;quot;);

// 2: Instantiate the Driver &amp;amp; Inject the Connection
$cacheDriver = new \Doctrine\Common\Cache\CouchbaseCache();
$cacheDriver-&amp;gt;setCouchbase($couchbase);

// 3: Execute your commands!
$key = &amp;quot;my-cache-item&amp;quot;;

if(!$cacheDriver-&amp;gt;contains($key)) {
    $cacheDriver-&amp;gt;save($key, &amp;quot;my_data&amp;quot;);
} else {
    echo $cacheDriver-&amp;gt;fetch($key);
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First, we need to bootstrap the composer autoloader so we don&amp;rsquo;t have to write all &lt;code&gt;require&lt;/code&gt; statements on our own. The next thing we need to do is actually connect to the Couchbase cluster:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 1: Open the Couchbase Connection
$couchbase = new Couchbase(&amp;quot;127.0.0.1&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;default&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, we&amp;rsquo;re connecting to a node in the cluster which points at &lt;code&gt;localhost&lt;/code&gt;, but you can pass in an array of nodes as well. We connect to the &lt;code&gt;default&lt;/code&gt; bucket, which has no password. Now that we have our connection established, we can instantiate the cache driver and inject our Couchbase client:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 2: Instantiate the Driver &amp;amp; Inject the Connection
$cacheDriver = new \Doctrine\Common\Cache\CouchbaseCache();
$cacheDriver-&amp;gt;setCouchbase($couchbase);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From here on, the API is the same for all cache drivers. The following code checks if the cache contains a key. If it is present, it prints out the document but if it isn&amp;rsquo;t it creates a new one. This is a very simple example but shows how you can start to use Couchbase caching in your own projects with just a few lines of bootstrapping!&lt;/p&gt;

&lt;p&gt;Aside from these three methods, there is also a &lt;code&gt;delete&lt;/code&gt; method available. Finally, you can pass an optional third param on &lt;code&gt;save&lt;/code&gt; with a &lt;code&gt;$lifeTime&lt;/code&gt; so that the cache item vanishes automatically.&lt;/p&gt;

&lt;p&gt;Since Couchbase Server doesn&amp;rsquo;t care what you store, you can also save and fetch any kind of datatype (aside from resources):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$cacheDriver-&amp;gt;save($key, array(&#39;foo&#39; =&amp;gt; &#39;bar&#39;));
var_dump($cacheDriver-&amp;gt;fetch($key));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that when you use the driver at this level, try to store JSON strings when you can (use &lt;code&gt;json_encode&lt;/code&gt;/&lt;code&gt;json_decode&lt;/code&gt; on your datastructures) This way you can take advantage of the brand new view engine inside Couchbase Server 2.0. You can always just store serialized objects as well (like we need to do with ORM integration) since for Couchbase Server it&amp;rsquo;s just a byte stream.&lt;/p&gt;

&lt;p&gt;We can now build on this foundation and see how this works with ORM integration.&lt;/p&gt;

&lt;h2 id=&#34;orm-integration&#34;&gt;ORM Integration&lt;/h2&gt;

&lt;p&gt;Create a new directory called &lt;code&gt;couchbase-doctrine-orm&lt;/code&gt; with the following &lt;code&gt;composer.json&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;require&amp;quot;: {
        &amp;quot;doctrine/orm&amp;quot;: &amp;quot;2.4.x-dev&amp;quot;,
        &amp;quot;doctrine/dbal&amp;quot;: &amp;quot;2.4.x-dev&amp;quot;,
        &amp;quot;doctrine/common&amp;quot;: &amp;quot;2.4.x-dev&amp;quot;,
        &amp;quot;ext-couchbase&amp;quot;: &amp;quot;1.1.x&amp;quot;
    },
    &amp;quot;autoload&amp;quot;: {
        &amp;quot;psr-0&amp;quot;: {
            &amp;quot;Entities&amp;quot;: &amp;quot;src/&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This time our &lt;code&gt;composer.json&lt;/code&gt; file is a little bit longer, because we need to define all of our dependencies by hand (since we don&amp;rsquo;t want to work against the stable release). Since we need to define Doctrine Entities we pass the composer autoloader the custom directory (&lt;code&gt;src/&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The next thing we need is our actual entity that we want to manage through Doctrine. Go ahead and create a &lt;code&gt;Person.php&lt;/code&gt; file inside the &lt;code&gt;src/Entities&lt;/code&gt; directory with the following content:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

namespace Entities;

/** @Entity */
class Person {

    /**
     * @Id @Column(type=&amp;quot;integer&amp;quot;) @GeneratedValue(strategy=&amp;quot;AUTO&amp;quot;)
     */
    private $id;

    /** @Column(type=&amp;quot;string&amp;quot;) */
    private $firstname;

    /** @Column(type=&amp;quot;string&amp;quot;) */
    private $lastname;

    public function setFirstname($firstname) {
        $this-&amp;gt;firstname = $firstname;
    }

    public function getFirstname() {
        return $this-&amp;gt;firstname;
    }

    public function setLastname($lastname) {
        $this-&amp;gt;lastname = $lastname;
    }

    public function getLastname() {
        return $this-&amp;gt;lastname;
    }

}

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a very simple Doctrine Entity that has some properties and also a autogenerated &lt;code&gt;ID&lt;/code&gt; field. I&amp;rsquo;m going to use &lt;a href=&#34;http://www.sqlite.org/&#34;&gt;SQLite&lt;/a&gt; in the following example, but feel free to use MySQL or any other relational database that you have available.&lt;/p&gt;

&lt;p&gt;To wire everything together, we&amp;rsquo;re going to create a &lt;code&gt;index.php&lt;/code&gt; file in the root directory of the project. Again, here is the full content and we&amp;rsquo;re going to break it apart afterwards:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
// Composer autoloader.
$loader = require &#39;vendor/autoload.php&#39;;

/**
 * Initialize Couchbase &amp;amp; the Cache.
 */
$couchbase = new Couchbase(&amp;quot;127.0.0.1&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;default&amp;quot;);
$cacheDriver = new \Doctrine\Common\Cache\CouchbaseCache();
$cacheDriver-&amp;gt;setCouchbase($couchbase);


/**
 * Initialize the Entity Manager.
 */
$paths = array(__DIR__ . &#39;/src/Entities/&#39;);
$isDevMode = true;
$dbParams = array(
    &#39;driver&#39; =&amp;gt; &#39;pdo_sqlite&#39;,
    &#39;user&#39; =&amp;gt; &#39;root&#39;,
    &#39;password&#39; =&amp;gt; &#39;&#39;,
    &#39;path&#39; =&amp;gt; __DIR__ . &#39;/cbexample.sqlite&#39;
);

$config = \Doctrine\ORM\Tools\Setup::createAnnotationMetadataConfiguration($paths, $isDevMode, null, $cacheDriver);
$em = \Doctrine\ORM\EntityManager::create($dbParams, $config);

/**
 * Work with our Entities.
 */
$person = new \Entities\Person();
$person-&amp;gt;setFirstname(&amp;quot;Michael&amp;quot;);
$person-&amp;gt;setLastname(&amp;quot;Nitschinger&amp;quot;);

$em-&amp;gt;persist($person);
$em-&amp;gt;flush();

// Query with Result Cache
$query = $em-&amp;gt;createQuery(&#39;select p from Entities\Person p&#39;);
$query-&amp;gt;useResultCache(true);
$results = $query-&amp;gt;getResult();

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since this may be a lot to grasp, let&amp;rsquo;s break it into smaller sized chunks.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$couchbase = new Couchbase(&amp;quot;127.0.0.1&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;default&amp;quot;);
$cacheDriver = new \Doctrine\Common\Cache\CouchbaseCache();
$cacheDriver-&amp;gt;setCouchbase($couchbase);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After our bootstrapping the autoloader, we&amp;rsquo;re initializing the cache driver. You already know what this means because we&amp;rsquo;ve used the same code in the simple example before.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$paths = array(__DIR__ . &#39;/src/Entities/&#39;);
$isDevMode = true;
$dbParams = array(
    &#39;driver&#39; =&amp;gt; &#39;pdo_sqlite&#39;,
    &#39;user&#39; =&amp;gt; &#39;root&#39;,
    &#39;password&#39; =&amp;gt; &#39;&#39;,
    &#39;path&#39; =&amp;gt; __DIR__ . &#39;/cbexample.sqlite&#39;
);

$config = \Doctrine\ORM\Tools\Setup::createAnnotationMetadataConfiguration($paths, $isDevMode, null, $cacheDriver);
$em = \Doctrine\ORM\EntityManager::create($dbParams, $config);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;\Doctrine\ORM\EntityManager&lt;/code&gt; is one of the major building blocks inside Doctrine and needs to be initialized accordingly. Therefore, we need to provide it a valid configuration. Here we&amp;rsquo;re going to use annotations (as seen on the Doctrine Entity, but you can also do it through XML or YAML). We also need to provide our database connection and the path to the entities. The important part here is that we pass the &lt;code&gt;$cacheDriver&lt;/code&gt; to the factory method. This automatically initializes our &lt;code&gt;CouchbaseCache&lt;/code&gt; to be used for all kinds of caching (Query, Metadata and Result caching).&lt;/p&gt;

&lt;p&gt;Now we can go ahead and create a record:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$person = new \Entities\Person();
$person-&amp;gt;setFirstname(&amp;quot;Michael&amp;quot;);
$person-&amp;gt;setLastname(&amp;quot;Nitschinger&amp;quot;);

$em-&amp;gt;persist($person);
$em-&amp;gt;flush();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Afterwards, we can fetch it back through a query:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$query = $em-&amp;gt;createQuery(&#39;select p from Entities\Person p&#39;);
$query-&amp;gt;useResultCache(true);
$results = $query-&amp;gt;getResult();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that we explicitely tell it to cache this query result for us (by default, result caching won&amp;rsquo;t be used). If open the browser and point it to your Couchbase Server 2.0 management UI, you can see that Doctrine did create lots of documents behind the scenes. These are subsequently used to boost your application performance.&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;As you can see, using Couchbase as a Cache for Doctrine is not hard. You just need to initialize it and pass it into the configuration. From this point on, everything happens behind the scenes. And don&amp;rsquo;t forget that you not only get exceptional performance, but also persistence, scalability and all the cool stuff that Couchbase Server provides out of the box.&lt;/p&gt;

&lt;p&gt;If you have any questions or input, please let me know in the comments! Finally, thanks to &lt;a href=&#34;https://twitter.com/Ocramius&#34;&gt;Marco Pivetta&lt;/a&gt; for helping me debug an &lt;a href=&#34;https://github.com/doctrine/common/pull/240&#34;&gt;issue&lt;/a&gt; with ORM integration!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New Features in the Couchbase Java Client 1.1-dp4</title>
      <link>http://nitschinger.at/New-Features-in-the-Couchbase-Java-Client-1-1-dp4/</link>
      <pubDate>Wed, 07 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>http://nitschinger.at/New-Features-in-the-Couchbase-Java-Client-1-1-dp4/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The latest &lt;a href=&#34;http://www.couchbase.com/develop/java/next&#34;&gt;Java Developer Preview (dp4)&lt;/a&gt; is hot off the press, and therefore I thought it would be a good idea to show you how to use some of the brand-new features that are now available. This post will show you how to use the new &lt;code&gt;ComplexKey&lt;/code&gt; class for view queries and also how to create and delete buckets directly from your SDK.&lt;/p&gt;

&lt;p&gt;First, we added a very flexible way of providing parameters to view queries. The idea is that, instead of having to deal with JSON strings on your own, you can pass in Java objects and the appropriate JSON string will be created for you. While it may not sound like a big deal first, this also frees you from the worries about encoding it properly so that it can be transferred over HTTP. Before we dig into the inner workings, lets first start with a basic example on how to create a view query.&lt;/p&gt;

&lt;p&gt;Every time you query a view, you need to create a &lt;code&gt;Query&lt;/code&gt; and a &lt;code&gt;View&lt;/code&gt; object. The &lt;code&gt;View&lt;/code&gt; both  object defines the name of the design document and the view, and the &lt;code&gt;Query&lt;/code&gt; object allows you to control the params that you can supply with the query.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;View myview = client.getView(&amp;quot;designdoc&amp;quot;, &amp;quot;viewname&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instead of creating the &lt;code&gt;View&lt;/code&gt; object directly, you use the &lt;code&gt;getView()&lt;/code&gt; method on the client object. It is important to know that the SDK actually fetches view information from the server and will throw an exception if either the design document name or the view name are not found. An exception typically looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;com.couchbase.client.protocol.views.InvalidViewException: Could not load view &amp;quot;viewname&amp;quot; for design doc &amp;quot;designdoc&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have our view created, let&amp;rsquo;s instantiate a query object:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Query myquery = new Query();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you don&amp;rsquo;t specify anything else, the query object will work with the default settings. This means that no reduce function will be used and the full documents are not included. If you want to change these settings (or others), the &lt;code&gt;Query&lt;/code&gt; instance provides setter methods for all of them. If you want to find out more, look at the SDK documentation or at the &lt;a href=&#34;http://www.couchbase.com/docs/couchbase-manual-2.0/couchbase-views-querying-rest-api.html&#34;&gt;Couchbase Server manual&lt;/a&gt;. Basically, you can control everything that you could too while querying a view from the Couchbase UI. Here are some examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Include the full documents as well
myquery.setIncludeDocs(true);

// Enable the reduce function
myquery.setReduce(true);

// Set the group level
myquery.setGroupLevel(2);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that it doesn&amp;rsquo;t make sense to include the full documents and run the reduce phase, since you don&amp;rsquo;t have document references left after the reduce phase. If you try to set both to true, the SDK complains with the following exception:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// query.setReduce(true); query.setIncludeDocs(true);
java.lang.UnsupportedOperationException: Reduced views don&#39;t contain documents
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, if your view doesn&amp;rsquo;t contain a reduce function and you set &lt;code&gt;reduce&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, you&amp;rsquo;ll see the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// query.setReduce(true); on a view with no reduce function defined.
java.lang.RuntimeException: This view doesn&#39;t contain a reduce function
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;querying-with-complexkeys&#34;&gt;Querying with ComplexKeys&lt;/h2&gt;

&lt;p&gt;Enough with exceptions, here comes the fun part: some query setter methods not only accept boolean or string arguments, they also allow instances of &lt;code&gt;ComplexKey&lt;/code&gt;. &lt;code&gt;ComplexKey&lt;/code&gt; takes care of translating your Java objects (or primitives) to their appropriate &lt;a href=&#34;http://json.org/&#34;&gt;JSON&lt;/a&gt; representation. Here is a list of the query methods who support it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;setKey(ComplexKey): Return only documents that match the specified key.&lt;/li&gt;
&lt;li&gt;setKeys(ComplexKey): Return only documents that match each of keys specified within the given array.&lt;/li&gt;
&lt;li&gt;setRange(ComplexKey, ComplexKey): Returns records in the given key range.&lt;/li&gt;
&lt;li&gt;setRangeStart(ComplexKey): Return records with a value equal to or greater than the specified key.&lt;/li&gt;
&lt;li&gt;setRangeEnd(ComplexKey): Stop returning records when the specified key is reached.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An instance of a &lt;code&gt;ComplexKey&lt;/code&gt; object is obtained through the static &lt;code&gt;of&lt;/code&gt; factory method. When the query object is accessed during the view query, the &lt;code&gt;toJSON()&lt;/code&gt; method is called on it and as a result the JSON string is generated. Here are some examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// JSON Result: 100
ComplexKey.of(100);

// JSON Result: &amp;quot;Hello&amp;quot;
ComplexKey.of(&amp;quot;Hello&amp;quot;);

// JSON Result: [&amp;quot;Hello&amp;quot;, &amp;quot;World&amp;quot;]
ComplexKey.of(&amp;quot;Hello&amp;quot;, &amp;quot;World&amp;quot;);

// JSON Result: [1349360771542,1]
ComplexKey.of(new Date().getTime(), 1);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This means that you don&amp;rsquo;t have to deal with building the proper JSON strings for yourself (and make sure the escaping is correct). All methods except &lt;code&gt;setRange()&lt;/code&gt; expect exactly one instance of ComplexKey. For example, if you emit keys with a unix timestamp and you want to fetch all records until now, you could do it like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Query query = new Query();
query.setRangeEnd(ComplexKey.of(new Date().getTime()));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When converted to a string to send it over the wire, it would look like this: &lt;code&gt;?endkey=1349361137738&lt;/code&gt;. This makes it also very easy to create a full range query:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;long now = new Date().getTime();
long tomorrow = now + 86400;
Query query = new Query();
query.setRange(ComplexKey.of(now), ComplexKey.of(tomorrow));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This converts to &lt;code&gt;?startkey=1349362647742&amp;amp;endkey=1349362734142&lt;/code&gt; on the wire.&lt;/p&gt;

&lt;h2 id=&#34;bucket-management-through-the-clustermanager&#34;&gt;Bucket management through the ClusterManager&lt;/h2&gt;

&lt;p&gt;Until now, you&amp;rsquo;d have to &lt;a href=&#34;http://www.couchbase.com/docs/couchbase-manual-2.0/couchbase-admin-web-console-data-buckets.html&#34;&gt;create and delete buckets&lt;/a&gt; either manually through the Couchbase UI or by using the REST API directly. With the addition of the &lt;code&gt;ClusterManager&lt;/code&gt;, it is now possible to mange your buckets directly through the SDK, be it for testing purposes or to automatically create them when your code is deployed to a new environment. This can be especially useful if you want to automate bucket management in a staging or CI environment.&lt;/p&gt;

&lt;p&gt;The management API is not accessible through &lt;code&gt;CouchbaseClient&lt;/code&gt;, but through the &lt;code&gt;ClusterManager&lt;/code&gt; class. This is because the &lt;code&gt;CouchbaseClient&lt;/code&gt; is bound to a specific bucket and was not designed for management purposes like this. Instead, you create a new instance of the &lt;code&gt;ClusterManager&lt;/code&gt; class and pass it a list of URIs and the admin user name and password.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;List&amp;lt;URI&amp;gt; uris = new LinkedList&amp;lt;URI&amp;gt;();
uris.add(URI.create(&amp;quot;http://127.0.0.1:8091/pools&amp;quot;));
ClusterManager manager = new ClusterManager(uris, &amp;quot;Administrator&amp;quot;, &amp;quot;password&amp;quot;);

// .. your code

manager.shutdown();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can now create and delete buckets (of type &lt;code&gt;Couchbase&lt;/code&gt; or &lt;code&gt;Memcached&lt;/code&gt;). You can also list all available buckets in the Couchbase cluster or flush the bucket (if flush is enabled). Here are some examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Create the default bucket with a 100MB memory limit and 0 replicas.
manager.createDefaultBucket(BucketType.COUCHBASE, 100, 0);

// Create a bucket with authentication.
manager.createSaslBucket(BucketType.COUCHBASE, &amp;quot;saslbucket&amp;quot;, 100, 0, &amp;quot;password&amp;quot;);

// Get a list of all buckets in the cluster.
List&amp;lt;String&amp;gt; buckets = manager.listBuckets();

// Delete a bucket
manager.deleteBucket(&amp;quot;saslbucket&amp;quot;);

// Check if a bucket named &amp;quot;mybucket&amp;quot; exists in the cluster:
List&amp;lt;String&amp;gt; buckets = manager.listBuckets();
assertTrue(buckets.contains(&amp;quot;mybucket&amp;quot;));

// Flush the &amp;quot;default&amp;quot; bucket if flush is enabled
manager.flushBucket(&amp;quot;default&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that creating, deleting and flushing may take some time (from milliseconds to seconds, depending on the cluster load). You can either wait a few seconds before you move on (with a Thread.sleep()), or you can wait until &lt;code&gt;listBuckets()&lt;/code&gt; contains your created bucket. There is also a callback-approach (which the client library uses internally to minimize waiting times during tests), but this involves more code on the application side.&lt;/p&gt;

&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;This post showed you two brand-new features shipped with the 1.1-dp4 release.&lt;/p&gt;

&lt;p&gt;While you can still use string-based keys to run range or key queries, the &lt;code&gt;ComplexKey&lt;/code&gt; class hopefully provides a convenient addition to your tool belt. While also useful for primitives and single objects, it makes it much more convenient to create JSON arrays or objects since you don&amp;rsquo;t have to deal with brackets and escaping yourself.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;ClusterManager&lt;/code&gt; gives you the flexibility to manage your buckets directly from the SDK to avoid separate HTTP calls or even manual interaction through the UI.&lt;/p&gt;

&lt;p&gt;The full release notes are available &lt;a href=&#34;http://www.couchbase.com/docs/couchbase-sdk-java-1.1/couchbase-sdk-java-rn_1-1-0d.html&#34;&gt;here&lt;/a&gt;. As always, we&amp;rsquo;re curious what you say about this and if you encounter bugs or know how to enhance it even more, feel free to comment below, create a ticket or post in the forums!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New Job, Couchbase Server 2.0 and CouchConf Berlin</title>
      <link>http://nitschinger.at/New-Job-Couchbase-Server-2-0-and-Couch-Conf-Berlin/</link>
      <pubDate>Mon, 22 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>http://nitschinger.at/New-Job-Couchbase-Server-2-0-and-Couch-Conf-Berlin/</guid>
      <description>&lt;p&gt;The last weeks have been pretty exciting for me. I joined Couchbase as a Developer Advocate mostly working on the Java and PHP SDKs as well as helping out developers who are getting started with our product or have questions during their development process.&lt;/p&gt;

&lt;p&gt;The 2.0 release is currently in beta and can be downloaded &lt;a href=&#34;http://www.couchbase.com/couchbase-server/beta&#34;&gt;here&lt;/a&gt;, you may also want to look into the decent &lt;a href=&#34;http://www.couchbase.com/couchbase-server/beta#resources&#34;&gt;documentation&lt;/a&gt; put together by our docs team. If you are speaking german, &lt;a href=&#34;http://it-republik.de/php/artikel/Couchbase-2.0-Mehr-als-nur-Key-Value-Store-5329.html&#34;&gt;here&lt;/a&gt; is a short article that has been published about Couchbase and PHP in preparation for a much longer article coming up in one of the next issues of the &lt;a href=&#34;http://it-republik.de/php/&#34;&gt;PHP Magazin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are located in Germany or Europe, you may want to join us during &lt;a href=&#34;http://www.couchbase.com/couchconf-berlin&#34;&gt;CouchConf Berlin&lt;/a&gt;, which is happening on October 30th. We also offer developer and operation trainings during that time, so if you want to get your feet wet with Couchbase this is an excellent opportunity. I&amp;rsquo;ll be giving a talk on &amp;ldquo;Getting started with Couchbase App Development&amp;rdquo; and also be around all day (and evening).&lt;/p&gt;

&lt;p&gt;When the 2.0 version is released (in combination with all of the supported SDKs), I will also be able to blog more frequently and also provide sample applications with either Java or PHP. There is a lot cool stuff in the pipeline, so stay tuned.&lt;/p&gt;

&lt;p&gt;If you have any questions around Couchbase or its proper integration up the stack, feel free to ping me directly or get in touch with the other folks either through IRC (#couchbase, #libcouchbase) or the &lt;a href=&#34;http://www.couchbase.com/forums/&#34;&gt;Forums&lt;/a&gt;. While I certainly can&amp;rsquo;t provide answers to all questions, I can link you up with the right people.&lt;/p&gt;

&lt;p&gt;See you in Berlin!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Real-Time chat with Play, Java and Couchbase - Part 1</title>
      <link>http://nitschinger.at/A-Real-Time-chat-with-Play-Java-and-Couchbase-Part-1/</link>
      <pubDate>Tue, 17 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>http://nitschinger.at/A-Real-Time-chat-with-Play-Java-and-Couchbase-Part-1/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve been mostly blogging about PHP and &lt;a href=&#34;http://lithify.me&#34;&gt;Lithium&lt;/a&gt;, but recently I&amp;rsquo;ve also been looking into a very promising framework on the JVM - the &lt;a href=&#34;http://www.playframework.org/&#34;&gt;play! framework&lt;/a&gt;. The current version (2.0) brings lots of enhancements and features and is (at least to me) the first framework that really boosts developer productivity on the JVM (and that I would work with in my free time).&lt;/p&gt;

&lt;p&gt;In this project, we&amp;rsquo;ll develop a chat application (called &lt;code&gt;couchplay&lt;/code&gt;) that allows people to login with a username and then talk to others in real-time. We&amp;rsquo;ll make use of the built-in &lt;a href=&#34;http://en.wikipedia.org/wiki/Comet_%28programming%29&#34;&gt;Comet&lt;/a&gt; functionality and also work with various other aspects of the whole stack. Our application will be powered by &lt;a href=&#34;http://www.couchbase.com/&#34;&gt;Couchbase&lt;/a&gt;, a very fast and flexible NoSQL database that is exactly suited for an application like this.&lt;/p&gt;

&lt;p&gt;Note that this tutorial requires a reasonable amount of Java knowledge. Play! itself is mostly written in &lt;a href=&#34;http://www.scala-lang.org/&#34;&gt;Scala&lt;/a&gt; (and uses it for its templates), but I think it should be easy to grasp - at least for the part we&amp;rsquo;ll cover here.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve also added the code to a &lt;a href=&#34;https://github.com/daschl/couchplay/&#34;&gt;repository&lt;/a&gt; on GitHub for your convenience. You can find a tag for every post I&amp;rsquo;ll publish so you can just clone the repository and checkout the appropriate tag to follow along.&lt;/p&gt;

&lt;h2 id=&#34;about-the-stack&#34;&gt;About the stack&lt;/h2&gt;

&lt;p&gt;Our language of choice will be Java. I first thought about writing it in Scala, but then I realized that with Java I could attract a larger group of readers. Also, I did most of my past explorations in Scala, so this is a great opportunity for me to use the framework from the Java-side as well. The good thing is that the framework allows you to use both languages in parallel, so you can start out with one and then evolve if you need to.&lt;/p&gt;

&lt;p&gt;As I said, the play! framework is mostly written in Scala. As a result, the default template engine requires a bit of Scala knowledge, but for our examples here the concepts should not be too hard to learn.  If you come from a mostly servlet-oriented background I predict you a very refreshing look on how web applications can be built also (it is built on top of &lt;a href=&#34;http://netty.io/&#34;&gt;netty&lt;/a&gt; and &lt;a href=&#34;http://akka.io/&#34;&gt;akka&lt;/a&gt;). Once you get the hang of it, you think twice about going back. If you don&amp;rsquo;t believe me now, just follow along.&lt;/p&gt;

&lt;p&gt;The framework provides support for relational databases out of the box, but to make things more interesting we&amp;rsquo;re going to use a different database. Couchbase is a high-performant and flexible &amp;ldquo;NoSQL&amp;rdquo; database that is mostly used in real-time analytics, session stores and in general where you need sub-millisecond response times. At the end of the blog series you should have a good idea how you can use it for your own projects. Note that I also wrote a blog post on getting started with Couchbase on either &lt;a href=&#34;http://nitschinger.at/Getting-Started-with-Couchbase-and-PHP&#34;&gt;PHP&lt;/a&gt; and &lt;a href=&#34;http://nitschinger.at/Accessing-Couchbase-from-Scala&#34;&gt;Scala&lt;/a&gt;, so you might want to check them out. For this tutorial, we&amp;rsquo;re going to use the &lt;a href=&#34;http://www.couchbase.com/develop/java/next&#34;&gt;Couchbase Java SDK&lt;/a&gt;, which has everything built-in that we need.&lt;/p&gt;

&lt;p&gt;From here on I assume that you have Java 1.6 or later installed and included it in your &lt;code&gt;PATH&lt;/code&gt;. If you haven&amp;rsquo;t, there should be plenty of material available on the internet.&lt;/p&gt;

&lt;h2 id=&#34;installing-couchbase&#34;&gt;Installing Couchbase&lt;/h2&gt;

&lt;p&gt;Before we start digging into the framework, we need to stop for a second and install our backend database.&lt;/p&gt;

&lt;p&gt;Depending on your operating system, you have different choices available. Couchbase provides installers for Windows and Mac OS X, for Linux-based systems I&amp;rsquo;d recommend the package-manager installations. You can find all packages &lt;a href=&#34;http://www.couchbase.com/download&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We are going to use Couchbase 2.0, which is currently in developer preview (at the time of writing). Just download it, it is very stable and a beta release will be released soon. We are going to use this version because it includes a mechanism called &amp;ldquo;views&amp;rdquo; that allows us to query our data in a very flexible manner (if you&amp;rsquo;re familiar with the &lt;a href=&#34;http://en.wikipedia.org/wiki/MapReduce&#34;&gt;Map/Reduce-Pattern&lt;/a&gt;, this is the method we&amp;rsquo;re going to use here). We&amp;rsquo;ll cover all of those aspects in a later post.&lt;/p&gt;

&lt;p&gt;After the installation has finished, open your browser, head over to &lt;code&gt;http://localhost:8091&lt;/code&gt; and click through the setup wizard. You can go with the default settings, just make sure to give it a reasonable amount of RAM. If you run into trouble, the official &lt;a href=&#34;http://www.couchbase.com/docs/couchbase-manual-2.0/couchbase-getting-started-install.html&#34;&gt;docs&lt;/a&gt; are there to help you out.&lt;/p&gt;

&lt;h2 id=&#34;setting-up-our-play-project&#34;&gt;Setting up our play! project&lt;/h2&gt;

&lt;p&gt;Now that we have our database installed, it&amp;rsquo;s time to set up the actual play! project. Go to &lt;a href=&#34;http://www.playframework.org/&#34;&gt;their official website&lt;/a&gt; and download the current stable release (2.0.2 at the time of writing).&lt;/p&gt;

&lt;p&gt;After the download has finished, unpack the zipfile. Copy it over to a place where it doesn&amp;rsquo;t get accidentally deleted and add it to your &lt;code&gt;PATH&lt;/code&gt;. Adding it to the &lt;code&gt;PATH&lt;/code&gt; here is pure convenience as I don&amp;rsquo;t like to remember the full path everytime I need to run it.&lt;/p&gt;

&lt;p&gt;Now we can use the &lt;code&gt;play new&lt;/code&gt; command to setup a new project. I&amp;rsquo;m using Ubuntu Linux here, but the command also works the same on Windows (I haven&amp;rsquo;t tried it on a Mac but it shouldn&amp;rsquo;t be much different).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;michael@daschl:~$ play new couchplay
    _            _
_ __ | | __ _ _  _| |
| &#39;_ \| |/ _&#39; | || |_|
|  __/|_|\____|\__ (_)
|_|            |__/

play! 2.0.2, http://www.playframework.org

The new application will be created in /home/michael/couchplay

What is the application name?
&amp;gt; couchplay

Which template do you want to use for this new application?

1 - Create a simple Scala application
2 - Create a simple Java application
3 - Create an empty project

&amp;gt; 2

OK, application couchplay is created.

Have fun!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The application generator asks you for an application name and if you want to either generate a Scala or Java application. You don&amp;rsquo;t have to choose the language for your final application here, it only wants to know in what language it should generats the sample controller for example.&lt;/p&gt;

&lt;p&gt;To make sure it&amp;rsquo;s up and running, change into the directory and run the &lt;code&gt;play&lt;/code&gt; command again. This should bring up the play console. For now, just type &lt;code&gt;run&lt;/code&gt; and point your browser to &lt;code&gt;http://localhost:9000&lt;/code&gt;. You should see the default welcome page of the framework.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;michael@daschl:~/couchplay$ play
Getting org.scala-sbt sbt_2.9.1 0.11.3 ...
:: retrieving :: org.scala-sbt#boot-app
    confs: [default]
    37 artifacts copied, 0 already retrieved (7245kB/44ms)
[info] Loading project definition from /home/michael/couchplay/project
[info] Set current project to couchplay (in build file:/home/michael/couchplay/)
    _            _
_ __ | | __ _ _  _| |
| &#39;_ \| |/ _&#39; | || |_|
|  __/|_|\____|\__ (_)
|_|            |__/

play! 2.0.2, http://www.playframework.org

&amp;gt; Type &amp;quot;help play&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt; Type &amp;quot;exit&amp;quot; or use Ctrl+D to leave this console.

[couchplay] $ run

[info] Updating {file:/home/michael/couchplay/}couchplay...
[info] Resolving org.hibernate.javax.persistence#hibernate-jpa-2.0-api;1.0.1.Fin                                                                                [info] Done updating.
--- (Running the application from SBT, auto-reloading is enabled) ---

[info] play - Listening for HTTP on port 9000...

(Server started, use Ctrl+D to stop and go back to the console...)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, the initial dependencies are resolved and loaded automatically. If you already have something running on port &lt;code&gt;9000&lt;/code&gt; (like &lt;a href=&#34;http://php-fpm.org/&#34;&gt;php-fpm&lt;/a&gt;), then you can use the &lt;code&gt;run [PORTNUM]&lt;/code&gt; command to specify a different port. There are lots of other possibilities here and we&amp;rsquo;ll cover some of them as we progress further. If you&amp;rsquo;re curious, you can type &lt;code&gt;help&lt;/code&gt; to see the available commands.&lt;/p&gt;

&lt;p&gt;You may experience a large response time (a few seconds) when you open up the page for the first time. This is because in development mode, play! compiles everything for you on the fly. If you don&amp;rsquo;t change anything, the next reload should be pretty fast. Since we only modify short bits of code between every refresh, the compiling times should not be an issue. In production, everything is precompiled anyway. If you look on your console, you can see that the files have been compiled automatically for you:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[info] Compiling 4 Scala sources and 2 Java sources to /home/michael/couchplay/target/scala-2.9.1/classes...
[info] play - Application started (Dev)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One last tip here: if you use &lt;code&gt;~run&lt;/code&gt; instead of &lt;code&gt;run&lt;/code&gt;, the framework will detect code changes immediately (when you save your file) and compile it on the fly. If you use &lt;code&gt;run&lt;/code&gt;, it will start compiling when you reload the page. As a result, when using &lt;code&gt;~run&lt;/code&gt; the compile times should be even less noticable since you also need some time to switch back and forth between your IDE and the browser. Also keep in mind that all this is handled for you and you don&amp;rsquo;t need to setup tomcat in your IDE and make sure everything is pushed correctly. If you are like me and have spent hours and hours of configuring eclipse and tomcat, this is pretty awesome news. You can of course still use Eclipse (or any other IDE), but you can concentrate on writing code, the rest will be done for you in the background.&lt;/p&gt;

&lt;h2 id=&#34;connecting-to-couchbase&#34;&gt;Connecting to Couchbase&lt;/h2&gt;

&lt;p&gt;Currently, our application doesn&amp;rsquo;t know about our backend database. Since play! doesn&amp;rsquo;t have built-in support for Couchbase, we&amp;rsquo;re going to use the Couchbase Java SDK to fill the gap.&lt;/p&gt;

&lt;p&gt;Couchbase thankfully provides a Maven repository, so we just need to define and load the dependency. Head over to the &lt;code&gt;project/Build.scala&lt;/code&gt; file and add the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;val appDependencies = Seq(
    &amp;quot;couchbase&amp;quot; % &amp;quot;couchbase-client&amp;quot; % &amp;quot;1.1-dp&amp;quot;
)

val main = PlayProject(appName, appVersion, appDependencies, mainLang = SCALA).settings(
    resolvers += &amp;quot;Couchbase Maven Repository&amp;quot; at &amp;quot;http://files.couchbase.com/maven2&amp;quot;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Back in the play console, hit &lt;code&gt;ctrl-d&lt;/code&gt; to stop the server and type &lt;code&gt;reload&lt;/code&gt; and &lt;code&gt;update&lt;/code&gt; to fetch the new dependencies. If everything finished without errors, type &amp;ldquo;~run&amp;rdquo; again.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[couchplay] $ reload
[info] Loading project definition from /home/michael/couchplay/project
[info] Set current project to couchplay (in build file:/home/michael/couchplay/)
[couchplay] $ update
[info] Updating {file:/home/michael/couchplay/}couchplay...
[info] Resolving org.hibernate.javax.persistence#hibernate-jpa-2.0-api;1.0.1.Fin                                                                                [info] downloading http://files.couchbase.com/maven2/couchbase/couchbase-client/1.1-dp/couchbase-client-1.1-dp.jar ...
[info]  [SUCCESSFUL ] couchbase#couchbase-client;1.1-dp!couchbase-client.jar (1821ms)
[info] downloading http://repo.typesafe.com/typesafe/releases/org/jboss/netty/netty/3.2.0.Final/netty-3.2.0.Final.jar ...
[info]  [SUCCESSFUL ] org.jboss.netty#netty;3.2.0.Final!netty.jar(bundle) (3661ms)
[info] downloading http://repo.typesafe.com/typesafe/releases/org/codehaus/jettison/jettison/1.1/jettison-1.1.jar ...
[info]  [SUCCESSFUL ] org.codehaus.jettison#jettison;1.1!jettison.jar(bundle) (828ms)
[info] downloading http://repo.typesafe.com/typesafe/releases/commons-codec/commons-codec/1.5/commons-codec-1.5.jar ...
[info]  [SUCCESSFUL ] commons-codec#commons-codec;1.5!commons-codec.jar (835ms)
[info] downloading http://repo.typesafe.com/typesafe/releases/spy/spymemcached/2.8.1/spymemcached-2.8.1.jar ...
[info]  [SUCCESSFUL ] spy#spymemcached;2.8.1!spymemcached.jar (1446ms)
[info] downloading http://repo.typesafe.com/typesafe/releases/org/apache/httpcomponents/httpcore/4.1.1/httpcore-4.1.1.jar ...
[info]  [SUCCESSFUL ] org.apache.httpcomponents#httpcore;4.1.1!httpcore.jar (1059ms)
[info] downloading http://repo.typesafe.com/typesafe/releases/org/apache/httpcomponents/httpcore-nio/4.1.1/httpcore-nio-4.1.1.jar ...
[info]  [SUCCESSFUL ] org.apache.httpcomponents#httpcore-nio;4.1.1!httpcore-nio.jar (1062ms)
[info] downloading http://repo.typesafe.com/typesafe/releases/stax/stax-api/1.0.1/stax-api-1.0.1.jar ...
[info]  [SUCCESSFUL ] stax#stax-api;1.0.1!stax-api.jar (1556ms)
[info] Done updating.
[success] Total time: 39 s, completed Jul 7, 2012 9:25:52 AM
[couchplay] $ ~run

--- (Running the application from SBT, auto-reloading is enabled) ---

[info] play - Listening for HTTP on port 9000...

(Server started, use Ctrl+D to stop and go back to the console...)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;m quite sure you wonder about the strange syntax we&amp;rsquo;ve been using to define our dependency. This is actually Scala code, since play! uses the awesome &lt;a href=&#34;http://www.scala-sbt.org/&#34;&gt;sbt&lt;/a&gt; to manage its dependencies (the play console also builds upon it). There is a good introduction &lt;a href=&#34;http://www.youtube.com/watch?v=V2rl62CZPVc&#34;&gt;video&lt;/a&gt; available if you want to learn more.&lt;/p&gt;

&lt;p&gt;The dependency is now in place, but we also need to connect to the database when the application starts and disconnect from it when it stops. If we&amp;rsquo;d use the databases supported by the framework, this would be handled for us (but that&amp;rsquo;s half the fun, right?). Since this is not the case, we need to &amp;ldquo;hook&amp;rdquo; into some kind of &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt; events.&lt;/p&gt;

&lt;p&gt;Play! provides us with something called the &lt;a href=&#34;http://www.playframework.org/documentation/2.0.2/JavaGlobal&#34;&gt;application Global object&lt;/a&gt; that has methods we can override. Create a new file called &lt;code&gt;Global.java&lt;/code&gt; inside the &lt;code&gt;app&lt;/code&gt; directory and insert the following.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import play.*;

import datasources.Couchbase;

public class Global extends GlobalSettings {

    public void onStart(Application app) {
        Logger.info(&amp;quot;Application started&amp;quot;);
        Couchbase.connect();
    }

    public void  onStop(Application app) {
        Logger.info(&amp;quot;Application stopped&amp;quot;);
        Couchbase.disconnect();
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We override the &lt;code&gt;onStart&lt;/code&gt; and &lt;code&gt;onStop&lt;/code&gt; methods to place our custom connect logic in there (and do some logging as well). We make use of a &lt;code&gt;Couchabase&lt;/code&gt; connection class to abstract our connection logic, so we&amp;rsquo;d better write that one too. Create a new file called &lt;code&gt;Couchbase.java&lt;/code&gt; inside the &lt;code&gt;app/datasources&lt;/code&gt; directory (which you also need to create).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package datasources;

import java.net.URI;
import java.util.LinkedList;
import java.util.List;
import java.io.IOException;
import java.util.concurrent.TimeUnit;

import play.*;
import com.couchbase.client.CouchbaseClient;

/**
* The `Couchbase` class acts a simple connection manager for the `CouchbaseClient`
* and makes sure that only one connection is alive throughout the application.
*
* You may want to extend and harden this implementation in a production environment.
*/
public final class Couchbase {

    /**
    * Holds the actual `CouchbaseClient`.
    */
    private static CouchbaseClient client = null;

    /**
    * Connects to Couchbase based on the configuration settings.
    *
    * If the database is not reachable, an error message is written and the
    * application exits.
    */
    public static boolean connect() {
        String hostname = Play.application().configuration().getString(&amp;quot;couchbase.hostname&amp;quot;);
        String port = Play.application().configuration().getString(&amp;quot;couchbase.port&amp;quot;);
        String bucket = Play.application().configuration().getString(&amp;quot;couchbase.bucket&amp;quot;);
        String password = Play.application().configuration().getString(&amp;quot;couchbase.password&amp;quot;);

        List&amp;lt;URI&amp;gt; uris = new LinkedList&amp;lt;URI&amp;gt;();
        uris.add(URI.create(&amp;quot;http://&amp;quot;+hostname+&amp;quot;:&amp;quot;+port+&amp;quot;/pools&amp;quot;));


        try {
            client = new CouchbaseClient(uris, bucket, password);
        } catch(IOException e) {
            Logger.error(&amp;quot;Error connection to Couchbase: &amp;quot; + e.getMessage());
            System.exit(0);
        }

        return true;
    }

    /**
    * Disconnect from Couchbase.
    */
    public static boolean disconnect() {
        if(client == null) {
            return false;
        }

        return client.shutdown(3, TimeUnit.SECONDS);
    }

    /**
    * Returns the actual `CouchbaseClient` connection object.
    *
    * If no connection is established yet, it tries to connect. Note that
    * this is just in place for pure convenience, make sure to connect explicitly.
    */
    public static CouchbaseClient getConnection() {
        if(client == null) {
            connect();
        }

        return client;
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We basically define a &lt;code&gt;connect&lt;/code&gt; and a &lt;code&gt;disconnect&lt;/code&gt; method, which get called from our &lt;code&gt;Gobal.java&lt;/code&gt; class. Inside the &lt;code&gt;connect&lt;/code&gt; method we read configuration settings (more on that shortly) and then try to open the Couchbase connection. The &lt;code&gt;disconnect&lt;/code&gt; method waits 3 seconds to finish any queued operations and then disconnects. Also, we provide a &lt;code&gt;getConnection()&lt;/code&gt; method that returns the actual instance of the client object (which we&amp;rsquo;ll use later in our models).&lt;/p&gt;

&lt;p&gt;It is always a good idea to just open one connection for the whole lifecycle instead of opening a new connection every time a request comes in. This removes unneeded handshake-latency and should therefore improve the overall performance of the application.&lt;/p&gt;

&lt;p&gt;You may have noticed the various &lt;code&gt;Play.application().configuration().getString();&lt;/code&gt; calls. With these method calls you can read the values from your &lt;code&gt;conf/application.conf&lt;/code&gt; configuration file. By defining your connection settings there instead of the actual implementation, you can easily swap the settings if you deploy your application into production. More on the configuration file can be found &lt;a href=&#34;http://www.playframework.org/documentation/2.0.2/Configuration&#34;&gt;here&lt;/a&gt;. To define the settings we need, open your &lt;code&gt;application.conf&lt;/code&gt; file and add the following to the end (or somewhere in between):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Couchbase configuration
# ~~~~~
couchbase.hostname=&amp;quot;localhost&amp;quot;
couchbase.port=8091
couchbase.bucket=&amp;quot;default&amp;quot;
couchbase.password=&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we have everything in place to configure the settings and connect to the database. If you start the server again and load the page for the first time, you can see the debug output of the Couchbase SDK:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[info] application - Application started
2012-07-17 19:12:43.788 INFO com.couchbase.client.CouchbaseConnection:  Added {QA sa=/127.0.0.1:11210, #Rops=0, #Wops=0, #iq=0, topRop=null, topWop=null, toWrite=0, interested=0} to connect queue
2012-07-17 19:12:43.789 INFO com.couchbase.client.CouchbaseClient:  viewmode property isn&#39;t defined. Setting viewmode to production mode
2012-07-17 19:12:43.790 INFO com.couchbase.client.ViewConnection:  Added localhost/127.0.0.1:8092 to connect queue
2012-07-17 19:12:43.794 INFO com.couchbase.client.CouchbaseConnection:  Connection state changed for sun.nio.ch.SelectionKeyImpl@1d179fb
[info] play - Application started (Dev)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that since we haven&amp;rsquo;t defined a &lt;code&gt;viewmode&lt;/code&gt; setting, Couchbase assumes you&amp;rsquo;re running in production mode. You can change this setting, but I haven&amp;rsquo;t done this here (we&amp;rsquo;ll push our views into production before we use them inside the application).&lt;/p&gt;

&lt;p&gt;If you press &lt;code&gt;ctrl+d&lt;/code&gt; to stop the application, you can see that Couchbase correctly closes the connection:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[info] application - Application stopped
2012-07-17 19:24:52.216 INFO com.couchbase.client.CouchbaseConnection:  Shut down Couchbase client
2012-07-17 19:24:52.226 INFO com.couchbase.client.ViewConnection:  Shut down Couchbase client
2012-07-17 19:24:52.226 INFO com.couchbase.client.ViewNode:  Couchbase I/O reactor terminated
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;This post hopefully gave you an overview of what we&amp;rsquo;re going to implement, namely a real-time web chat application. We&amp;rsquo;re going to use Java, the play! framework and Couchbase. Also we&amp;rsquo;ve set up the database, the project itself and connected both. In the next post we&amp;rsquo;ll build on this foundation and add session management to let users sign in and out.&lt;/p&gt;

&lt;p&gt;As always, comment below if you have any thoughts on this!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to store PHP sessions in Couchbase</title>
      <link>http://nitschinger.at/How-to-store-PHP-sessions-in-Couchbase/</link>
      <pubDate>Mon, 25 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>http://nitschinger.at/How-to-store-PHP-sessions-in-Couchbase/</guid>
      <description>

&lt;p&gt;My &lt;a href=&#34;http://nitschinger.at/Using-Couchbase-as-a-flexible-session-store&#34;&gt;last post&lt;/a&gt; about storing sessions in Couchbase was more of a general overview on what&amp;rsquo;s possible. This post builds on the foundations and principles discussed and shows you various ways to store PHP sessions in Couchbase. We start out simple by using the built-in &lt;code&gt;session&lt;/code&gt; ini -directives, then head over to the brand new &lt;a href=&#34;http://php.net/manual/en/class.sessionhandlerinterface.php&#34;&gt;SessionHandlerInterface&lt;/a&gt; introduced in PHP 5.4 and finally implement it completely on our own. We&amp;rsquo;ll see how both the complexity and flexibility increase during each of our approaches. In the end it&amp;rsquo;s up to you which method seems appropriate for your use-case.&lt;/p&gt;

&lt;h2 id=&#34;session-handler-and-memcached&#34;&gt;session_handler and memcached&lt;/h2&gt;

&lt;p&gt;This approach has one big advantage: it&amp;rsquo;s dead easy to setup and use. Let&amp;rsquo;s tackle the good parts first and then discuss the weaknesses of this approach.&lt;/p&gt;

&lt;p&gt;We are using the protocol-compatible nature of Couchbase and let the built-in &lt;code&gt;memcached&lt;/code&gt; session handler do the job for us. So the first thing we need to do (apart from installing Couchbase) is install the &lt;code&gt;php5-memcached&lt;/code&gt; extension. If you&amp;rsquo;re on a debian-based system it&amp;rsquo;s as easy as running&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo aptitude install php5-memcached
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to make sure that the extension is correctly installed, check the module on the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ php -m | grep mem
memcached
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we need to tell PHP to use the &lt;code&gt;memcached&lt;/code&gt; session handler and where it should save the data. To do this, we need to modify the &lt;code&gt;php.ini&lt;/code&gt; file accordingly. I&amp;rsquo;m using &lt;a href=&#34;http://httpd.apache.org/&#34;&gt;Apache&lt;/a&gt; on &lt;a href=&#34;http://www.ubuntu.com/&#34;&gt;Ubuntu&lt;/a&gt;, so my &lt;code&gt;php.ini&lt;/code&gt; is located under &lt;code&gt;/etc/php5/apache2/php.ini&lt;/code&gt;. Find and replace the following settings with their new values:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Session]
session.save_handler = memcached
session.save_path = &amp;quot;localhost:11211&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, you want to replace &lt;code&gt;localhost&lt;/code&gt; with a different address if Couchbase is not running on your local machine. Couchbase uses &lt;code&gt;11211&lt;/code&gt; as its &lt;a href=&#34;http://www.couchbase.com/docs/couchbase-manual-2.0/couchbase-network-ports.html&#34;&gt;data port&lt;/a&gt;, just like memcached. Now we have everything in place, restart the server to get it up and running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo service apache2 restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The infrastructure is in place, so we can now start working with the session store through the &lt;code&gt;$_SESSION&lt;/code&gt; superglobal. Here is a short script that shows how you can work with it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

// Start the session.
session_start();

// Dump the session to the screen.
var_dump($_SESSION);

// Define some data to store.
class User { public $firstname = &amp;quot;hoo&amp;quot;; }
$user = new User();

// Store it in the session object.
$_SESSION[&#39;user&#39;] = $user;
$_SESSION[&#39;randomStuff&#39;] = array(1 =&amp;gt; &#39;blue&#39;, &#39;couchbase&#39; =&amp;gt; &#39;rocks&#39;);

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is not rocket science and exactly the way you&amp;rsquo;d handle sessions through the interface provided by PHP. Check out the &lt;a href=&#34;http://php.net/manual/en/reserved.variables.session.php&#34;&gt;documentation&lt;/a&gt; if you haven&amp;rsquo;t used it yet.&lt;/p&gt;

&lt;p&gt;So, how does PHP store the data in Couchbase? The first thing to note is that all your session data is stored in the &lt;code&gt;default&lt;/code&gt; bucket and uses a binary format (like how it would be stored in memcached). If you inspect the output from our example above, you can see that the user object is actually stored as an object so PHP uses the built-in serializer (if not configured differently) to store the session data. If you look in the bucket, you can see a key like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;memc.sess.key.a6sgl1oldchknlsj8mc3c37b11
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first part is the prefix and the cryptic string at the end is the PHP session identifier which is carried along by the client through a cookie. If you fire up firebug or chrome and inspect the headers, you can see the corresponding &lt;code&gt;PHPSESSID&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Cookie:PHPSESSID=a6sgl1oldchknlsj8mc3c37b11;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The stored document looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
&amp;quot;_id&amp;quot;: &amp;quot;memc.sess.key.a6sgl1oldchknlsj8mc3c37b11&amp;quot;,
&amp;quot;_rev&amp;quot;: &amp;quot;10-000003794c342b870000009800000000&amp;quot;,
&amp;quot;$flags&amp;quot;: 0,
&amp;quot;$expiration&amp;quot;: 0,
&amp;quot;$att_reason&amp;quot;: &amp;quot;invalid_json&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since the data is not stored in JSON format, you can&amp;rsquo;t inspect it from the Couchbase GUI directly. So why did I include it here anyway? Look at the &lt;code&gt;$expiration&lt;/code&gt; key. It is important to note that we don&amp;rsquo;t specify an expiration time here, because this is handled through PHP. So if you want to change the expiration time you have to change the appropriate setting using the &lt;code&gt;session.cache_expire&lt;/code&gt; directive. This is different to the approach we&amp;rsquo;ll cover at the end of the article where we implement everything on our own and don&amp;rsquo;t rely on those built-in features.&lt;/p&gt;

&lt;p&gt;This approach is very simple and may suit your needs perfectly, but it comes with some limitations that you need to keep in mind.&lt;/p&gt;

&lt;p&gt;Since the data is not stored in JSON format, you can&amp;rsquo;t use the awesome map/reduce querying mechanisms that Couchbase 2.0 provides. Also, you can&amp;rsquo;t change the bucket or key-names. Another problem is that you can&amp;rsquo;t make use of the automatic, dynamic reconfiguration mechanisms provided by Couchbase. So if the server at the ip-address goes down, PHP won&amp;rsquo;t be able to store sessions in the cluster anymore. Couchbase provides an optional component called &lt;a href=&#34;http://www.couchbase.com/docs/moxi-manual-1.8/moxi-introduction.html&#34;&gt;Moxi&lt;/a&gt; that acts as a proxy between your client and the couchbase cluster and is able to handle such situations. So if you&amp;rsquo;re not able to use the approaches shown in the rest of this post you definitely need to take a look at it!&lt;/p&gt;

&lt;h2 id=&#34;more-flexibility-through-the-sessionhandlerinterface&#34;&gt;More flexibility through the SessionHandlerInterface&lt;/h2&gt;

&lt;p&gt;PHP 5.4 provides a brand new interface called &lt;a href=&#34;http://www.php.net/manual/en/class.sessionhandlerinterface.php&#34;&gt;SessionHandlerInterface&lt;/a&gt; through which we can implement our own session handler. This way, we can use the familiar and built-in &lt;code&gt;$_SESSION&lt;/code&gt; superglobal and make use of the advanced Couchbase functionality.&lt;/p&gt;

&lt;p&gt;We need to implement the following interface:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SessionHandlerInterface {
    abstract public bool close ( void )
    abstract public bool destroy ( string $session_id )
    abstract public bool gc ( string $maxlifetime )
    abstract public bool open ( string $save_path , string $session_id )
    abstract public string read ( string $session_id )
    abstract public bool write ( string $session_id , string $session_data )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following implementation is not meant to be used 1:1 in production, since I haven&amp;rsquo;t tested every aspect of it. Nevertheless it should give you an idea on how such a implementation may look like. Note that you need to have the &lt;code&gt;php-ext-couchbase&lt;/code&gt; extension installed. If you are not sure on how to do this, see my post about &lt;a href=&#34;http://nitschinger.at/Getting-Started-with-Couchbase-and-PHP&#34;&gt;Getting Started with Couchbase and PHP&lt;/a&gt;. You can also find a github gist &lt;a href=&#34;https://gist.github.com/2986942&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

/**
* A reference implementation of a custom Couchbase session handler.
*/
class CouchbaseSessionHandler implements SessionHandlerInterface {

    /**
    * Holds the Couchbase connection.
    */
    protected $_connection = null;

    /**
    * The Couchbase host and port.
    */
    protected $_host = null;

    /**
    * The Couchbase bucket name.
    */
    protected $_bucket = null;

    /**
    * The prefix to be used in Couchbase keynames.
    */
    protected $_keyPrefix = &#39;session:&#39;;

    /**
    * Define a expiration time of 10 minutes.
    */
    protected $_expire = 600;

    /**
    * Set the default configuration params on init.
    */
    public function __construct($host = &#39;127.0.0.1:8091&#39;, $bucket = &#39;default&#39;) {
        $this-&amp;gt;_host = $host;
        $this-&amp;gt;_bucket = $bucket;
    }

    /**
    * Open the connection to Couchbase (called by PHP on `session_start()`)
    */
    public function open($savePath, $sessionName) {
        $this-&amp;gt;_connection = new Couchbase($this-&amp;gt;_host, $this-&amp;gt;_bucket);
        return $this-&amp;gt;_connection ? true : false;
    }

    /**
    * Close the connection. Called by PHP when the script ends.
    */
    public function close() {
        unset($this-&amp;gt;_connection);
        return true;
    }

    /**
    * Read data from the session.
    */
    public function read($sessionId) {
        $key = $this-&amp;gt;_keyPrefix . $sessionId;
        $result = $this-&amp;gt;_connection-&amp;gt;get($key);

        return $result ?: null;
    }

    /**
    * Write data to the session.
    */
    public function write($sessionId, $sessionData) {
        $key = $this-&amp;gt;_keyPrefix . $sessionId;
        if(empty($sessionData)) {
            return false;
        }

        $result = $this-&amp;gt;_connection-&amp;gt;set($key, $sessionData, $this-&amp;gt;_expire);
        return $result ? true : false;
    }

    /**
    * Delete data from the session.
    */
    public function destroy($sessionId) {
        $key = $this-&amp;gt;_keyPrefix . $sessionId;
        $result = $this-&amp;gt;_connection-&amp;gt;delete($key);

        return $result ? true : false;
    }

    /**
    * Run the garbage collection.
    */
    public function gc($maxLifetime) {
        return true;
    }

}

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s not that complex as it may look like in the first place. At the top of the class we&amp;rsquo;re defining and initializing some variables that hold our configuration. We don&amp;rsquo;t have to do this, but this way we&amp;rsquo;re getting a bit more flexibility and can pass custom settings through the constructor.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;open&lt;/code&gt; method takes two arguments (according to the interface definition), one for the &lt;code&gt;savePath&lt;/code&gt; and one for the &lt;code&gt;sessionName&lt;/code&gt;. These arguments correspond to the &lt;code&gt;ini&lt;/code&gt;-settings, but we ignore them and make use of our configuration variables passed through the constructor. Inside the &lt;code&gt;open&lt;/code&gt; method we initialize the connection to Couchbase and store the connection resource in a protected variable for later use.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;close&lt;/code&gt; method is called when the PHP-script ends. We just unset the resource, since there is nothing more to do in our case. If you use a file storage engine you&amp;rsquo;d want to close the file-handle here.&lt;/p&gt;

&lt;p&gt;From now on, we always get the &lt;code&gt;sessionId&lt;/code&gt; passed as an argument. The &lt;code&gt;read&lt;/code&gt; method takes it and adds zhr &lt;code&gt;keyPrefix&lt;/code&gt; we&amp;rsquo;ved defined to the beginning of the string. It then tries to read the record from Couchbase and returns it when it&amp;rsquo;s found. Note that we return &lt;code&gt;null&lt;/code&gt; here, but since &lt;code&gt;$_SESSION&lt;/code&gt; is an array, you&amp;rsquo;ll always work with (empty) arrays on the caller-side.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;write&lt;/code&gt; method gets the payload as an additional argument since we need to store it somewhere. Note that the data is already serialized, so don&amp;rsquo;t try to use &lt;code&gt;json_encode&lt;/code&gt; or something like this before storing it in Couchbase (that&amp;rsquo;s what I did and then wondered what the hell is wrong unless someone on IRC pointed out that you can&amp;rsquo;t control the serialization mechanism on your own here). As a result, the &lt;code&gt;read&lt;/code&gt; method expects the serialized data as a string and fails silently if you return something else.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;destroy&lt;/code&gt; method should not contain any surprises, we just delete the document based on the key if it exists. The &lt;code&gt;gc&lt;/code&gt; method is not used here, because Couchbase handles the garbage collection for us. If you store your data in files, you want to clean up old sessions here.&lt;/p&gt;

&lt;p&gt;Now we can use our handler and do some work with it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
$handler = new CouchbaseSessionHandler();

session_set_save_handler($handler, true);
session_start();

var_dump($_SESSION);

$_SESSION[&#39;foo&#39;] = null;
$_SESSION[&#39;data&#39;] = array(
    &#39;couchbase&#39; =&amp;gt; &#39;rocks&#39;
);
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On the first load, the &lt;code&gt;$_SESSION&lt;/code&gt; variable is of course empty. When you reload the page, you should see output like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;array(2) { &#39;foo&#39; =&amp;gt; NULL &#39;data&#39; =&amp;gt; array(1) { &#39;couchbase&#39; =&amp;gt; string(5) &amp;quot;rocks&amp;quot; } }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the Couchbase GUI, we can see that a key has been added to the &lt;code&gt;default&lt;/code&gt; bucket named something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;session:a6sgl1oldchknlsj8mc3c37b11
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Couchbase provides a handy tool on the command line to inspect our documents - it&amp;rsquo;s called &lt;code&gt;cbc&lt;/code&gt;. We can use it to fetch the contents of our key and peek inside:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cbc cat session:a6sgl1oldchknlsj8mc3c37b11
&amp;quot;session:a6sgl1oldchknlsj8mc3c37b11&amp;quot; Size 45 Flags 0x0 CAS 0x9d394b19130a0000
foo|N;data|a:1:{s:9:&amp;quot;couchbase&amp;quot;;s:5:&amp;quot;rocks&amp;quot;;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see that the PHP session handler still stores the data in a serialized way (you can also &lt;code&gt;var_dump()&lt;/code&gt; the content of the &lt;code&gt;$sessionData&lt;/code&gt; variable handed over to our &lt;code&gt;write()&lt;/code&gt; method to see the serialized data string).&lt;/p&gt;

&lt;p&gt;This approach is a huge leap forward because it let&amp;rsquo;s us shape the interaction with Couchbase the way we want it to (and we can leverage all commands from the Couchbase PHP-SDK instead of just using a subset provided by the memcached extension). Also, we use the expiration mechanism provided by Couchbase and don&amp;rsquo;t have to handle it ourselves. Finally, by using the &lt;code&gt;php-ext-couchbase&lt;/code&gt; SDK, we don&amp;rsquo;t need to use Moxi anymore because this is all handled for us underneath by the &lt;code&gt;libcouchbase&lt;/code&gt; C library. There is only one limitation left: we still can&amp;rsquo;t use map/reduce functionality because the documents aren&amp;rsquo;t stored in JSON format. To accomplish this, we&amp;rsquo;re getting rid of the PHP session handler altogether and implement it for ourselves.&lt;/p&gt;

&lt;p&gt;Chances are that you&amp;rsquo;re still using PHP 5.3 or lower. If this is the case, you want to either use the &lt;a href=&#34;http://at.php.net/manual/en/class.sessionhandler.php&#34;&gt;old way&lt;/a&gt; to define your session handler or just read on (because the method described below isn&amp;rsquo;t bound to a specific PHP version).&lt;/p&gt;

&lt;h2 id=&#34;implementing-it-on-our-own&#34;&gt;Implementing it on our own&lt;/h2&gt;

&lt;p&gt;When we implement the session handling mechanism on our own, we can reuse all insights from above and also use &lt;a href=&#34;http://nitschinger.at/Handling-JSON-like-a-boss-in-PHP&#34;&gt;JSON&lt;/a&gt; instead of the PHP object serialization. Imagine we&amp;rsquo;re writing yet another PHP framework (don&amp;rsquo;t do that&amp;hellip;) and define a session interface like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
namespace framework\sessions;

interface SessionHandler {
    public function read($sessionId);
    public function write($sessionId, $data);
    public function delete($sessionId);
    public function check($sessionId);
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;read&lt;/code&gt;, &lt;code&gt;write&lt;/code&gt; and &lt;code&gt;delete&lt;/code&gt; methods should be clear what they&amp;rsquo;re doing. The &lt;code&gt;check&lt;/code&gt; method checks if the given key is found in the session store.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s again the full implementation, we&amp;rsquo;ll talk it through afterwards:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
namespace framework\sessions;

use Couchbase;

class CouchbaseSessionHandler implements SessionHandler {

    /**
    * Holds the Couchbase connection.
    */
    protected $_connection = null;
    /**
    * The prefix to be used in Couchbase keynames.
    */
    protected $_keyPrefix = &#39;session:&#39;;

    /**
    * Define a expiration time of 10 minutes.
    */
    protected $_expire = 600;

    /**
    * Currently in development mode? Used for view loading.
    */
    protected $_development = null;

    /**
    * Connect to Couchbase.
    */
    public function __construct($host = &#39;127.0.0.1:8091&#39;, $bucket = &#39;default&#39;, $dev = true) {
            $this-&amp;gt;_development = $dev;
            $this-&amp;gt;_connection = new Couchbase($host, $bucket);
            return $this-&amp;gt;_connection ? true : false;
    }

    /**
    * Read the document for the given `sessionId`.
    */
    public function read($sessionId) {
        $key = $this-&amp;gt;_keyPrefix . $sessionId;

        $data = $this-&amp;gt;_connection-&amp;gt;get($key);
        return $data ? json_decode($data, true) : null;
    }

    /**
    * Write the data.
    */
    public function write($sessionId, $data) {
        $key = $this-&amp;gt;_keyPrefix . $sessionId;
        $data = $data + array(&#39;type&#39; =&amp;gt; &#39;session&#39;);

        return $this-&amp;gt;_connection-&amp;gt;set($key, json_encode($data), $this-&amp;gt;_expire);
    }

    /**
    * Delete the data for the given `sessionId`.
    */
    public function delete($sessionId) {
        $key = $this-&amp;gt;_keyPrefix . $sessionId;

        return $this-&amp;gt;_connection-&amp;gt;delete($key);
    }

    /**
    * Check if a document exists.
    **/
    public function check($sessionId) {
        $key = $this-&amp;gt;_keyPrefix . $sessionId;
        return $this-&amp;gt;_connection-&amp;gt;get($key) ? true : false;
    }

}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This implementation is pretty basic and should give you just an idea what&amp;rsquo;s possible. Since we&amp;rsquo;re storing JSON in Couchbase, you can get fancy and implement the &lt;code&gt;read&lt;/code&gt; and &lt;code&gt;check&lt;/code&gt; method not only on the &lt;code&gt;sessionId&lt;/code&gt; level, but also do fine-grained inspection of the keys inside the JSON document.&lt;/p&gt;

&lt;p&gt;The code provided here is very similar to the example above, with only minor changes. The first one is that we open the connection on &lt;code&gt;__construct&lt;/code&gt; and don&amp;rsquo;t have a &lt;code&gt;gc&lt;/code&gt; method since we don&amp;rsquo;t need it here. Inside &lt;code&gt;read&lt;/code&gt; and &lt;code&gt;write&lt;/code&gt; we make use of &lt;code&gt;json_encode&lt;/code&gt; and &lt;code&gt;json_decode&lt;/code&gt; to convert the PHP payload into JSON. The &lt;code&gt;check&lt;/code&gt; method works in a similar fashion to &lt;code&gt;read&lt;/code&gt; but returns &lt;code&gt;true/false&lt;/code&gt; instead of the actual data.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s run some code against our implementation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
use framework\sessions\CouchbaseSessionHandler;

/**
* Init the Handler.
*/
$handler = new CouchbaseSessionHandler();

/**
* Generate a Session ID for testing purposes.
*/
$sessionId = uniqid();

/**
* Store and retreive.
*/
$data = array(&#39;couchbase&#39; =&amp;gt; &#39;rocks&#39;);

// Write some data
$handler-&amp;gt;write($sessionId, $data);

// Returns the array
var_dump($handler-&amp;gt;read($sessionId));

// Returns true
var_dump($handler-&amp;gt;check($sessionId));

// Delete the document
$handler-&amp;gt;delete($sessionId);

// Returns NULL
var_dump($handler-&amp;gt;read($sessionId));

// Returns false
var_dump($handler-&amp;gt;check($sessionId));

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you comment out the &lt;code&gt;delete&lt;/code&gt; part you can see that the document is stored as JSON in Couchbase. On the next request, you don&amp;rsquo;t need the &lt;code&gt;write&lt;/code&gt; call anymore since the data is loaded directly from Couchbase.&lt;/p&gt;

&lt;p&gt;As a side note, my original idea was to implement a &lt;code&gt;clear&lt;/code&gt; method that deletes all stored session documents. This is a perfect use-case for a view, but since the PHP extension with view support is still in a developer preview, &lt;a href=&#34;http://www.couchbase.com/issues/browse/PCBC-76&#34;&gt;something went wrong&lt;/a&gt;. When this issue is resolved I&amp;rsquo;ll write another blog post focusing on handling views. If you want to implement the &lt;code&gt;clear&lt;/code&gt; method now, you can workaround &lt;code&gt;memcached&lt;/code&gt;-style and maintain a separate document that just holds all keys of the current sessions. You can load this one and then delete all fetched keys.&lt;/p&gt;

&lt;h2 id=&#34;final-thoughts&#34;&gt;Final thoughts&lt;/h2&gt;

&lt;p&gt;There are lots of possibilities on how you can use Couchbase to store your PHP sessions. If you just want to switch to Couchbase on the backend and don&amp;rsquo;t want to touch your code at all, the first option is for you. If you&amp;rsquo;ve used the built-in PHP session handling mechanisms and want to switch to a much more powerful storage engine, the second method may be a good fit. Finally, if you&amp;rsquo;re using a PHP framework that uses its own adapters the last method provides the most flexibility and can be modified to suit all your needs.&lt;/p&gt;

&lt;p&gt;Feel free to share your opinions below!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Couchbase as a flexible session store</title>
      <link>http://nitschinger.at/Using-Couchbase-as-a-flexible-session-store/</link>
      <pubDate>Thu, 21 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>http://nitschinger.at/Using-Couchbase-as-a-flexible-session-store/</guid>
      <description>

&lt;p&gt;This post shows you how you can use the &lt;a href=&#34;http://www.couchbase.com&#34;&gt;Couchbase 2.0 server&lt;/a&gt; as a flexible session store. What do I mean by flexible? Well, the combination of a highly scalable key-value store and the possibility to query your data through views allows you to gain unique insight inside your data in near realtime.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s look at some obstacles that we as application developers face and then see how we may solve them through Couchbase and its functionality. Of course, there are lots of ways to solve the same problem domain and the solutions provided here may not fit your problem as good as another technology/stack/software. I&amp;rsquo;d love to hear your opinions on this if you have a more elegant or flexible approach with a similar technology.&lt;/p&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The root of all session storage problems is that most web applications need to store some kind of state across pages and HTTP is by design &lt;a href=&#34;http://en.wikipedia.org/wiki/Stateless_protocol&#34;&gt;stateless&lt;/a&gt;. Therefore, we need to use some of the solutions that were invented to fill exactly this gap.&lt;/p&gt;

&lt;p&gt;As a developer, you can choose between storing session data either on the client-side or on the server-side. The client-side usually is a synonym for &lt;a href=&#34;http://en.wikipedia.org/wiki/HTTP_cookie&#34;&gt;cookies&lt;/a&gt;, but new technologies like &lt;a href=&#34;http://www.html5rocks.com/en/tutorials/offline/storage/&#34;&gt;HTML 5 client-side storage&lt;/a&gt; slowly emerge. Since cookies are stored on the client-side, they are not under complete control of the application and are therefore a possible security issue (and have size limitations that may be too small for your requirements). Solutions like &lt;a href=&#34;http://nitschinger.at/Session-Encryption-with-Lithium&#34;&gt;encryption&lt;/a&gt; and &lt;a href=&#34;http://en.wikipedia.org/wiki/HMAC&#34;&gt;HMAC&lt;/a&gt; exist, but still they lack the dynamic part of backend databases.&lt;/p&gt;

&lt;p&gt;On the server-side, you can usually choose between either a storage mechanism provided by your language/application server or a standalone software. For example, PHP provides a &lt;a href=&#34;http://www.php.net/manual/en/reserved.variables.session.php&#34;&gt;$_SESSION&lt;/a&gt; superglobal that stores data across requests.  In Java, you can work with &lt;a href=&#34;http://docs.oracle.com/cd/E17802_01/webservices/webservices/docs/1.6/api/javax/servlet/http/HttpSession.html&#34;&gt;HttpSession&lt;/a&gt; objects that allow you to do the same. All these mechanisms have one limitation: they are bound to the application container/webserver where the application is executed (therefore, they are called &amp;ldquo;sticky&amp;rdquo;). This means that when we need to use more than one application server to scale out at the same time and a &lt;a href=&#34;http://haproxy.1wt.eu/&#34;&gt;proxy&lt;/a&gt; (or load balancer) routes the requests randomly, it is possible that application server 1 has no idea what sessions are active on application server 2. As a result, a user may be logged out on the next request.&lt;/p&gt;

&lt;p&gt;To overcome this issue, we need to refactor the session handling part out of the application server into a standalone software. This allows our application servers to read and write from a central session store and as a result all of them share the same session state.&lt;/p&gt;

&lt;p&gt;One of the oldest and most used software solutions is &lt;a href=&#34;http://memcached.org/&#34;&gt;memcached&lt;/a&gt;. Memcached was developed by &lt;a href=&#34;http://www.danga.com/&#34;&gt;Danga Interactive&lt;/a&gt; to remedy the scalability issues at &lt;a href=&#34;http://www.livejournal.com/&#34;&gt;LiveJournal&lt;/a&gt;. It provides a distributed memory object caching system that has a key-based lookup mechanism and is fast because all data is stored in-memory. While memcached is amazing, it has one major limitation: it doesn&amp;rsquo;t persist the data on disk, so if one server goes down it may take some time to prime the cache again (called warm-up time).&lt;/p&gt;

&lt;p&gt;Some developers identified the additional need and started a full protocol-compatible project that was eventually called &lt;a href=&#34;http://en.wikipedia.org/wiki/Membase&#34;&gt;Membase&lt;/a&gt;. Aside from disk persistence, Membase provided more functionality like replication and live cluster reconfiguration. In 2011, Membase merged with CouchOone (the main driver behind &lt;a href=&#34;http://couchdb.apache.org/&#34;&gt;Apache CouchDB&lt;/a&gt;) to form &lt;a href=&#34;http://www.couchbase.com/&#34;&gt;Couchbase&lt;/a&gt;. Couchbase 1.8 is basically a renamed and slightly enhanced version of Membase, while Couchbase 2.0 (currently in developer preview release) adds incremental map/reduce, distributed indexing and cross-cluster replication.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s the short story on the origins of Couchbase. Note that there are lots of other awesome projects out there that help you achieve similar results, with &lt;a href=&#34;http://redis.io/&#34;&gt;Redis&lt;/a&gt;, &lt;a href=&#34;http://www.mongodb.org/&#34;&gt;MongoDB&lt;/a&gt; or &lt;a href=&#34;http://wiki.basho.com/&#34;&gt;Riak&lt;/a&gt; as the more prominent ones. Espcially Redis provides more powerful data structures on top of the &amp;ldquo;key/value&amp;rdquo; pattern and is definitely worth a look.&lt;/p&gt;

&lt;h2 id=&#34;implementation&#34;&gt;Implementation&lt;/h2&gt;

&lt;p&gt;The most simple use case that all session stores need to fulfill is - of course - to store and read session data in a very performant way. Most of the time, a unique session identifier is used as the key and some arbitrary payload as the value (for example usernames, ids or other related data).&lt;/p&gt;

&lt;p&gt;Note that this post aims to be a SDK-independent introduction to the topic, and the exact syntax may vary a bit from SDK to SDK (I&amp;rsquo;m using PHP here, but the syntax is nearly identical for the other SDKs). As the Couchbase API is similar to memcached, you should feel right at home if you&amp;rsquo;ve used it already (at least for the basic commands).&lt;/p&gt;

&lt;p&gt;Couchbase provides you with &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; methods to read and store a value identified by a unique key. The key should be a string and the value preferably a JSON object. You can also store serialized or binary data, but you then loose the ability to query it through views. On the &lt;code&gt;set&lt;/code&gt;-command, you can also pass in an optional expiration time, which comes in handy if you want to expire sessions automatically. Here&amp;rsquo;s an example to store a session document:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$user = array(
    &#39;username&#39; =&amp;gt; &#39;daschl&#39;,
    &#39;fullname&#39; =&amp;gt; &#39;Michael Nitschinger&#39;
);
$document = json_encode($user);
$couchbase-&amp;gt;set(&#39;user:1234&#39;, $document, 60);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This stores the given JSON document with the key &lt;code&gt;user:1234&lt;/code&gt; and a expiry time of 60 seconds in Couchbase. If you provide a expiry time that is larger than 30 days, Couchbase assumes that you pass in a unix timestamp (as a result, you can also pass absolute timestamps instead of relative ones).&lt;/p&gt;

&lt;p&gt;To read it back afterwards, you can use the &lt;code&gt;get&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$result = $couchbase-&amp;gt;get(&#39;user:1234&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to delete the key (for example to destroy the session), you can just remove the key:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$result = $couchbase-&amp;gt;delete(&#39;user:1234&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also just &amp;ldquo;touch&amp;rdquo; the document, so that the expiry key will be refreshed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$result = $couchbase-&amp;gt;touch(&#39;user:1234&#39;, 60);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course that&amp;rsquo;s just the simplest use case, but it is often enough to start with. If you&amp;rsquo;re curious, you can also &lt;a href=&#34;http://www.couchbase.com/docs/couchbase-sdk-php-1.1/api-reference-summary.html&#34;&gt;look into&lt;/a&gt; &lt;code&gt;getMulti&lt;/code&gt; and &lt;code&gt;setMulti&lt;/code&gt; to fetch more keys at the same time. One thing to remember is that when you specify an expiration time the key will only be deleted on the next fetch and not automatically. If you have a large batch of keys that you want to remove you need some kind of background script that touches them and makes sure they are actually deleted. Note that you can also wait for the Couchbase background job to delete the expired keys for you which runs every hour by default.&lt;/p&gt;

&lt;p&gt;Now, all of this can be done with nearly every key/value store out there (let&amp;rsquo;s leave the other capabilities like replication and persistence out for now). Since CouchOne merged with Membase, Couchbase 2.0 includes a key feature of CouchDB: accessing your data through views.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s assume we want to write an admin dashboard that allows us to monitor some of our application KPIs to help us understand the current load it is facing. To achieve this, we want to graph the following information in realtime:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How many users are currently active on the website.&lt;/li&gt;
&lt;li&gt;How many users are currently logged in.&lt;/li&gt;
&lt;li&gt;All users that come from Vienna/Austria (since our website sells local food here in Austria).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to achieve this, we need some way to differentiate if a user is just visiting the website or is logged in. Also, we need to store the location from where he is coming. Since this a more-or-less SDK-agnostic post, here are some hints how this could be done:&lt;/p&gt;

&lt;p&gt;When an anonymous user requests our website, we initiate a session that identifies him by his ip-address and does a lookup of his location based on some external information (for example the &lt;a href=&#34;http://www.maxmind.com/app/geolite&#34;&gt;MaxMind GeoLite database&lt;/a&gt;). We store a session identifier in a cookie and the following document in Couchbase:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Key: user:&amp;lt;SESSION-IDENTIFIER&amp;gt;
{
    &amp;quot;namespace&amp;quot;: &amp;quot;sessions&amp;quot;,
    &amp;quot;type&amp;quot;: &amp;quot;anonymous&amp;quot;,
    &amp;quot;lastSeen&amp;quot;: &amp;quot;&amp;lt;timestamp&amp;gt;&amp;quot;,
    &amp;quot;firstSeen&amp;quot;: &amp;quot;&amp;lt;timestamp&amp;gt;&amp;quot;,
    &amp;quot;remoteAddress&amp;quot;: &amp;quot;&amp;lt;ipaddr&amp;gt;&amp;quot;,
    &amp;quot;location&amp;quot;: &amp;quot;Vienna/Austria&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the user is logged in, we can clear the old session and instantiate a new one with more details about our user:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Key: user:&amp;lt;SESSION-IDENTIFIER&amp;gt;
{
    &amp;quot;namespace&amp;quot;: &amp;quot;sessions&amp;quot;,
    &amp;quot;type&amp;quot;: &amp;quot;user&amp;quot;,
    &amp;quot;userID&amp;quot;: &amp;quot;&amp;lt;userID&amp;gt;&amp;quot;,
    &amp;quot;lastSeen&amp;quot;: &amp;quot;&amp;lt;timestamp&amp;gt;&amp;quot;,
    &amp;quot;firstSeen&amp;quot;: &amp;quot;&amp;lt;timestamp&amp;gt;&amp;quot;,
    &amp;quot;remoteAddress&amp;quot;: &amp;quot;&amp;lt;ipaddr&amp;gt;&amp;quot;,
    &amp;quot;location&amp;quot;: &amp;quot;Vienna/Austria&amp;quot;,
    &amp;quot;name&amp;quot;: &amp;quot;&amp;lt;full name&amp;gt;&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The whole store, delete and update calls can be done with the basic methods described above, but what I want to concentrate on are the views. If you want to follow along, here is a short PHP script that populates the default bucket with some data to work with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
    // Open the Connection
    $couchbase = new Couchbase(&amp;quot;127.0.0.1:8091&amp;quot;);

    // Create some fake data with random hashes to simulate session identifiers.
    $data = array(
        &#39;68ea304124beaa7e648cc1327d793b0a&#39; =&amp;gt; array(
            &#39;namespace&#39; =&amp;gt; &#39;sessions&#39;,
            &#39;type&#39; =&amp;gt; &#39;anonymous&#39;,
            &#39;lastSeen&#39; =&amp;gt; time(),
            &#39;firstSeen&#39; =&amp;gt; time(),
            &#39;remoteAddress&#39; =&amp;gt; &#39;192.168.0.1&#39;,
            &#39;location&#39; =&amp;gt; &#39;Vienna/Austria&#39;
        ),
        &#39;6254b64d554a88b629bdbfc507d8c267&#39; =&amp;gt; array(
            &#39;namespace&#39; =&amp;gt; &#39;sessions&#39;,
            &#39;type&#39; =&amp;gt; &#39;anonymous&#39;,
            &#39;lastSeen&#39; =&amp;gt; time(),
            &#39;firstSeen&#39; =&amp;gt; time()-3600,
            &#39;remoteAddress&#39; =&amp;gt; &#39;10.10.10.10&#39;,
            &#39;location&#39; =&amp;gt; &#39;Berlin/Germany&#39;
        ),
        &#39;6148bae4fad02c0edfd7dbd8d54d79f1&#39; =&amp;gt; array(
            &#39;namespace&#39; =&amp;gt; &#39;sessions&#39;,
            &amp;quot;type&amp;quot; =&amp;gt; &amp;quot;user&amp;quot;,
            &amp;quot;userID&amp;quot; =&amp;gt; &amp;quot;1234&amp;quot;,
            &#39;lastSeen&#39; =&amp;gt; time()-7200,
            &#39;firstSeen&#39; =&amp;gt; time()-7800,
            &amp;quot;remoteAddress&amp;quot; =&amp;gt; &amp;quot;1.2.3.4&amp;quot;,
            &amp;quot;location&amp;quot; =&amp;gt; &amp;quot;Rome/Italy&amp;quot;,
            &amp;quot;name&amp;quot; =&amp;gt; &amp;quot;Luigi Manfrotto&amp;quot;
        ),
        &#39;4aeb265e299c41450dd6af813d0bef97&#39; =&amp;gt; array(
            &#39;namespace&#39; =&amp;gt; &#39;sessions&#39;,
            &amp;quot;type&amp;quot; =&amp;gt; &amp;quot;user&amp;quot;,
            &amp;quot;userID&amp;quot; =&amp;gt; &amp;quot;1104&amp;quot;,
            &#39;lastSeen&#39; =&amp;gt; time(),
            &#39;firstSeen&#39; =&amp;gt; time(),
            &amp;quot;remoteAddress&amp;quot; =&amp;gt; &amp;quot;2.3.4.5&amp;quot;,
            &amp;quot;location&amp;quot; =&amp;gt; &amp;quot;Vienna/Austria&amp;quot;,
            &amp;quot;name&amp;quot; =&amp;gt; &amp;quot;Hans Huber&amp;quot;
        )
    );

    // Store the documents in Couchbase
    foreach($data as $hash =&amp;gt; $document) {
        $couchbase-&amp;gt;set(&amp;quot;user:$hash&amp;quot;, json_encode($document));
    }
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have four documents to work with, we can start creating views from the Couchbase GUI. Head over to the &amp;ldquo;Views&amp;rdquo; section and click on &amp;ldquo;Create Development View&amp;rdquo;. The way Couchbase works is that you write your view queries in development mode on a subset of your documents and when you&amp;rsquo;re finished you can publish them to production. Since we have only four documents in the bucket, it won&amp;rsquo;t make any difference here.&lt;/p&gt;

&lt;p&gt;The name of our design document is &lt;code&gt;_design/dev_sessions&lt;/code&gt; and the first view is called &lt;code&gt;active&lt;/code&gt;. This one will return all currently logged in users:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function (doc) {
    if(doc.namespace == &#39;sessions&#39;) {
        emit(doc._id, doc);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you save it and click &lt;code&gt;Show Results&lt;/code&gt;, then you&amp;rsquo;ll see all four documents below that got matched. You can also click on the URI string above &lt;code&gt;?connection_timeout=60000&amp;amp;limit=10&amp;amp;skip=0&lt;/code&gt; to see the actual response in your browser. But what if we just want the total number of users logged in? We can use a built-in reduce function for that. In the &amp;ldquo;Reduce&amp;rdquo; textarea to the right just enter &lt;code&gt;_count&lt;/code&gt;. If you click save and then show the results again, you can see that we just got one document back with no key and just &lt;code&gt;4&lt;/code&gt; as the value.&lt;/p&gt;

&lt;p&gt;The nice thing here is that we can pass &lt;code&gt;reduce=true/false&lt;/code&gt; as a param and then get either the full response back or just the aggregated version. So this query gives us all active users on the website. Let&amp;rsquo;s write another view that just returns the logged in users:&lt;/p&gt;

&lt;p&gt;Modify the view like here and then click &lt;code&gt;Save As...&lt;/code&gt; and name it &lt;code&gt;logged_in&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function (doc) {
    if(doc.namespace == &#39;sessions&#39; &amp;amp;&amp;amp; doc.type == &#39;user&#39;) {
        emit(doc._id, doc);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The reduce function can be reused in the same way. As you can see, with just a bit more code in JavaScript we have another view that just returns the logged in users. Now we want to display a third diagram that displays all users from &lt;code&gt;Vienna/Austria&lt;/code&gt;. This time, we want to differentiate between anonymous and logged in users so that they can be displayed in two distinct graphs. Our map function may look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function (doc) {
    if(doc.namespace == &#39;sessions&#39; &amp;amp;&amp;amp; doc.location == &#39;Vienna/Austria&#39;) {
        emit(doc.type, 1);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Every time we find a document with the correct location, we emit a document with the key of either &lt;code&gt;anonymous&lt;/code&gt; or &lt;code&gt;user&lt;/code&gt;. As values we supply a value of &lt;code&gt;1&lt;/code&gt; since we can reuse that in our reduce function. The reduce function is again the built in &lt;code&gt;_count&lt;/code&gt; function, but this time we pass an additional param &lt;code&gt;group_level&lt;/code&gt; with a value of &lt;code&gt;1&lt;/code&gt; to our query. This way, Couchbase aggregates our data and returns a document like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Params: ?group_level=1&amp;amp;reduce=true&amp;amp;connection_timeout=60000&amp;amp;limit=10&amp;amp;skip=0
{
    &amp;quot;rows&amp;quot;: [
        {&amp;quot;key&amp;quot;:&amp;quot;anonymous&amp;quot;,&amp;quot;value&amp;quot;:1},
        {&amp;quot;key&amp;quot;:&amp;quot;user&amp;quot;,&amp;quot;value&amp;quot;:1}
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we insert another &lt;code&gt;user&lt;/code&gt; document the counter would display &lt;code&gt;2&lt;/code&gt;. If we don&amp;rsquo;t use the grouping level setting, Couchbase would just return the total amount of documents emitted.&lt;/p&gt;

&lt;p&gt;All of these views assumed that we have some kind of realtime polling to our backend, because the results didn&amp;rsquo;t include grouping by a distinct timestamp. In order to load a graph with meaningful results for the last hour, we can return it aggregated by timestamp (we can reuse the same &lt;code&gt;_count&lt;/code&gt; reduce function and the level 1 grouping):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function (doc) {
    if(doc.namespace == &#39;sessions&#39;) {
        emit(doc.lastSeen, 1);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An example output would look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Params: ?group_level=1&amp;amp;connection_timeout=60000&amp;amp;limit=10&amp;amp;skip=0
{
    &amp;quot;rows&amp;quot;:[
        {&amp;quot;key&amp;quot;:1339997680,&amp;quot;value&amp;quot;:1},
        {&amp;quot;key&amp;quot;:1340004880,&amp;quot;value&amp;quot;:3}
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, if we have record for the last year in our database it won&amp;rsquo;t make much sense to fetch them all on every request. If you look one entry below the &lt;code&gt;group_level&lt;/code&gt; param, you&amp;rsquo;ll find &lt;code&gt;startkey&lt;/code&gt; and &lt;code&gt;endkey&lt;/code&gt; options. With these two you can provide a timerange to fetch the results.&lt;/p&gt;

&lt;h2 id=&#34;performance&#34;&gt;Performance&lt;/h2&gt;

&lt;p&gt;I know that synthetic benchmarks never provide reproducible results in production environments, but they provide at least a rough estimation on how the application may be able to perform under certain conditions.&lt;/p&gt;

&lt;p&gt;Thankfully, &lt;a href=&#34;http://trondn.blogspot.co.at/&#34;&gt;Trond Norbye&lt;/a&gt; added a nice little program to &lt;a href=&#34;http://www.couchbase.com/develop/c/next&#34;&gt;libcouchbase&lt;/a&gt; that allows you to generate load on your Couchbase server and then analyze the response times directly on the console (of course you can get real-time metrics from the Couchbase GUI as well). The program is called &lt;code&gt;pillowfight&lt;/code&gt; and is distributed with the source of libcouchbase. It stores a bunch of keys (1000 by default) and then runs &amp;ldquo;mget&amp;rdquo; operations on them and measures the time they need to get returned. In order to run it, you need to compile it from source (which I&amp;rsquo;ll show in a later post but it&amp;rsquo;s not that hard if you are used to compiling on unix-based systems).&lt;/p&gt;

&lt;p&gt;On my middle-class Dell notebook with an average processor (Core2 Duo P8700), 4 gigs of RAM and a SSD drive, 90% of the keys return in about 70 microseconds. If I look at the Couchbase GUI for my bucket, I can see that my instance runs somewhere between 10.000 and 12.000 operations per second. I recommend you to run this program on your dev machine just for fun and to get a feeling how it performs. It is also a handy way to generate a constant load on your Couchbase instances and add a large number of keys in an easy way (you can find more params with the -? switch).&lt;/p&gt;

&lt;p&gt;If you ran the program, it would be cool to share your results in the comments below.&lt;/p&gt;

&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;From both its history and current feature set, chances are that Couchbase is a possible solution to your session store needs. It provides you with both fast and flexible querying mechanisms and is capable to scale up to more nodes with just a few clicks if you need it to. There are definitely other good storage systems out there (like redis), so make sure to dig deeper into the concepts to find out if Couchbase is right for your application.&lt;/p&gt;

&lt;p&gt;As Couchbase 2.0 comes closer and closer to the final release, I think it&amp;rsquo;s a good time to look into the system and see what it&amp;rsquo;s capable of. Also, if you need any help I found that the guys behind Couchbase are very friendly and helpful. You can also ping me via twitter if you like!&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re just getting your feet wet with Couchbase, I also have two introductory posts on &lt;a href=&#34;http://nitschinger.at/Getting-Started-with-Couchbase-and-PHP&#34;&gt;PHP&lt;/a&gt; and &lt;a href=&#34;http://nitschinger.at/Accessing-Couchbase-from-Scala&#34;&gt;Scala&lt;/a&gt; that you may find helpful!&lt;/p&gt;

&lt;p&gt;Finally, kudos to &lt;a href=&#34;http://twitter.com/ingenthr&#34;&gt;@ingenthr&lt;/a&gt; for reviewing this post and providing valuable insight into Couchbase.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>