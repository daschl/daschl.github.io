<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Couchbase on daschl writes. sometimes.</title>
    <link>https://nitschinger.at/tags/couchbase/</link>
    <description>Recent content in Couchbase on daschl writes. sometimes.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 29 Jan 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://nitschinger.at/tags/couchbase/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Bootstrapping from DNS SRV records in Java</title>
      <link>https://nitschinger.at/Bootstrapping-from-DNS-SRV-records-in-Java/</link>
      <pubDate>Wed, 29 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://nitschinger.at/Bootstrapping-from-DNS-SRV-records-in-Java/</guid>
      <description>I know this topic has a very narrow audience, but I hope that one or two people out there scratching their heads will benefit from it.
Here&amp;rsquo;s the itch we&amp;rsquo;re trying to scratch: is there an easy way to determine hostnames for - let&amp;rsquo;s say - a database connection? There are many ways to do this, like hardcoding it, providing them through a properties file and so on. All this techniques (maybe aside from fetching it over the network from a central storage) require some modifications on the server once one of the hostnames changes.</description>
    </item>
    
    <item>
      <title>What&#39;s new in the Couchbase Java SDK 1.2</title>
      <link>https://nitschinger.at/What-s-new-in-the-Couchbase-Java-SDK-1-2/</link>
      <pubDate>Fri, 11 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://nitschinger.at/What-s-new-in-the-Couchbase-Java-SDK-1-2/</guid>
      <description>For all users of our Java SDK, we prepared some nice additions for you. This post covers them in detail and shows how you can get more productive.
Note that this blog post assumes you are running the 1.2.1 release, because there have been some slight changes between 1.2.0 and 1.2.1 that affect for example the listener support and metrics collection.
Maven Central Distribution From the 1.2.0 release forward, the Java SDK is distributed directly from Maven Central.</description>
    </item>
    
    <item>
      <title>Using the Reactor Processor for High-Performance TCP</title>
      <link>https://nitschinger.at/Using-the-Reactor-Processor-for-High-Performance-TCP/</link>
      <pubDate>Tue, 13 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://nitschinger.at/Using-the-Reactor-Processor-for-High-Performance-TCP/</guid>
      <description>First, a disclaimer: the all-new Reactor framework is still under heavy development, but it already provides a very promising basement for applications and libraries that need high throughput and low latency. We at Couchbase aim to provide the highest throughput at the lowest latency, so it is very critical to build upon an infrastructure that can provide it. Current, we are performing early investigations for a possible &amp;ldquo;next generation Java SDK&amp;rdquo; and Reactor seems very promising so far.</description>
    </item>
    
    <item>
      <title>Useful Couchbase Resources &amp; Blog Posts</title>
      <link>https://nitschinger.at/Useful-Couchbase-Resources-Blog-Posts/</link>
      <pubDate>Tue, 06 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://nitschinger.at/Useful-Couchbase-Resources-Blog-Posts/</guid>
      <description>The following list is a convenient way to get access to lots of resources, blog posts and material that have been shared throughout the past months. I tried to separate them by area, but of course lots of them overlap to some extent.
They are sorted by date (so you&amp;rsquo;ll find the most recent ones on top) and include the author where possible. Be aware that some of the older articles may already be outdated or not 100% accurate.</description>
    </item>
    
    <item>
      <title>Fun with Couchbase Views and MessagePack</title>
      <link>https://nitschinger.at/Fun-with-Couchbase-Views-and-Message-Pack/</link>
      <pubDate>Tue, 18 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://nitschinger.at/Fun-with-Couchbase-Views-and-Message-Pack/</guid>
      <description>Alright, before we start I have to admit that this is a little bit of a hack. Not that it doesn&amp;rsquo;t work, but of course Couchbase Server 2.0 officially only supports JSON documents to be queried through Views. In addition to that, it is not so much known that you have access to all the other documents through Base64 encoding. Recently, Sergey showed us how to very easily analyze binary data in Couchbase Views and this brought me on the idea to take it one step further.</description>
    </item>
    
    <item>
      <title>A Couchbase Cluster in Minutes with Vagrant and Puppet</title>
      <link>https://nitschinger.at/A-Couchbase-Cluster-in-Minutes-with-Vagrant-and-Puppet/</link>
      <pubDate>Mon, 27 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://nitschinger.at/A-Couchbase-Cluster-in-Minutes-with-Vagrant-and-Puppet/</guid>
      <description>Motivation Since I work as part of the engineering team at Couchbase, I need to run my code against a variety of server deployments. We run a multitude of operating systems and software versions, and so do our customers. In order to fix bugs reliably and build new features, it is critical to get a cluster up and running that resembles these deployments as good as possible. I know that I can run all of these combinations on EC2, but the cost for this would be very high and most of the time its overkill.</description>
    </item>
    
    <item>
      <title>Logging with the Couchbase Java Client</title>
      <link>https://nitschinger.at/Logging-with-the-Couchbase-Java-Client/</link>
      <pubDate>Thu, 16 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://nitschinger.at/Logging-with-the-Couchbase-Java-Client/</guid>
      <description>Introduction There is a huge variety in logging frameworks for Java, and its hard to please everyone. To understand how logging is currently handled in the SDK, we have to go back a few years. As you may know, the SDK depends on the spymemcached library and therefore also inherits its logging mechanisms. Back in the days when @dustin wrote spy, there was no good abstraction for logging available (like SLF4J), so he wrote his own.</description>
    </item>
    
    <item>
      <title>Couchbase Java SDK Internals</title>
      <link>https://nitschinger.at/Couchbase-Java-SDK-Internals/</link>
      <pubDate>Wed, 17 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://nitschinger.at/Couchbase-Java-SDK-Internals/</guid>
      <description>Motivation This blog post is intended to be a very detailed and informative article for those who already have used the Couchbase Java SDK and want to know how the internals work. This is not a introduction on how to use the Java SDK and we&amp;rsquo;ll cover some fairly advanced topics on the way.
Normally, when talking about the SDK we mean everything that is needed to get you going (Client library, documentation, release notes,&amp;hellip;).</description>
    </item>
    
    <item>
      <title>Never awaitUninterruptibly() on Netty Channels</title>
      <link>https://nitschinger.at/Never-await-Uninterruptibly-on-Netty-Channels/</link>
      <pubDate>Tue, 05 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>https://nitschinger.at/Never-await-Uninterruptibly-on-Netty-Channels/</guid>
      <description>TL:DR; When acquiring Channels in Netty, always use a ChannelFutureListener and never awaitUninterruptibly(). Curious why? Read on.
In the Java SDK for Couchbase, we use Netty to establish and maintain a streaming connection to one of the cluster nodes in order to get notified when topology changes happen. This streaming connection needs to be established during the bootstrap process of the client and we need to block until the connection is established (actually we don&amp;rsquo;t need to, but the current implementation works that way).</description>
    </item>
    
    <item>
      <title>Caching Doctrine Entities with Couchbase</title>
      <link>https://nitschinger.at/Caching-Doctrine-Entities-with-Couchbase/</link>
      <pubDate>Tue, 08 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://nitschinger.at/Caching-Doctrine-Entities-with-Couchbase/</guid>
      <description>Motivation As part of our ongoing efforts to make Couchbase more integrated with frameworks and libraries, we added caching support for the Doctrine ORM. Recently, the pull request has been merged into the master branch and is scheduled to be published along with the 2.4 release.
Caching can either be used standalone (through the API provided by doctrine/common) or integrated with the ORM functionality. We&amp;rsquo;ll look at both variants through simple examples, a good documentation can also be found here.</description>
    </item>
    
    <item>
      <title>New Features in the Couchbase Java Client 1.1-dp4</title>
      <link>https://nitschinger.at/New-Features-in-the-Couchbase-Java-Client-1-1-dp4/</link>
      <pubDate>Wed, 07 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://nitschinger.at/New-Features-in-the-Couchbase-Java-Client-1-1-dp4/</guid>
      <description>Introduction The latest Java Developer Preview (dp4) is hot off the press, and therefore I thought it would be a good idea to show you how to use some of the brand-new features that are now available. This post will show you how to use the new ComplexKey class for view queries and also how to create and delete buckets directly from your SDK.
First, we added a very flexible way of providing parameters to view queries.</description>
    </item>
    
    <item>
      <title>New Job, Couchbase Server 2.0 and CouchConf Berlin</title>
      <link>https://nitschinger.at/New-Job-Couchbase-Server-2-0-and-Couch-Conf-Berlin/</link>
      <pubDate>Mon, 22 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>https://nitschinger.at/New-Job-Couchbase-Server-2-0-and-Couch-Conf-Berlin/</guid>
      <description>The last weeks have been pretty exciting for me. I joined Couchbase as a Developer Advocate mostly working on the Java and PHP SDKs as well as helping out developers who are getting started with our product or have questions during their development process.
The 2.0 release is currently in beta and can be downloaded here, you may also want to look into the decent documentation put together by our docs team.</description>
    </item>
    
    <item>
      <title>A Real-Time chat with Play, Java and Couchbase - Part 1</title>
      <link>https://nitschinger.at/A-Real-Time-chat-with-Play-Java-and-Couchbase-Part-1/</link>
      <pubDate>Tue, 17 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://nitschinger.at/A-Real-Time-chat-with-Play-Java-and-Couchbase-Part-1/</guid>
      <description>Introduction I&amp;rsquo;ve been mostly blogging about PHP and Lithium, but recently I&amp;rsquo;ve also been looking into a very promising framework on the JVM - the play! framework. The current version (2.0) brings lots of enhancements and features and is (at least to me) the first framework that really boosts developer productivity on the JVM (and that I would work with in my free time).
In this project, we&amp;rsquo;ll develop a chat application (called couchplay) that allows people to login with a username and then talk to others in real-time.</description>
    </item>
    
    <item>
      <title>How to store PHP sessions in Couchbase</title>
      <link>https://nitschinger.at/How-to-store-PHP-sessions-in-Couchbase/</link>
      <pubDate>Mon, 25 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://nitschinger.at/How-to-store-PHP-sessions-in-Couchbase/</guid>
      <description>My last post about storing sessions in Couchbase was more of a general overview on what&amp;rsquo;s possible. This post builds on the foundations and principles discussed and shows you various ways to store PHP sessions in Couchbase. We start out simple by using the built-in session ini -directives, then head over to the brand new SessionHandlerInterface introduced in PHP 5.4 and finally implement it completely on our own. We&amp;rsquo;ll see how both the complexity and flexibility increase during each of our approaches.</description>
    </item>
    
    <item>
      <title>Using Couchbase as a flexible session store</title>
      <link>https://nitschinger.at/Using-Couchbase-as-a-flexible-session-store/</link>
      <pubDate>Thu, 21 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://nitschinger.at/Using-Couchbase-as-a-flexible-session-store/</guid>
      <description>This post shows you how you can use the Couchbase 2.0 server as a flexible session store. What do I mean by flexible? Well, the combination of a highly scalable key-value store and the possibility to query your data through views allows you to gain unique insight inside your data in near realtime.
Let&amp;rsquo;s look at some obstacles that we as application developers face and then see how we may solve them through Couchbase and its functionality.</description>
    </item>
    
    <item>
      <title>Accessing Couchbase from Scala</title>
      <link>https://nitschinger.at/Accessing-Couchbase-from-Scala/</link>
      <pubDate>Thu, 26 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://nitschinger.at/Accessing-Couchbase-from-Scala/</guid>
      <description>In my recent adventure on exploring both Couchbase and Scala, I noticed that there are not many tutorials out there using both at the same time. We&amp;rsquo;ll use the couchbase-java driver in its latest version (1.1), because it provides support for views and Couchbase 2.0. Note that I won&amp;rsquo;t cover installing Couchbase here, since there is plenty of material out there. Also, I assume you have scala and sbt already installed.</description>
    </item>
    
    <item>
      <title>Getting Started with Couchbase and PHP</title>
      <link>https://nitschinger.at/Getting-Started-with-Couchbase-and-PHP/</link>
      <pubDate>Mon, 12 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://nitschinger.at/Getting-Started-with-Couchbase-and-PHP/</guid>
      <description>Couchbase is a simple, fast and elastic document-oriented database. It is the product of a merge between the companies behind Memcached (Membase) and CouchDB. The current version is 1.8 and the 2.0 version is already in a developer preview release. If you haven&amp;rsquo;t heard much about Couchbase yet, start at the Couchbase Webinar Series, which will get you up to speed. The full manual is available here.
As there were a lot of merges, renamings and releases, it was pretty hard to follow up with the current/best database version and SDK to use for your project.</description>
    </item>
    
  </channel>
</rss>