<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>php on daschl writes. sometimes.</title>
    <link>https://nitschinger.at/tags/php/</link>
    <description>Recent content in php on daschl writes. sometimes.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 06 Aug 2013 00:00:00 +0000</lastBuildDate><atom:link href="https://nitschinger.at/tags/php/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Useful Couchbase Resources &amp; Blog Posts</title>
      <link>https://nitschinger.at/Useful-Couchbase-Resources-Blog-Posts/</link>
      <pubDate>Tue, 06 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://nitschinger.at/Useful-Couchbase-Resources-Blog-Posts/</guid>
      <description>The following list is a convenient way to get access to lots of resources, blog posts and material that have been shared throughout the past months. I tried to separate them by area, but of course lots of them overlap to some extent.
They are sorted by date (so you&amp;rsquo;ll find the most recent ones on top) and include the author where possible. Be aware that some of the older articles may already be outdated or not 100% accurate.</description>
    </item>
    
    <item>
      <title>A Journey on Avoiding Nulls in PHP</title>
      <link>https://nitschinger.at/A-Journey-on-Avoiding-Nulls-in-PHP/</link>
      <pubDate>Tue, 19 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://nitschinger.at/A-Journey-on-Avoiding-Nulls-in-PHP/</guid>
      <description>Let&amp;rsquo;s face it: nulls are a hassle and lead to exceptions and inconsistent application state. Tony Hoare, the inventor of QuickSort, even calls it his billion dollar mistake.
While every developer has kind of accepted their existence, they are suddenly there when we&amp;rsquo;d desperately need them to not show up. How often did you writeif($obj === null) in your PHP code? Can&amp;rsquo;t there be a better, more elegant and fault-tolerant solution to the problem?</description>
    </item>
    
    <item>
      <title>Benchmarking Cache Transcoders in PHP</title>
      <link>https://nitschinger.at/Benchmarking-Cache-Transcoders-in-PHP/</link>
      <pubDate>Wed, 30 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://nitschinger.at/Benchmarking-Cache-Transcoders-in-PHP/</guid>
      <description>Motivation Storing PHP objects (or simpler data types like arrays) in caches always requires some kind of transformation. You need a way of encoding/decoding data so that it can be stored and loaded properly. In most languages, this process is known as object serialization. PHP provides a mechanism for this out of the box, but in this article we&amp;rsquo;ll also look at igbinary as a drop-in replacement for the default serializer.</description>
    </item>
    
    <item>
      <title>Caching Doctrine Entities with Couchbase</title>
      <link>https://nitschinger.at/Caching-Doctrine-Entities-with-Couchbase/</link>
      <pubDate>Tue, 08 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://nitschinger.at/Caching-Doctrine-Entities-with-Couchbase/</guid>
      <description>Motivation As part of our ongoing efforts to make Couchbase more integrated with frameworks and libraries, we added caching support for the Doctrine ORM. Recently, the pull request has been merged into the master branch and is scheduled to be published along with the 2.4 release.
Caching can either be used standalone (through the API provided by doctrine/common) or integrated with the ORM functionality. We&amp;rsquo;ll look at both variants through simple examples, a good documentation can also be found here.</description>
    </item>
    
    <item>
      <title>Announcing the Vienna PHP User Group</title>
      <link>https://nitschinger.at/Announcing-the-Vienna-PHP-User-Group/</link>
      <pubDate>Sat, 07 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://nitschinger.at/Announcing-the-Vienna-PHP-User-Group/</guid>
      <description>I&amp;rsquo;ve been looking for a decent PHP user group here in Vienna for some time. Sadly, I haven&amp;rsquo;t found even a bad one. Now, I&amp;rsquo;m trying to change this: meet viennaphp.org.
My goal is to create a friendly, welcoming and informative user group that allows beginners and experts alike to share their experiences, opinions and knowledge. I have always met great people when I worked with the open-source community and I think lots of people around here would benefit from it too.</description>
    </item>
    
    <item>
      <title>How to store PHP sessions in Couchbase</title>
      <link>https://nitschinger.at/How-to-store-PHP-sessions-in-Couchbase/</link>
      <pubDate>Mon, 25 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://nitschinger.at/How-to-store-PHP-sessions-in-Couchbase/</guid>
      <description>My last post about storing sessions in Couchbase was more of a general overview on what&amp;rsquo;s possible. This post builds on the foundations and principles discussed and shows you various ways to store PHP sessions in Couchbase. We start out simple by using the built-in session ini -directives, then head over to the brand new SessionHandlerInterface introduced in PHP 5.4 and finally implement it completely on our own. We&amp;rsquo;ll see how both the complexity and flexibility increase during each of our approaches.</description>
    </item>
    
    <item>
      <title>Using Couchbase as a flexible session store</title>
      <link>https://nitschinger.at/Using-Couchbase-as-a-flexible-session-store/</link>
      <pubDate>Thu, 21 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://nitschinger.at/Using-Couchbase-as-a-flexible-session-store/</guid>
      <description>This post shows you how you can use the Couchbase 2.0 server as a flexible session store. What do I mean by flexible? Well, the combination of a highly scalable key-value store and the possibility to query your data through views allows you to gain unique insight inside your data in near realtime.
Let&amp;rsquo;s look at some obstacles that we as application developers face and then see how we may solve them through Couchbase and its functionality.</description>
    </item>
    
    <item>
      <title>Handling JSON like a boss in PHP</title>
      <link>https://nitschinger.at/Handling-JSON-like-a-boss-in-PHP/</link>
      <pubDate>Wed, 06 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://nitschinger.at/Handling-JSON-like-a-boss-in-PHP/</guid>
      <description>There are already lots of tutorials out there on handling JSON with PHP, but most of them don&amp;rsquo;t go much deeper than throwing an array against json_encode and hoping for the best. This article aims to be a solid introduction into JSON and how to handle it correctly in combination with PHP. Also, readers who don&amp;rsquo;t use PHP as their programming language can benefit from the first part that acts as a general overview on JSON.</description>
    </item>
    
    <item>
      <title>A primer on PHP exceptions</title>
      <link>https://nitschinger.at/A-primer-on-PHP-exceptions/</link>
      <pubDate>Tue, 22 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://nitschinger.at/A-primer-on-PHP-exceptions/</guid>
      <description>Preface Exceptions are and should be an integral part of any general purpose programming language. PHP introduced them long ago (with the release of PHP 5 or 5.1), but it still seems that many of the concepts are not fully understood or ignored by the community. This post aims to be a solid introduction to exception architecture, handling and testing. At the end of the post you should be able to know when to raise an exception and how it should look like.</description>
    </item>
    
    <item>
      <title>Writing a simple lexer in PHP</title>
      <link>https://nitschinger.at/Writing-a-simple-lexer-in-PHP/</link>
      <pubDate>Thu, 10 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://nitschinger.at/Writing-a-simple-lexer-in-PHP/</guid>
      <description>Introduction A lot of developers avoid writing parsers because they think it&amp;rsquo;s pretty hard to do so. Writing an efficient parser for a general purpose language (like PHP, Ruby, Java,&amp;hellip;) is hard, but fortunately, most of the time we don&amp;rsquo;t need that much complexity. Typically we just want to parse input coming from config files or from a specific problem domain (expressed through DSLs). DSLs (Domain Specific Languages) are pretty cool, because they allow you to express logic and flow in a very specific and convenient way for a limited set of tasks.</description>
    </item>
    
  </channel>
</rss>
