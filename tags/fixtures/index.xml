<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fixtures on daschl writes. sometimes.</title>
    <link>http://nitschinger.at/tags/fixtures/</link>
    <description>Recent content in Fixtures on daschl writes. sometimes.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 04 Dec 2010 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://nitschinger.at/tags/fixtures/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Introducing Fixtures for Lithium</title>
      <link>http://nitschinger.at/Introducing-Fixtures-for-Lithium/</link>
      <pubDate>Sat, 04 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>http://nitschinger.at/Introducing-Fixtures-for-Lithium/</guid>
      <description>&lt;p&gt;When you write tests for your classes (and you should), you may run into the problem that you create large arrays of test data in your code. Consider the following example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000000&#34;&gt;$expected&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;array(&lt;/span&gt;
    &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;post1&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;array(&lt;/span&gt;
        &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;My First Post&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;content&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;First Content...&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;),&lt;/span&gt;
    &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;post2&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;array(&lt;/span&gt;
        &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;My Second Post&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;content&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;Also some foobar text&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;),&lt;/span&gt;
    &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;post3&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;array(&lt;/span&gt;
        &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;My Third Post&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;content&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;I like to write some foobar foo too&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #000000&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color: #000000&#34;&gt;$this-&amp;gt;assertEqual($expected&lt;/span&gt;&lt;span style=&#34;color: #633820&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #1C01CE&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #633820&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Post::first());&lt;/span&gt;
&lt;span style=&#34;color: #177500&#34;&gt;/* more tests down here */&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This creates a nested array of test data where each inner array mocks a &lt;code&gt;post&lt;/code&gt; stored in the database. If we have to do this more than once (maybe in an other test we insert this data into the database to test validations), we may put the snippet in the &lt;code&gt;setUp()&lt;/code&gt; method. A better approach would be to move this code in fixture files. The &lt;code&gt;li3_fixtures&lt;/code&gt; plugin tries to help you with that and provides a simple and convenient approach to integrate fixtures in your tests.&lt;/p&gt;

&lt;p&gt;Before we can use the plugin, we need to install it first. &lt;code&gt;li3_fixtures&lt;/code&gt; doesn&amp;rsquo;t have any dependencies, so this is straightforward. Note that for now you need a rad-dev.org-account to clone the repository.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000000&#34;&gt;$ &lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;cd&lt;/span&gt; /path/to/app/libraries
&lt;span style=&#34;color: #000000&#34;&gt;$ &lt;/span&gt;git clone code@rad-dev.org:li3_fixtures.git
&lt;span style=&#34;color: #000000&#34;&gt;$ &lt;/span&gt;mkdir /path/to/app/tests/fixtures
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we need to tell our app to use the plugin, so fire up your editor and modify your &lt;code&gt;app/config/bootstrap/libraries.php&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000000&#34;&gt;Libraries::add(&lt;/span&gt;&lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;li3_fixtures&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After that, we can create a sample fixture file in &lt;code&gt;app/tests/fixtures/posts.json&lt;/code&gt;. Currently only json-files are supported, but xml-support is planned.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;{
    &amp;quot;post1&amp;quot;: {
        &amp;quot;title&amp;quot;: &amp;quot;My First Post&amp;quot;,
        &amp;quot;body&amp;quot;: &amp;quot;First Content...&amp;quot;
    },
    &amp;quot;post2&amp;quot;: {
        &amp;quot;title&amp;quot;: &amp;quot;My Second Post&amp;quot;,
        &amp;quot;body&amp;quot;: &amp;quot;Also some foobar text&amp;quot;
    },
    {
        &amp;quot;title&amp;quot;: &amp;quot;My Third Post&amp;quot;,
        &amp;quot;body&amp;quot;: &amp;quot;I like to write some foobar foo too&amp;quot;
    }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now that we have our fixture file in place, lets see how the &lt;code&gt;$this-&amp;gt;assertEqual()&lt;/code&gt; looks like (don&amp;rsquo;t forget to use the &lt;code&gt;li3_fixtures&lt;/code&gt; plugin with &lt;code&gt;use li3_fixtures\test\Fixture;&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000000&#34;&gt;$fixtures&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Fixture::load(&lt;/span&gt;&lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;Post&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #000000&#34;&gt;$this-&amp;gt;assertEqual($fixtures-&amp;gt;first(),&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Post::first());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;By convention, your &lt;code&gt;$model&lt;/code&gt; in &lt;code&gt;Fixture::load($model)&lt;/code&gt;well be lowercased and pluralized by the Inflector (so &amp;lsquo;Post&amp;rsquo; loads &amp;lsquo;posts.json&amp;rsquo;). The &lt;code&gt;load&lt;/code&gt;-method also takes an optional argument where you can override various default settings like the extension or location of the fixture-file.&lt;/p&gt;

&lt;p&gt;As you can see, your test code is significantly smaller and easier to read. You may also notice the &lt;code&gt;first()&lt;/code&gt;-method here. &lt;code&gt;li3_fixtures&lt;/code&gt; makes use of the built in &lt;code&gt;lithium\util\Collection&lt;/code&gt; class, which provides a powerful set of collection management methods like &lt;code&gt;first()&lt;/code&gt;, &lt;code&gt;next()&lt;/code&gt; or &lt;code&gt;prev()&lt;/code&gt;. Check out the &lt;code&gt;lithium\util\Collection&lt;/code&gt; documentation for more info on that.&lt;/p&gt;

&lt;p&gt;The project can be found at &lt;a href=&#34;http://rad-dev.org/li3_fixtures&#34;&gt;rad-dev.org/li3_fixtures&lt;/a&gt; and is maintained by me, so if you have any comments or questions, feel free to ask comment here or contact me directly.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>