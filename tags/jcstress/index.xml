<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>daschl writes. sometimes.</title>
    <link>http://nitschinger.at/tags/jcstress/index.xml</link>
    <description>Recent content on daschl writes. sometimes.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://nitschinger.at/tags/jcstress/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Debugging Concurrency Issues with OpenJDK Jcstress</title>
      <link>http://nitschinger.at/Debugging-Concurrency-Issues-with-Open-JDK-Jcstress/</link>
      <pubDate>Tue, 27 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://nitschinger.at/Debugging-Concurrency-Issues-with-Open-JDK-Jcstress/</guid>
      <description>

&lt;p&gt;I fell in love with the Java Microbenchmarking Harness (&lt;a href=&#34;http://openjdk.java.net/projects/code-tools/jmh/&#34;&gt;JMH&lt;/a&gt;) a few months ago since (in my opinion) it is the only sane way to do microbenchmarks of JVM code right now. I also poked around on their website for other tools they provide, and found that there is another very interesting tool called &lt;a href=&#34;http://openjdk.java.net/projects/code-tools/jcstress/&#34;&gt;jcstress&lt;/a&gt;. It stands for Java Concurrency Stress tests and is used mainly by the OpenJDK people itself to make sure their code works correctly with regards to concurrency.&lt;/p&gt;

&lt;p&gt;As always, you need a motivating factor so today &lt;a href=&#34;https://www.couchbase.com/issues/browse/SPY-170&#34;&gt;a ticket&lt;/a&gt; got opened which reported a race condition inside a utility class in the &lt;a href=&#34;https://code.google.com/p/spymemcached/&#34;&gt;spymemcached&lt;/a&gt; library (which is also used by the Couchbase Java SDK). Before coming up with complicated code that simulates multi-threaded consumers of the API I thought I could just try out &lt;code&gt;jcstress&lt;/code&gt; first.&lt;/p&gt;

&lt;p&gt;TL;DR: I managed to find, fix and verify the concurrency issue. If you want to learn how, read along.&lt;/p&gt;

&lt;p&gt;A short disclaimer: as you can guess, I&amp;rsquo;m far away from an expert on the &lt;code&gt;jcstress&lt;/code&gt; library and there could be information provided here that is plain wrong. The intent of this post is to show you how to set up &lt;code&gt;jcstress&lt;/code&gt; and run your code against it. Also, I&amp;rsquo;d like to thank &lt;a href=&#34;https://twitter.com/shipilev&#34;&gt;Aleksey Shipil—ëv&lt;/a&gt; to help me verify/improve the test and look over it. He also told me that &lt;code&gt;jcstress&lt;/code&gt; is not (yet) ready for a broad public consumption, so your mileage may vary.&lt;/p&gt;

&lt;h1 id=&#34;setup&#34;&gt;Setup&lt;/h1&gt;

&lt;p&gt;As &lt;a href=&#34;http://openjdk.java.net/projects/code-tools/jcstress/&#34;&gt;described&lt;/a&gt; on the website, you need to clone the repository and build the whole thing. Also, make sure to have Java 8 installed for compiling it (I think running with older versions afterwards works).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hg clone http://hg.openjdk.java.net/code-tools/jcstress/ jcstress
$ cd jcstress/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, go import the maven project in your favorite IDE (&lt;a href=&#34;http://www.jetbrains.com/idea/&#34;&gt;IntelliJ, what else?&lt;/a&gt;). We need to add our own code and tests so that it can be picked up later. You can either add your code under test as a dependency into the &lt;code&gt;pom.xml&lt;/code&gt; file or just copy it over to the project if it is self contained (so it&amp;rsquo;s easier to play and poke around). If you want to follow along, add the &lt;code&gt;StringUtils.java&lt;/code&gt; and the &lt;code&gt;StringUtilsTest.java&lt;/code&gt; files to the &lt;code&gt;com.couchbase.client.tests.util&lt;/code&gt; package:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;com.couchbase.client.tests.util;&lt;/span&gt;

&lt;span style=&#34;color: #A90D91&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;java.util.regex.Matcher;&lt;/span&gt;
&lt;span style=&#34;color: #A90D91&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;java.util.regex.Pattern;&lt;/span&gt;

&lt;span style=&#34;color: #177500&#34;&gt;/**&lt;/span&gt;
&lt;span style=&#34;color: #177500&#34;&gt; * Utility methods on string objects.&lt;/span&gt;
&lt;span style=&#34;color: #177500&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color: #A90D91&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #3F6E75&#34;&gt;StringUtils&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #177500&#34;&gt;/**&lt;/span&gt;
&lt;span style=&#34;color: #177500&#34;&gt;     * A pattern to match on a signed integer value.&lt;/span&gt;
&lt;span style=&#34;color: #177500&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color: #A90D91&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Pattern&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;decimalPattern&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Pattern.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;compile&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #C41A16&#34;&gt;&amp;quot;^-?\\d+$&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #177500&#34;&gt;/**&lt;/span&gt;
&lt;span style=&#34;color: #177500&#34;&gt;     * The matcher for the decimal pattern regex.&lt;/span&gt;
&lt;span style=&#34;color: #177500&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color: #A90D91&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;Matcher&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;decimalMatcher&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;decimalPattern.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;matcher&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #C41A16&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #177500&#34;&gt;/**&lt;/span&gt;
&lt;span style=&#34;color: #177500&#34;&gt;     * Maximum supported key length.&lt;/span&gt;
&lt;span style=&#34;color: #177500&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color: #A90D91&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;MAX_KEY_LENGTH&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #1C01CE&#34;&gt;250&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #177500&#34;&gt;/**&lt;/span&gt;
&lt;span style=&#34;color: #177500&#34;&gt;     * Exception thrown if the input key is too long.&lt;/span&gt;
&lt;span style=&#34;color: #177500&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color: #A90D91&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;IllegalArgumentException&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;KEY_TOO_LONG_EXCEPTION&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt;
        &lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;IllegalArgumentException(&lt;/span&gt;&lt;span style=&#34;color: #C41A16&#34;&gt;&amp;quot;Key is too long (maxlen = &amp;quot;&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;MAX_KEY_LENGTH&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #177500&#34;&gt;/**&lt;/span&gt;
&lt;span style=&#34;color: #177500&#34;&gt;     * Exception thrown if the input key is empty.&lt;/span&gt;
&lt;span style=&#34;color: #177500&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color: #A90D91&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;IllegalArgumentException&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;KEY_EMPTY_EXCEPTION&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt;
        &lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;IllegalArgumentException(&lt;/span&gt;&lt;span style=&#34;color: #C41A16&#34;&gt;&amp;quot;Key must contain at least one character.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #177500&#34;&gt;/**&lt;/span&gt;
&lt;span style=&#34;color: #177500&#34;&gt;     * Preset the stack traces for the static exceptions.&lt;/span&gt;
&lt;span style=&#34;color: #177500&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color: #A90D91&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;KEY_TOO_LONG_EXCEPTION.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;setStackTrace&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;StackTraceElement[&lt;/span&gt;&lt;span style=&#34;color: #1C01CE&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]);&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;KEY_EMPTY_EXCEPTION.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;setStackTrace&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;StackTraceElement[&lt;/span&gt;&lt;span style=&#34;color: #1C01CE&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;]);&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #177500&#34;&gt;/**&lt;/span&gt;
&lt;span style=&#34;color: #177500&#34;&gt;     * Private constructor, since this is a purely static class.&lt;/span&gt;
&lt;span style=&#34;color: #177500&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color: #A90D91&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;StringUtils()&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #A90D91&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;UnsupportedOperationException();&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #177500&#34;&gt;/**&lt;/span&gt;
&lt;span style=&#34;color: #177500&#34;&gt;     * Check if a given string is a JSON object.&lt;/span&gt;
&lt;span style=&#34;color: #177500&#34;&gt;     *&lt;/span&gt;
&lt;span style=&#34;color: #177500&#34;&gt;     * @param s the input string.&lt;/span&gt;
&lt;span style=&#34;color: #177500&#34;&gt;     * @return true if it is a JSON object, false otherwise.&lt;/span&gt;
&lt;span style=&#34;color: #177500&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color: #A90D91&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;isJsonObject(&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;s)&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #A90D91&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;(s&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;s.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;isEmpty&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #A90D91&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;

        &lt;span style=&#34;color: #A90D91&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;(s.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;startsWith&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #C41A16&#34;&gt;&amp;quot;{&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;s.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;startsWith&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #C41A16&#34;&gt;&amp;quot;[&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(s)&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;quot;false&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(s)&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;quot;null&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(s)&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;decimalMatcher.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;reset&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(s).&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;matches&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #A90D91&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;

        &lt;span style=&#34;color: #A90D91&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And the test:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;com.couchbase.client.tests.util;&lt;/span&gt;

&lt;span style=&#34;color: #A90D91&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;org.openjdk.jcstress.annotations.Actor;&lt;/span&gt;
&lt;span style=&#34;color: #A90D91&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;org.openjdk.jcstress.annotations.JCStressTest;&lt;/span&gt;
&lt;span style=&#34;color: #A90D91&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;org.openjdk.jcstress.annotations.State;&lt;/span&gt;
&lt;span style=&#34;color: #A90D91&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;org.openjdk.jcstress.infra.results.IntResult2;&lt;/span&gt;

&lt;span style=&#34;color: #000000&#34;&gt;@JCStressTest&lt;/span&gt;
&lt;span style=&#34;color: #000000&#34;&gt;@State&lt;/span&gt;
&lt;span style=&#34;color: #A90D91&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #3F6E75&#34;&gt;StringUtilsTest&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #000000&#34;&gt;@Actor&lt;/span&gt;
    &lt;span style=&#34;color: #A90D91&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;actor1(IntResult2&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;result)&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #A90D91&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;result.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;r1&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;StringUtils.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;isJsonObject&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #C41A16&#34;&gt;&amp;quot;1234&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #1C01CE&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #1C01CE&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;catch&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(Exception&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;ex)&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;result.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;r1&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #1C01CE&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #000000&#34;&gt;@Actor&lt;/span&gt;
    &lt;span style=&#34;color: #A90D91&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;actor2(IntResult2&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;result)&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #A90D91&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;result.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;r2&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;StringUtils.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;isJsonObject&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #C41A16&#34;&gt;&amp;quot;5678&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color: #1C01CE&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #1C01CE&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;catch&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;(Exception&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;ex)&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;result.&lt;/span&gt;&lt;span style=&#34;color: #836C28&#34;&gt;r2&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #1C01CE&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #000000&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The test uses &lt;code&gt;@Actor&lt;/code&gt; annotations to define the different actors of the system. You can see that both actors access the same static method and put the result (which is abbreviated to a simple true (1) / false (0) pattern) in the &lt;code&gt;IntResult2&lt;/code&gt; object. Both actors share their results and if an exception
is raised we store -1. Now what is that good for?&lt;/p&gt;

&lt;p&gt;We also need to add a description file for our test which sets the expecations on allowed and disallowed value combinations. Note that I tried to add my own .xml file, but somehow it didn&amp;rsquo;t get picked up, so I modified an existing xml (to be specific the &lt;code&gt;resources/org/openjdk/jcstress/desc/atomic-boolean.xml&lt;/code&gt;) and added the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;test&lt;/span&gt; &lt;span style=&#34;color: #836C28&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #C41A16&#34;&gt;&amp;quot;com.couchbase.client.tests.util.StringUtilsTest&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;contributed-by&amp;gt;&lt;/span&gt;Michael Nitschinger&lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;/contributed-by&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;description&amp;gt;&lt;/span&gt;
        Tests the thread-safeness of the StringUtil class.
    &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;case&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;match&amp;gt;&lt;/span&gt;[1, 1]&lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;/match&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;expect&amp;gt;&lt;/span&gt;ACCEPTABLE&lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;/expect&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;description&amp;gt;&lt;/span&gt;
            Acceptable to see true.
        &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;/case&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;unmatched&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;expect&amp;gt;&lt;/span&gt;FORBIDDEN&lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;/expect&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;description&amp;gt;&lt;/span&gt;
            Other cases are not expected. -1 would mean an exception raised.
        &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;/unmatched&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;/test&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can see that the only thing which is acceptable is that both actors always get &lt;code&gt;true&lt;/code&gt; returned, all other combinations are simply forbidden (that is, marked as failure).&lt;/p&gt;

&lt;p&gt;Now that we&amp;rsquo;ve got that set up, we need to compile the thing on the command line through maven:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mvn clean install -pl tests-custom -am
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we run the shaded jar and give it a regex so that only our own test gets picked up:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ java -jar tests-custom/target/jcstress.jar -t &amp;quot;.*StringUtils.*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The resulting output is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Java Concurrency Stress Tests
---------------------------------------------------------------------------------
Rev: a119fb6622e3+, built by michael with 1.8.0_05 at 20140527-1040

Burning up to figure out the exact CPU count....... done!

Non-fatal: VM support for online deoptimization is not enabled, tests might miss some issues.
Possible reasons are:
  1) unsupported JDK, only JDK 8+ is supported;
  2) -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI are missing;
  3) the jcstress JAR is not added to -Xbootclasspath/a

Non-fatal: VM support for @Contended is not enabled, tests might run slower.
Possible reasons are:
  1) unsupported JDK, only JDK 8+ is supported;
  2) -XX:-RestrictContended is missing, or the jcstress JAR is not added to -Xbootclasspath/a

FORKED MODE
  Test preset mode: &amp;quot;default&amp;quot;
  Writing the test results to &amp;quot;jcstress.1401180107287&amp;quot;
  Parsing results to &amp;quot;results/&amp;quot;
  Running each test matching &amp;quot;.*StringUtils.*&amp;quot; for 1 forks, 5 iterations, 1000 ms each
  Solo stride size will be autobalanced within [10, 10000] elements
  Hardware threads in use/available: 8/8, no yielding in use.


 (ETA:        n/a) (R: 5.90E+08) (T:   1/1) (F: 1/1) (I: 1/5)   [FAILED] com.couchbase.client.tests.util.StringUtilsTest
                     Observed state     Occurrences        Expectation Interpretation      
                             [1, 1] (    1,889,690)         ACCEPTABLE Acceptable to see true.                                     
                             [0, 1] (          150)          FORBIDDEN Other cases are not expected. -1 would mean an exception ...
                             [1, 0] (          130)          FORBIDDEN Other cases are not expected. -1 would mean an exception ...

 (ETA:   00:00:02) (R: 4.03E+06) (T:   1/1) (F: 1/1) (I: 2/5)       [OK] com.couchbase.client.tests.util.StringUtilsTest
 (ETA:   00:00:01) (R: 3.05E+06) (T:   1/1) (F: 1/1) (I: 3/5)       [OK] com.couchbase.client.tests.util.StringUtilsTest
 (ETA:   00:00:00) (R: 2.74E+06) (T:   1/1) (F: 1/1) (I: 4/5)       [OK] com.couchbase.client.tests.util.StringUtilsTest
 (ETA:        now) (R: 2.60E+06) (T:   1/1) (F: 1/1) (I: 5/5)       [OK] com.couchbase.client.tests.util.StringUtilsTest
Reading the results back...
Generating the report...
Look at results/index.html for the complete run results.

Will throw any pending exceptions at this point.
Exception in thread &amp;quot;main&amp;quot; java.lang.AssertionError: TEST FAILURES:
com.couchbase.client.tests.util.StringUtilsTest: Observed forbidden state: [0, 1]
com.couchbase.client.tests.util.StringUtilsTest: Observed forbidden state: [1, 0]

	at org.openjdk.jcstress.infra.grading.ExceptionReportPrinter.parse(ExceptionReportPrinter.java:119)
	at org.openjdk.jcstress.JCStress.run(JCStress.java:134)
	at org.openjdk.jcstress.Main.main(Main.java:85)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The command line output is very descriptive, but you can also open the &lt;code&gt;results/index.html&lt;/code&gt; file for a nicer visualization. We can see that most of the time the output was acceptable, but 280 times we got non-consistent output. In those cases, one of the actors got &lt;code&gt;false&lt;/code&gt; as a response instead of &lt;code&gt;true&lt;/code&gt; pretty bad if you ask me!&lt;/p&gt;

&lt;p&gt;You can look through the code if you want to find the race condition, but for those who are too lazy here is the code fix:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   /**
    * Exception thrown if the input key is empty.
@@ -112,7 +106,7 @@ public final class StringUtils {

     if (s.startsWith(&amp;quot;{&amp;quot;) || s.startsWith(&amp;quot;[&amp;quot;)
       || &amp;quot;true&amp;quot;.equals(s) || &amp;quot;false&amp;quot;.equals(s)
-      || &amp;quot;null&amp;quot;.equals(s) || decimalMatcher.reset(s).matches()) {
+      || &amp;quot;null&amp;quot;.equals(s) || decimalPattern.matcher(s).matches()) {
       return true;
     }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As it turns out, the &lt;code&gt;matcher&lt;/code&gt; is not thread safe and there is a race condition between resetting the characters and matching them afterwards. If we fix it to always create a new &lt;code&gt;matcher&lt;/code&gt;, the race condition should go away. So let&amp;rsquo;s make the proposed changes and run the test again (don&amp;rsquo;t forget to run &lt;code&gt;mvn clean install -pl tests-custom -am&lt;/code&gt; again since we changed the code):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*snip*
 (ETA:        n/a) (R: 1.82E+09) (T:   1/1) (F: 1/1) (I: 1/5)       [OK] com.couchbase.client.tests.util.StringUtilsTest
 (ETA:   00:00:02) (R: 1.13E+07) (T:   1/1) (F: 1/1) (I: 2/5)       [OK] com.couchbase.client.tests.util.StringUtilsTest
 (ETA:   00:00:01) (R: 8.90E+06) (T:   1/1) (F: 1/1) (I: 3/5)       [OK] com.couchbase.client.tests.util.StringUtilsTest
 (ETA:   00:00:00) (R: 7.98E+06) (T:   1/1) (F: 1/1) (I: 4/5)       [OK] com.couchbase.client.tests.util.StringUtilsTest
 (ETA:        now) (R: 7.61E+06) (T:   1/1) (F: 1/1) (I: 5/5)       [OK] com.couchbase.client.tests.util.StringUtilsTest
Reading the results back...
Generating the report...
Look at results/index.html for the complete run results.

Will throw any pending exceptions at this point.
Done.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Look at that! Our results are now consistent. We can now be confident that our bugfix actually solved the race condition here.&lt;/p&gt;

&lt;p&gt;Give it a shot if you also need to debug concurrency issues in your codebase, but keep in mind that your mileage may vary. Thanks again to &lt;a href=&#34;https://twitter.com/shipilev&#34;&gt;Aleksey Shipil—ëv&lt;/a&gt; for eyeballing the code and giving suggestions.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>