<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Nitschinger.at]]></title>
  <link href="http://daschl.github.io/atom.xml" rel="self"/>
  <link href="http://daschl.github.io/"/>
  <updated>2013-12-19T10:28:18+01:00</updated>
  <id>http://daschl.github.io/</id>
  <author>
    <name><![CDATA[Michael Nitschinger]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using JMH for Java Microbenchmarking]]></title>
    <link href="http://daschl.github.io/Using-JMH-for-Java-Microbenchmarking"/>
    <updated>2013-11-22T13:49:48+01:00</updated>
    <id>http://daschl.github.io/Using-JMH-for-Java-Microbenchmarking</id>
    <content type="html"><![CDATA[<p>Larger companies like Google started their own projects to remedy all kinds of pitfalls and libraries like <a href="https://code.google.com/p/caliper/">Caliper</a> popped out of that. Now finally, some fine folks of the OpenJDK team thought they&rsquo;ll do their own and share it for everyone to use. The tool is called <a href="http://openjdk.java.net/projects/code-tools/jmh/">jmh</a> or also known as &ldquo;Java Microbenchmarking Harness&rdquo;.</p>

<p>In this post I just show you how to get started, but there are still lots of things you need to think about. I really recommend you to watch <a href="http://vimeo.com/78900556">the talk by Aleksey Shipilev</a> which dives into concepts and pitfalls. You can also find the slides <a href="http://shipilev.net/pub/talks/devoxx-Nov2013-benchmarking.pdf">here</a>.</p>

<h2>Using JMH</h2>

<p>There are a few ways to use it and all of them are explained on the official website linked above. In general, you want to use the self-contained jar and run them on the command line, but there is also an easy way to run them directly out of your IDE &ndash; this is what I&rsquo;m showing you in a second. If you just want to run it from the command line, you do it like (but you need to build the jar first):</p>

<pre><code>$ java -jar target/microbenchmarks.jar -h
</code></pre>

<p>Let&rsquo;s start a maven project in our IDE and add the following dependency (mad props to <a href="https://twitter.com/_godin_/status/403668134206242817">Evgeny Mandrikov</a> for putting it on maven central recently):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>org.openjdk.jmh<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>jmh-core<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>0.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s write a main method that calls the underlying method of JMH so we can run it easily form our IDE:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.openjdk.jmh.Main</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Start</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Main</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we hit run, all we&rsquo;ll see is:</p>

<pre><code>No matching benchmarks. Miss-spelled regexp? Use -v for verbose output.
</code></pre>

<p>Which is good, because we know JMH is working and looking for our benchmarks. Let&rsquo;s write an empty one to get a feeling of how it works.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">benchmarks</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.openjdk.jmh.annotations.GenerateMicroBenchmark</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorld</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@GenerateMicroBenchmark</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">helloWorld</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>JMH will automatically pick it up from the CLASSPATH and start to run our benchmark. You will see lots of output (forks, warmup runs), but be patient until the end and you&rsquo;ll see something like this:</p>

<pre><code># Fork: 1 of 1
# Warmup: 20 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Running: benchmarks.HelloWorld.helloWorld
# Warmup Iteration   1: 3034307.449 ops/ms
# Warmup Iteration   2: 3108187.599 ops/ms
# Warmup Iteration   3: 3117686.141 ops/ms
# Warmup Iteration   4: 3121382.926 ops/ms
# Warmup Iteration   5: 3100218.889 ops/ms
# Warmup Iteration   6: 3117158.492 ops/ms
*** snip ***
Iteration   7: 2906090.682 ops/ms
Iteration   8: 3053047.149 ops/ms
Iteration   9: 3055673.541 ops/ms
Iteration  10: 3113494.893 ops/ms

Result : 3073969.337 ±(95%) 45679.588 ±(99%) 65631.592 ops/ms
Statistics: (min, avg, max) = (2906090.682, 3073969.337, 3120910.177), stdev = 63860.098
Confidence intervals: 95% [3028289.749, 3119648.926], 99% [3008337.745, 3139600.930]

Benchmark                   Mode Thr     Count  Sec         Mean   Mean error    Units
b.HelloWorld.helloWorld    thrpt   1        10    1  3073969.337    65631.592   ops/ms
</code></pre>

<p>Note that both the output and the results may look different on your machine. To not fork as often and don&rsquo;t do so many measure runs (for demo purposes), you can apply the following flags for the command in your IDE: <code>-i 10 -f 1</code>. This will only run one fork and do 10 iterations after warming up. There are dozens of flags you can tune to your needs.</p>

<h2>Benchmarking real code</h2>

<p>Now all is fun, but let&rsquo;s test some real code. In Spymemcached, before we put a document on the wire we check that the key is not longer than allowed and &ndash; for ascii based operations &ndash; also check if they do not contain whitespace and so on. The code in question currently looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">validateKey</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">binary</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">byte</span><span class="o">[]</span> <span class="n">keyBytes</span> <span class="o">=</span> <span class="n">KeyUtil</span><span class="o">.</span><span class="na">getKeyBytes</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">keyBytes</span><span class="o">.</span><span class="na">length</span> <span class="o">&gt;</span> <span class="n">MemcachedClientIF</span><span class="o">.</span><span class="na">MAX_KEY_LENGTH</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;Key is too long (maxlen = &quot;</span>
</span><span class='line'>        <span class="o">+</span> <span class="n">MemcachedClientIF</span><span class="o">.</span><span class="na">MAX_KEY_LENGTH</span> <span class="o">+</span> <span class="s">&quot;)&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">keyBytes</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span>
</span><span class='line'>        <span class="s">&quot;Key must contain at least one character.&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">if</span><span class="o">(!</span><span class="n">binary</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Validate the key</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">byte</span> <span class="n">b</span> <span class="o">:</span> <span class="n">keyBytes</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">b</span> <span class="o">==</span> <span class="sc">&#39; &#39;</span> <span class="o">||</span> <span class="n">b</span> <span class="o">==</span> <span class="sc">&#39;\n&#39;</span> <span class="o">||</span> <span class="n">b</span> <span class="o">==</span> <span class="sc">&#39;\r&#39;</span> <span class="o">||</span> <span class="n">b</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span>
</span><span class='line'>            <span class="s">&quot;Key contains invalid characters:  ``&quot;</span> <span class="o">+</span> <span class="n">key</span> <span class="o">+</span> <span class="s">&quot;&#39;&#39;&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s say we don&rsquo;t care about optimizing it yet, but we want to see how it performs if the &ldquo;binary&rdquo; flag is applied or not. Obviously less work is done but we want to see how that turns out in practice. Let&rsquo;s add the dependency so we can use the static method directly from the code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>net.spy<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>spymemcached<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>2.10.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And write a new benchmark that compares both approaches with variation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">benchmarks</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">net.spy.memcached.util.StringUtils</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.openjdk.jmh.annotations.GenerateMicroBenchmark</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">KeyBench</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * 12 chars long</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">SHORT_KEY</span> <span class="o">=</span> <span class="s">&quot;user:michael&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * 240 chars long</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">LONG_KEY</span> <span class="o">=</span> <span class="s">&quot;thisIsAFunkyKeyWith_underscores_AndAlso334&quot;</span> <span class="o">+</span>
</span><span class='line'>      <span class="s">&quot;3252545345NumberslthisIsAFunkyKeyWith_underscores_AndAlso3343252545345Numbe&quot;</span> <span class="o">+</span>
</span><span class='line'>      <span class="s">&quot;rslthisIsAFunkyKeyWith_underscores_AndAlso3343252545345NumberslthisIsAFunkyK&quot;</span> <span class="o">+</span>
</span><span class='line'>      <span class="s">&quot;eyWith_underscores_AndAlso3343252545345Numbersl&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@GenerateMicroBenchmark</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">validateShortKeyBinary</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">StringUtils</span><span class="o">.</span><span class="na">validateKey</span><span class="o">(</span><span class="n">SHORT_KEY</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@GenerateMicroBenchmark</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">validateShortKeyAscii</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">StringUtils</span><span class="o">.</span><span class="na">validateKey</span><span class="o">(</span><span class="n">SHORT_KEY</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@GenerateMicroBenchmark</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">validateLongKeyBinary</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">StringUtils</span><span class="o">.</span><span class="na">validateKey</span><span class="o">(</span><span class="n">LONG_KEY</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@GenerateMicroBenchmark</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">validateLongKeyAscii</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">StringUtils</span><span class="o">.</span><span class="na">validateKey</span><span class="o">(</span><span class="n">LONG_KEY</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We also see how the performance differs for long and short keys. The first run we do is with 10 iterations and 1 fork:</p>

<pre><code>Result : 18093.561 ±(95%) 65.824 ±(99%) 94.575 ops/ms
  Statistics: (min, avg, max) = (17920.967, 18093.561, 18240.197), stdev = 92.022
  Confidence intervals: 95% [18027.737, 18159.385], 99% [17998.986, 18188.136]


Benchmark                             Mode Thr     Count  Sec         Mean   Mean error    Units
b.KeyBench.validateLongKeyAscii      thrpt   1        10    1     1718.532        8.504   ops/ms
b.KeyBench.validateLongKeyBinary     thrpt   1        10    1     3632.664       24.579   ops/ms
b.KeyBench.validateShortKeyAscii     thrpt   1        10    1    13198.597       71.557   ops/ms
b.KeyBench.validateShortKeyBinary    thrpt   1        10    1    18093.561       94.575   ops/ms
</code></pre>

<p>The first observation we can make is that &ndash; without surprise &ndash; shorter keys are faster than longer keys. But we can also see that the results are much more consistent for longer keys than shorter ones. So let&rsquo;s grab a coffee (this test took over 10 minutes to complete) and run the results with 20 iterations and 10 forks:</p>

<pre><code>Result : 17796.673 ±(95%) 56.110 ±(99%) 76.699 ops/ms
  Statistics: (min, avg, max) = (17441.465, 17796.673, 17947.702), stdev = 119.891
  Confidence intervals: 95% [17740.563, 17852.783], 99% [17719.974, 17873.371]


Benchmark                             Mode Thr     Count  Sec         Mean   Mean error    Units
b.KeyBench.validateLongKeyAscii      thrpt   1       200    1     1719.010        2.160   ops/ms
b.KeyBench.validateLongKeyBinary     thrpt   1       200    1     3745.221       12.101   ops/ms
b.KeyBench.validateShortKeyAscii     thrpt   1       200    1    13144.629       16.918   ops/ms
b.KeyBench.validateShortKeyBinary    thrpt   1       200    1    17886.628       31.513   ops/ms
</code></pre>

<p>We get similar results, but our mean error rate went down which gives us further confidence in our numbers.</p>

<p>Now here comes the important part: while microbenchmarking definitely helps to find bottlenecks and shows you pointers where to go fix your code, it (I think more importantly) shows you code that you do not need to optimize. Say if the numbers shown above fit our application purpose we can &ldquo;check them off&rdquo; the list and go look somewhere else to optimize.</p>

<p>Also, if you are running those benchmarks on your notebook (and not on the servers, where you should too), make sure you don&rsquo;t enable power management so your CPUs work full steam during the full runs. Also, close all other programs that are not essential and leave it alone until the benchmark finishes. That way you reduce the probability of other tasks inferring with your benchmark results and helping you to get more consistent ones.</p>

<h2>Further Considerations</h2>

<p>Funny enough, JMH not only makes your microbenchmarks more accurate, I think they are also much easier to write. You don&rsquo;t need to fight with things happening in the JVM and your operating system while the tests run. You can integrate those benchmarks into your CI runs when someone checks in a new piece of code and look at historically accurate performance numbers (for crucial pieces in your codebase).</p>

<p>One thing I need to tell you before finishing this post. Please go watch the video shown above, since there is still a lot to consider, even with JMH. Also a very good pointer is the examples section located <a href="http://hg.openjdk.java.net/code-tools/jmh/file/tip/jmh-samples/src/main/java/org/openjdk/jmh/samples/">here</a>. You should especially be on the lookout for dead code elimination, and the proper use of black holes in JMH.</p>

<p>Please share your findings and additions in the comments section below!</p>

<h2>Additional Information</h2>

<p>As <a href="https://twitter.com/shipilev">Aleksey Shipilёv</a> points out in the comments, there is also a nice Java API that you can use, instead of just proxying &ldquo;main&rdquo; and emulating the command line. Here is an example that shows how to use it. Note that iterating the MAP is optional, but it gives you a code-readable way of the results. If you just call <code>new Runner(opts).run();</code>, you will see the identical output as above.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Options</span> <span class="n">opts</span> <span class="o">=</span> <span class="k">new</span> <span class="n">OptionsBuilder</span><span class="o">()</span>
</span><span class='line'>      <span class="o">.</span><span class="na">include</span><span class="o">(</span><span class="s">&quot;.*&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">warmupIterations</span><span class="o">(</span><span class="mi">10</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">measurementIterations</span><span class="o">(</span><span class="mi">10</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">jvmArgs</span><span class="o">(</span><span class="s">&quot;-server&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">forks</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">outputFormat</span><span class="o">(</span><span class="n">OutputFormatType</span><span class="o">.</span><span class="na">TextReport</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Map</span><span class="o">&lt;</span><span class="n">BenchmarkRecord</span><span class="o">,</span><span class="n">RunResult</span><span class="o">&gt;</span> <span class="n">records</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Runner</span><span class="o">(</span><span class="n">opts</span><span class="o">).</span><span class="na">run</span><span class="o">();</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">BenchmarkRecord</span><span class="o">,</span> <span class="n">RunResult</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">:</span> <span class="n">records</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Result</span> <span class="n">r</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">getValue</span><span class="o">().</span><span class="na">getPrimaryResult</span><span class="o">();</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;API replied benchmark score: &quot;</span>
</span><span class='line'>          <span class="o">+</span> <span class="n">r</span><span class="o">.</span><span class="na">getScore</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; &quot;</span>
</span><span class='line'>          <span class="o">+</span> <span class="n">r</span><span class="o">.</span><span class="na">getScoreUnit</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; over &quot;</span>
</span><span class='line'>          <span class="o">+</span> <span class="n">r</span><span class="o">.</span><span class="na">getStatistics</span><span class="o">().</span><span class="na">getN</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; iterations&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also, the constant keys used in the above example are subject to constant optimizations. To work around that, there is the @State annotation for the class and the static fields need to be instance variables. Here is the updated code sample for clarity, the numbers don&rsquo;t change for the purpose of this post.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">benchmarks</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">net.spy.memcached.util.StringUtils</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.openjdk.jmh.annotations.GenerateMicroBenchmark</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.openjdk.jmh.annotations.State</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@State</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">KeyBench</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * 12 chars long</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">SHORT_KEY</span> <span class="o">=</span> <span class="s">&quot;user:michael&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * 240 chars long</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">LONG_KEY</span> <span class="o">=</span> <span class="s">&quot;thisIsAFunkyKeyWith_underscores_AndAlso334&quot;</span> <span class="o">+</span>
</span><span class='line'>      <span class="s">&quot;3252545345NumberslthisIsAFunkyKeyWith_underscores_AndAlso3343252545345Numbe&quot;</span> <span class="o">+</span>
</span><span class='line'>      <span class="s">&quot;rslthisIsAFunkyKeyWith_underscores_AndAlso3343252545345NumberslthisIsAFunkyK&quot;</span> <span class="o">+</span>
</span><span class='line'>      <span class="s">&quot;eyWith_underscores_AndAlso3343252545345Numbersl&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@GenerateMicroBenchmark</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">validateShortKeyBinary</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">StringUtils</span><span class="o">.</span><span class="na">validateKey</span><span class="o">(</span><span class="n">SHORT_KEY</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@GenerateMicroBenchmark</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">validateShortKeyAscii</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">StringUtils</span><span class="o">.</span><span class="na">validateKey</span><span class="o">(</span><span class="n">SHORT_KEY</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@GenerateMicroBenchmark</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">validateLongKeyBinary</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">StringUtils</span><span class="o">.</span><span class="na">validateKey</span><span class="o">(</span><span class="n">LONG_KEY</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@GenerateMicroBenchmark</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">validateLongKeyAscii</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">StringUtils</span><span class="o">.</span><span class="na">validateKey</span><span class="o">(</span><span class="n">LONG_KEY</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thanks for pointing it out Aleksey!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What's New in the Couchbase Java SDK 1.2]]></title>
    <link href="http://daschl.github.io/What-s-new-in-the-Couchbase-Java-SDK-1-2"/>
    <updated>2013-10-11T14:49:48+02:00</updated>
    <id>http://daschl.github.io/What-s-new-in-the-Couchbase-Java-SDK-1-2</id>
    <content type="html"><![CDATA[<p>For all users of our Java SDK, we prepared some nice additions for you. This post covers them in detail and shows how you can get more productive.</p>

<p>Note that this blog post assumes you are running the 1.2.1 release, because there have been some slight changes between 1.2.0 and 1.2.1 that affect for example the listener support and metrics collection.</p>

<h2>Maven Central Distribution</h2>

<p>From the 1.2.0 release forward, the Java SDK is distributed directly from Maven Central. This means that you don&rsquo;t need to include the Couchbase repository anymore. The following maven code is enough to get started (note that the groupId has changed):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>        <span class="nt">&lt;groupId&gt;</span>com.couchbase.client<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;artifactId&gt;</span>couchbase-client<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;version&gt;</span>1.2.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependencies&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will automatically load the latest spymemcached dependency in as well (for 1.2.0 it&rsquo;s 2.10.0). Before we dig into what has changed, <a href="http://docs.couchbase.com/couchbase-sdk-java-1.2/#release-notes-for-couchbase-client-library-java-120-ga-13-september-2013">here</a> are the release notes for a quick reference.</p>

<h2>Listener Support</h2>

<p>Until now, there were two ways to get the result of an asynchronous request. Either by blocking the current thread like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// do an async operation (returns immediately)</span>
</span><span class='line'><span class="n">OperationFuture</span><span class="o">&lt;</span><span class="n">Boolean</span><span class="o">&gt;</span> <span class="n">setFuture</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">&quot;key&quot;</span><span class="o">,</span> <span class="s">&quot;value&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// block the current thread</span>
</span><span class='line'><span class="n">Boolean</span> <span class="n">result</span> <span class="o">=</span> <span class="n">setFuture</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or to loop on the non-blocking future methods. This is especially helpful if you are dealing with a list of futures.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">OperationFuture</span><span class="o">&lt;</span><span class="n">Boolean</span><span class="o">&gt;&gt;</span> <span class="n">futures</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">OperationFuture</span><span class="o">&lt;</span><span class="n">Boolean</span><span class="o">&gt;&gt;();</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">futures</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">client</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">&quot;key-&quot;</span> <span class="o">+</span> <span class="n">i</span><span class="o">,</span> <span class="s">&quot;value&quot;</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="o">(!</span><span class="n">futures</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">OperationFuture</span><span class="o">&lt;</span><span class="n">Boolean</span><span class="o">&gt;&gt;</span> <span class="n">iter</span> <span class="o">=</span> <span class="n">futures</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
</span><span class='line'>  <span class="k">while</span> <span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">OperationFuture</span><span class="o">&lt;</span><span class="n">Boolean</span><span class="o">&gt;</span> <span class="n">future</span> <span class="o">=</span> <span class="n">iter</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">future</span><span class="o">.</span><span class="na">isDone</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">iter</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now since 1.2.0, there is a new way to deal with responses &ndash; adding listeners. The idea is to supply a callback to the future which will be executed once the operation is done. A simple example is shown here:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">OperationFuture</span><span class="o">&lt;</span><span class="n">Boolean</span><span class="o">&gt;</span> <span class="n">setFuture</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">&quot;key&quot;</span><span class="o">,</span> <span class="s">&quot;value&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">setFuture</span><span class="o">.</span><span class="na">addListener</span><span class="o">(</span><span class="k">new</span> <span class="n">OperationCompletionListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onComplete</span><span class="o">(</span><span class="n">OperationFuture</span><span class="o">&lt;?&gt;</span> <span class="n">future</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">future</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the <code>.get()</code> method on the future will not block anymore because the result is already computed. Whatever you put in the callback method will be executed asynchronously on the thread pool. To see how flexible that approach is, let&rsquo;s rewrite the example from above waiting until the 100 futures are done.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">final</span> <span class="n">CountDownLatch</span> <span class="n">latch</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CountDownLatch</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">OperationFuture</span><span class="o">&lt;</span><span class="n">Boolean</span><span class="o">&gt;</span> <span class="n">future</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">&quot;key-&quot;</span> <span class="o">+</span> <span class="n">i</span><span class="o">,</span> <span class="s">&quot;value&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">future</span><span class="o">.</span><span class="na">addListener</span><span class="o">(</span><span class="k">new</span> <span class="n">OperationCompletionListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onComplete</span><span class="o">(</span><span class="n">OperationFuture</span><span class="o">&lt;?&gt;</span> <span class="n">future</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">latch</span><span class="o">.</span><span class="na">countDown</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">latch</span><span class="o">.</span><span class="na">await</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we are using a <a href="http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/CountDownLatch.html">CountDownLatch</a> which waits on the current thread as long as it has been counted down a hundred times. Exactly what we need in our situation, but the code is much easier to read. More importantly, its much more flexible because other things like firing off a new request, querying a web service or calculating a result can be done.</p>

<p>It is also possible to override the default <code>ExecutorService</code> implementation with a custom one. This may be needed if the default behavior (Basically a upper-bounded cachedThreadPool) does not suite your needs. Also, you should use this approach if you create a bunch of <code>CouchbaseClient</code> instances so you can share the same service across all of them.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Create the Builder</span>
</span><span class='line'><span class="n">CouchbaseConnectionFactoryBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CouchbaseConnectionFactoryBuilder</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Create a thread pool of 5 fixed threads</span>
</span><span class='line'><span class="n">ExecutorService</span> <span class="n">service</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>
</span><span class='line'><span class="c1">// Set it in the builder</span>
</span><span class='line'><span class="n">builder</span><span class="o">.</span><span class="na">setListenerExecutorService</span><span class="o">(</span><span class="n">service</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Create the instance</span>
</span><span class='line'><span class="n">CouchbaseClient</span> <span class="n">client</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CouchbaseClient</span><span class="o">(</span><span class="n">builder</span><span class="o">.</span><span class="na">buildCouchbaseConnection</span><span class="o">(...));</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Enhanced Profiling Capabilities</h2>

<p>Getting insight into a running application is always difficult, so we set out to make it easier for you. We incorporated a library called <a href="http://metrics.codahale.com/">metrics</a> that profiles, depending on the configuration level chosen.</p>

<p>Before you can use it, you need to add this optional dependency:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>com.codahale.metrics<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>metrics-core<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>3.0.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>On the builder, there is a method that allows you to activate the the profiler:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">CouchbaseConnectionFactoryBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CouchbaseConnectionFactoryBuilder</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// enable metric collection</span>
</span><span class='line'><span class="n">builder</span><span class="o">.</span><span class="na">setEnableMetrics</span><span class="o">(</span><span class="n">MetricType</span><span class="o">.</span><span class="na">PERFORMANCE</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you look at the <code>MetricType</code> enumeration you can see that there are three types of values you can choose from: OFF (which keeps metric collection off), PERFORMANCE (which only collects performance-relevant metrics) and DEBUG (which collects all kinds of metrics, including the performance ones). While the metrics library is quite efficient, keep in mind that metric collection takes some resources away from your application.</p>

<p>By default, the metric information will be printed out on the console every 30 seconds. You can run the following test code from your IDE and see how it looks:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">CouchbaseConnectionFactoryBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CouchbaseConnectionFactoryBuilder</span><span class="o">();</span>
</span><span class='line'><span class="n">builder</span><span class="o">.</span><span class="na">setEnableMetrics</span><span class="o">(</span><span class="n">MetricType</span><span class="o">.</span><span class="na">PERFORMANCE</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">CouchbaseConnectionFactory</span> <span class="n">cf</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">builder</span><span class="o">.</span><span class="na">buildCouchbaseConnection</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="k">new</span> <span class="n">URI</span><span class="o">(</span><span class="s">&quot;http://127.0.0.1:8091/pools&quot;</span><span class="o">)),</span> <span class="s">&quot;default&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">CouchbaseClient</span> <span class="n">client</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CouchbaseClient</span><span class="o">(</span><span class="n">cf</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">client</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="s">&quot;bar&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now wait 30 seconds and you&rsquo;ll see output like this in the console:</p>

<pre><code>10/8/13 12:04:14 PM ============================================================

-- Histograms ------------------------------------------------------------------
[MEM] Average Bytes read from OS per read
             count = 893
               min = 24
               max = 24
              mean = 24.00
            stddev = 0.00
            median = 24.00
              75% &lt;= 24.00
              95% &lt;= 24.00
              98% &lt;= 24.00
              99% &lt;= 24.00
            99.9% &lt;= 24.00
[MEM] Average Bytes written to OS per write
             count = 893
               min = 38
               max = 38
              mean = 38.00
            stddev = 0.00
            median = 38.00
              75% &lt;= 38.00
              95% &lt;= 38.00
              98% &lt;= 38.00
              99% &lt;= 38.00
            99.9% &lt;= 38.00
[MEM] Average Time on wire for operations (Âµs)
             count = 893
               min = 179
               max = 1730
              mean = 263.80
            stddev = 75.43
            median = 251.00
              75% &lt;= 280.00
              95% &lt;= 351.90
              98% &lt;= 425.36
              99% &lt;= 559.70
            99.9% &lt;= 1730.00

-- Meters ----------------------------------------------------------------------
[MEM] Request Rate: All
             count = 893
         mean rate = 9.92 events/second
     1-minute rate = 9.85 events/second
     5-minute rate = 9.68 events/second
    15-minute rate = 9.63 events/second
[MEM] Response Rate: All (Failure + Success + Retry)
             count = 893
         mean rate = 9.92 events/second
     1-minute rate = 9.85 events/second
     5-minute rate = 9.68 events/second
    15-minute rate = 9.63 events/second
</code></pre>

<p>I won&rsquo;t go into detail of all these metrics in this blog post, please refer to the documentation for a more complete picture. One more thing I want to show you is that the metrics library is also able to expose these metrics through JMX. All you need to do is set a system property that changes the output mode: <code>net.spy.metrics.reporter.type=jmx</code>. Other possible settings are <code>csv</code> and <code>slf4j</code>. If you choose a logger that prints out information at a given interval you can change it by setting <code>net.spy.metrics.reporter.interval</code> to anything else than 30.</p>

<p>So if you put the line <code>System.setProperty("net.spy.metrics.reporter.type", "jmx");</code> before the code shown above, you can open (for example) jConsole and switch to the MBeans tab of the application. You&rsquo;ll see a <code>metrics</code> subsection exposed that contains the same metrics as they would show up in the logs.</p>

<h2>CAS with Timeout</h2>

<p>Before 1.2.0, it was not possible in one command to do a <code>cas</code> update and set a new timeout at the same time. You had to do a second <code>touch</code> operation which was not efficient nor atomic. Now, the API exposes a new <code>cas()</code> method that allows you to pass in the timeout at the same time. It is easy to use:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">client</span><span class="o">.</span><span class="na">cas</span><span class="o">(</span><span class="s">&quot;key&quot;</span><span class="o">,</span> <span class="n">cas</span><span class="o">,</span> <span class="n">nexExpiration</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The asynchronous variations have been exposed since 1.2.1 as well.</p>

<h2>Initializing through Properties</h2>

<p>One thing that comes in handy if your cluster ip addresses change often is that you can now initialize a <code>CouchbaseClient</code> object based on system properties. Here is an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">&quot;cbclient.nodes&quot;</span><span class="o">,</span> <span class="s">&quot;http://127.0.0.1:8091/pools&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">&quot;cbclient.bucket&quot;</span><span class="o">,</span> <span class="s">&quot;default&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">&quot;cbclient.password&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">CouchbaseConnectionFactoryBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CouchbaseConnectionFactoryBuilder</span><span class="o">();</span>
</span><span class='line'><span class="n">CouchbaseConnectionFactory</span> <span class="n">cf</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">buildCouchbaseConnection</span><span class="o">();</span>
</span><span class='line'><span class="n">CouchbaseClient</span> <span class="n">client</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CouchbaseClient</span><span class="o">(</span><span class="n">cf</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course you can set these properties in your application container or during startup, so it&rsquo;s very flexible and not tied into your code directly. Note that if you forget to set one of these properties, the code will warn you like this:</p>

<pre><code>Exception in thread "main" java.lang.IllegalArgumentException: System property cbclient.nodes not set or empty
    at com.couchbase.client.CouchbaseConnectionFactory.&lt;init&gt;(CouchbaseConnectionFactory.java:160)
    at com.couchbase.client.CouchbaseConnectionFactoryBuilder$2.&lt;init&gt;(CouchbaseConnectionFactoryBuilder.java:318)
    at com.couchbase.client.CouchbaseConnectionFactoryBuilder.buildCouchbaseConnection(CouchbaseConnectionFactoryBuilder.java:318)
    at Main.main(Main.java:33)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:601)
    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120)
</code></pre>

<h2>Other Changes</h2>

<p>In addition to the enhancements shown above, the release includes &ndash; as always &ndash; numerous smaller bugfixes. The default poll interval for <code>ReplicateTo</code> and <code>PersistTo</code> has been lowered to <code>10ms</code> to account for performance changes that went into the Couchbase Sever 2.2 release. Also, the client now uses the <code>CRAM-MD5</code> authentication mechanism automatically if the server supports it (since 2.2 as well).</p>

<p>These awesome new features should be enough reason to upgrade right now! If anything pops up that doesn&rsquo;t work as expected, please ask customer support or open a ticket <a href="http://www.couchbase.com/issues/browse/JCBC">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using the Reactor Processor for High-Performance TCP]]></title>
    <link href="http://daschl.github.io/Using-the-Reactor-Processor-for-High-Performance-TCP"/>
    <updated>2013-08-13T14:49:48+02:00</updated>
    <id>http://daschl.github.io/Using-the-Reactor-Processor-for-High-Performance-TCP</id>
    <content type="html"><![CDATA[<p>First, a disclaimer: the all-new <a href="https://github.com/reactor/reactor">Reactor</a> framework is still under heavy development, but it already provides a very promising basement for applications and libraries that need high throughput and low latency. We at <a href="http://www.couchbase.com/">Couchbase</a> aim to provide the highest throughput at the lowest latency, so it is very critical to build upon an infrastructure that can provide it. Current, we are performing early investigations for a possible &ldquo;next generation Java SDK&rdquo; and Reactor seems very promising so far.</p>

<p>This blog post shows you how to quickly set up a Processor (we&rsquo;ll see in a minute what that is) that dispatches requests to Consumers (also a very common term in Reactor). In our case, the Consumer is actually a TCP socket. Please note that the actual numbers, while impressive, can&rsquo;t be used for real world measurements. What you&rsquo;ll see here is a raw throughput test to define a baseline what can be expected under ideal conditions. We are also using localhost here to avoid network latency (which is the bottleneck for most network applications).</p>

<p>I&rsquo;m going to use a Couchbase server as an endpoint, but feel free to use whatever you want instead. The whole API is very generic and the consumers can be exchanged easily.</p>

<h2>Setup</h2>

<p>Before we can get started, all we need to do is include the <code>reactor-tcp</code> artifact from maven. Now you can do this through gradle, maven, ivy or what you want, but at this point, I would recommend you to check out the <a href="https://github.com/reactor/reactor">reactor</a> project directly from github and build it on your own, so you&rsquo;ll have the latest and greatest code in your local repository:</p>

<pre><code>$ git clone https://github.com/reactor/reactor.git
$ cd reactor
$ ./gradlew install
</code></pre>

<p>This will download and install everything you need. The next step is to create a maven or gradle project in your IDE, but I&rsquo;ll leave that part up to the reader. The maven dependency you need to include is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>org.projectreactor<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>reactor-tcp<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>1.0.0.BUILD-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or, for all gradle folks:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">compile</span> <span class="s1">&#39;org.projectreactor:reactor-tcp:1.0.0.BUILD-SNAPSHOT&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The Processor</h2>

<p>Now, let&rsquo;s get to some actual code. The Processor is a very lightweight abstraction over the <a href="https://github.com/LMAX-Exchange/disruptor">LMAX Disruptor</a> a high performant RingBuffer. A RingBuffer provides much better characteristics than a normal Queue, and the Disruptor is heavily optimized for dispatching tasks in the nanosecond area (which means millions of operations per second). I recommend you to read <a href="https://github.com/LMAX-Exchange/disruptor/blob/master/docs/Disruptor.docx">this paper</a> and also check out talks by <a href="http://mechanical-sympathy.blogspot.co.at/">Martin Thompson</a> if you are interested.</p>

<p>The basic idea is that we decouple consumers from producers, so that each of them can work on their own pace (not blocking each other) and also benefiting from batching if the producers are faster than the consumers. We&rsquo;ll see why this is particularly important with TCP in a second.</p>

<p>A <code>Processor</code> can be created by instantiating a <code>ProcessorSpec</code> and defining some mandatory options. Then, the <code>Processor</code> is built for us.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ProcessorSpec</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">&lt;</span><span class="n">Buffer</span><span class="o">&gt;&gt;</span> <span class="n">writeProcessor</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ProcessorSpec</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">&lt;</span><span class="n">Buffer</span><span class="o">&gt;&gt;()</span>
</span><span class='line'>  <span class="o">.</span><span class="na">dataSupplier</span><span class="o">(</span><span class="k">new</span> <span class="n">Supplier</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">&lt;</span><span class="n">Buffer</span><span class="o">&gt;&gt;()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="n">Event</span><span class="o">&lt;</span><span class="n">Buffer</span><span class="o">&gt;</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="n">Event</span><span class="o">&lt;</span><span class="n">Buffer</span><span class="o">&gt;(</span><span class="k">new</span> <span class="n">Buffer</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">})</span>
</span><span class='line'>  <span class="o">.</span><span class="na">consume</span><span class="o">(</span><span class="k">new</span> <span class="n">Node</span><span class="o">(</span><span class="s">&quot;127.0.0.1&quot;</span><span class="o">,</span> <span class="n">environment</span><span class="o">))</span>
</span><span class='line'>  <span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that this <code>Spec</code> pattern is very common in reactor, as it allows for very easy and yet flexible object creation. There are a few things that we need to cover.</p>

<p>First, the generic type here is <code>Event&lt;Buffer&gt;</code>. The producers will wrap the payload (here we use raw <code>Buffers</code>) in an <code>Event</code> and the consumers will unwrap and use it properly. The <code>Event</code> type also allows for headers that can be used for custom routing, but we won&rsquo;t cover that here.</p>

<p>Second, the <code>dataSupplier</code> is a speciality of the Disruptor RingBuffer. In order to minimize garbage collection and make effective use of memory layout, we need to pre-allocate our container objects. They will be reused throughout the application and will never be garbage collected.</p>

<p>Third, through the <code>consume</code> method we can tell the <code>Processor</code> who will be notified when new data is added to the RingBuffer. In our case, the <code>Node</code> represents the TCP client which we&rsquo;ll build in a second.</p>

<p>Now, how do we write to the Processor? Let&rsquo;s add a simple method that does it for us:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">write</span><span class="o">(</span><span class="kd">final</span> <span class="n">Buffer</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">final</span> <span class="n">Operation</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">&lt;</span><span class="n">Buffer</span><span class="o">&gt;&gt;</span> <span class="n">op</span> <span class="o">=</span> <span class="n">writeProcessor</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>  <span class="n">op</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">setData</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
</span><span class='line'>  <span class="n">op</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, we get a <code>Operation</code> out of the processor (that wraps our data) and override it with the data that we actually want to store this time. You can see that we are not allocating new objects in the RingBuffer, we just use the old one that has been provided for us. With the <code>commit</code> method we put it back into the RingBuffer. Actually, behind the scenes, it makes use of Sequences and Barriers inside the RingBuffer, but this is completely hidden from us.</p>

<p>Here is the full code for the lazy reader:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">reactor.core.Environment</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">reactor.core.processor.Operation</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">reactor.core.processor.Processor</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">reactor.core.processor.spec.ProcessorSpec</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">reactor.event.Event</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">reactor.function.Supplier</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">reactor.io.Buffer</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MessageDispatcher</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Environment</span> <span class="n">environment</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Processor</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">&lt;</span><span class="n">Buffer</span><span class="o">&gt;&gt;</span> <span class="n">writeProcessor</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">MessageDispatcher</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">(</span><span class="k">new</span> <span class="n">Environment</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">MessageDispatcher</span><span class="o">(</span><span class="kd">final</span> <span class="n">Environment</span> <span class="n">env</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">environment</span> <span class="o">=</span> <span class="n">env</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">writeProcessor</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ProcessorSpec</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">&lt;</span><span class="n">Buffer</span><span class="o">&gt;&gt;()</span>
</span><span class='line'>      <span class="o">.</span><span class="na">dataSupplier</span><span class="o">(</span><span class="k">new</span> <span class="n">Supplier</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">&lt;</span><span class="n">Buffer</span><span class="o">&gt;&gt;()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Event</span><span class="o">&lt;</span><span class="n">Buffer</span><span class="o">&gt;</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="k">new</span> <span class="n">Event</span><span class="o">&lt;</span><span class="n">Buffer</span><span class="o">&gt;(</span><span class="k">new</span> <span class="n">Buffer</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">})</span>
</span><span class='line'>      <span class="o">.</span><span class="na">consume</span><span class="o">(</span><span class="k">new</span> <span class="n">Node</span><span class="o">(</span><span class="s">&quot;127.0.0.1&quot;</span><span class="o">,</span> <span class="n">environment</span><span class="o">))</span>
</span><span class='line'>      <span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">write</span><span class="o">(</span><span class="kd">final</span> <span class="n">Buffer</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">Operation</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">&lt;</span><span class="n">Buffer</span><span class="o">&gt;&gt;</span> <span class="n">op</span> <span class="o">=</span> <span class="n">writeProcessor</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>    <span class="n">op</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">setData</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
</span><span class='line'>    <span class="n">op</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>One final note before we move on: did you spot the <code>Environment</code> here? This is also a common theme in the Reactor framework. The <code>Environment</code> is used in many places to signal information about &ndash; who would have thought that &ndash; the JVM environment. The general recommendation is to create only one <code>Environment</code> instance per JVM, so we happily pass it around in our small application.</p>

<h2>The Consumer</h2>

<p>Before we get into the nitty-gritty network details, let&rsquo;s add a consumer that just prints out the data that he &ldquo;sees&rdquo;. If you want to try this sample, make sure to change the previous code temporarily from <code>.consume(new Node(...))</code> to <code>.consume(new EchoConsumer())</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EchoConsumer</span> <span class="kd">implements</span> <span class="n">Consumer</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">&lt;</span><span class="n">Buffer</span><span class="o">&gt;&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="kd">final</span> <span class="n">Event</span><span class="o">&lt;</span><span class="n">Buffer</span><span class="o">&gt;</span> <span class="n">bufferEvent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">bufferEvent</span><span class="o">.</span><span class="na">getData</span><span class="o">().</span><span class="na">asBytes</span><span class="o">()));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>accept</code> method is always called once there is information available on the Processor. Let&rsquo;s add a simple test case to verify that this works:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">reactor.io.Buffer</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MessageDispatcherTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Test</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">echoSomeGarbage</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">MessageDispatcher</span> <span class="n">dispatcher</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MessageDispatcher</span><span class="o">();</span>
</span><span class='line'>    <span class="n">dispatcher</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">Buffer</span><span class="o">.</span><span class="na">wrap</span><span class="o">(</span><span class="s">&quot;Hello World!&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now if we run this test, we should see <code>[72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]</code> printed on the console &ndash; great! This is the byte array representation of our wrapped buffer. Of course we could make our lives easier and use <code>Strings</code> instead of <code>Buffer</code> in our implementation, but the <code>Buffer</code> works much better with network communication.</p>

<p>The next step would be to send the data over the network. Let&rsquo;s replace our Consumer with a more intelligent one. Be aware that the <code>TcpClient</code> that you&rsquo;ll see doesn&rsquo;t communicate with Java NIO directly &ndash; it makes use of the excellent <a href="http://netty.io/">Netty</a> project which provides a convenient and performant wrapper around NIO and OIO (we use NIO here).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Node</span> <span class="kd">implements</span> <span class="n">Consumer</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">&lt;</span><span class="n">Buffer</span><span class="o">&gt;&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">TcpClient</span><span class="o">&lt;</span><span class="n">Buffer</span><span class="o">,</span> <span class="n">Buffer</span><span class="o">&gt;</span> <span class="n">client</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">TcpConnection</span><span class="o">&lt;</span><span class="n">Buffer</span><span class="o">,</span> <span class="n">Buffer</span><span class="o">&gt;</span> <span class="n">conn</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Node</span><span class="o">(</span><span class="n">String</span> <span class="n">hostname</span><span class="o">,</span> <span class="n">Environment</span> <span class="n">env</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">client</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TcpClientSpec</span><span class="o">&lt;</span><span class="n">Buffer</span><span class="o">,</span> <span class="n">Buffer</span><span class="o">&gt;(</span><span class="n">NettyTcpClient</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">env</span><span class="o">(</span><span class="n">env</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">connect</span><span class="o">(</span><span class="n">hostname</span><span class="o">,</span> <span class="mi">11210</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">conn</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">open</span><span class="o">().</span><span class="na">await</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="kd">final</span> <span class="n">Event</span><span class="o">&lt;</span><span class="n">Buffer</span><span class="o">&gt;</span> <span class="n">bufferEvent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Buffer</span> <span class="n">buf</span> <span class="o">=</span> <span class="n">bufferEvent</span><span class="o">.</span><span class="na">getData</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">final</span> <span class="n">CountDownLatch</span> <span class="n">latch</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CountDownLatch</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>    <span class="n">conn</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">buf</span><span class="o">,</span> <span class="k">new</span> <span class="n">Consumer</span><span class="o">&lt;</span><span class="n">Boolean</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="kd">final</span> <span class="n">Boolean</span> <span class="n">success</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">latch</span><span class="o">.</span><span class="na">countDown</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">latch</span><span class="o">.</span><span class="na">await</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="kd">final</span> <span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">&quot;Something went wrong while waiting :(&quot;</span><span class="o">,</span> <span class="n">ex</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>While this might seem like a lot of code, it&rsquo;s not so bad. We do two things here. During object construction, we create a new <code>TcpClient</code> through the <code>TcpClientSpec</code> (see the Spec again?) and pass it the environment and the socket to connect to. The next thing we need to do is actually open the connection and wait until finished.</p>

<p>Now that we have an open connection, we can write to it. Since everything is non-blocking in Reactor, so is socket writing. In order to not overwhelm the underlying infrastructure, we have to wait until it is actually finished before moving on to handle the next <code>Event</code> in the Processor. We do this by using a <code>CountDownLatch</code>, which will be counted down once the writing has finished. In our simple example we just fail if it took longer than one second. In a real application, one could report errors or retry with Backoff.</p>

<p>Before we can run that code, we need to add a test case to make it all work.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Buffer</span><span class="o">[]</span> <span class="n">buffers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Buffer</span><span class="o">[</span><span class="mi">10</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Before</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">initBuffers</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>  <span class="o">{</span>
</span><span class='line'>      <span class="n">Buffer</span> <span class="n">buf</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Buffer</span><span class="o">(</span><span class="mi">30</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>      <span class="n">buf</span><span class="o">.</span><span class="na">append</span><span class="o">((</span><span class="kt">byte</span><span class="o">)</span><span class="mh">0x80</span><span class="o">);</span> <span class="c1">// Magic Byte</span>
</span><span class='line'>      <span class="n">buf</span><span class="o">.</span><span class="na">append</span><span class="o">((</span><span class="kt">byte</span><span class="o">)</span><span class="mh">0x09</span><span class="o">);</span> <span class="c1">// GETQ Opcode</span>
</span><span class='line'>      <span class="n">buf</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="k">new</span> <span class="kt">byte</span><span class="o">[]</span> <span class="o">{</span><span class="mh">0x00</span><span class="o">,</span> <span class="mh">0x03</span><span class="o">});</span> <span class="c1">// 3 byte keylength (KEY)</span>
</span><span class='line'>      <span class="n">buf</span><span class="o">.</span><span class="na">append</span><span class="o">((</span><span class="kt">byte</span><span class="o">)</span><span class="mh">0x00</span><span class="o">);</span> <span class="c1">// Extra Length</span>
</span><span class='line'>      <span class="n">buf</span><span class="o">.</span><span class="na">append</span><span class="o">((</span><span class="kt">byte</span><span class="o">)</span><span class="mh">0x00</span><span class="o">);</span> <span class="c1">// data type</span>
</span><span class='line'>      <span class="n">buf</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="k">new</span> <span class="kt">byte</span><span class="o">[]</span> <span class="o">{</span><span class="mh">0x00</span><span class="o">,</span> <span class="mh">0x00</span><span class="o">});</span> <span class="c1">// reserved</span>
</span><span class='line'>      <span class="n">buf</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="k">new</span> <span class="kt">byte</span><span class="o">[]</span> <span class="o">{</span><span class="mh">0x00</span><span class="o">,</span> <span class="mh">0x00</span><span class="o">,</span> <span class="mh">0x00</span><span class="o">,</span> <span class="mh">0x03</span><span class="o">});</span> <span class="c1">// total body size</span>
</span><span class='line'>      <span class="n">buf</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="k">new</span> <span class="kt">byte</span><span class="o">[]</span> <span class="o">{</span><span class="mh">0x00</span><span class="o">,</span> <span class="mh">0x00</span><span class="o">,</span> <span class="mh">0x00</span><span class="o">,</span> <span class="mh">0x00</span><span class="o">});</span> <span class="c1">// Opaque</span>
</span><span class='line'>      <span class="n">buf</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="k">new</span> <span class="kt">byte</span><span class="o">[]</span> <span class="o">{</span><span class="mh">0x00</span><span class="o">,</span> <span class="mh">0x00</span><span class="o">,</span> <span class="mh">0x00</span><span class="o">,</span> <span class="mh">0x00</span><span class="o">,</span> <span class="mh">0x00</span><span class="o">,</span> <span class="mh">0x00</span><span class="o">,</span> <span class="mh">0x00</span><span class="o">,</span> <span class="mh">0x00</span><span class="o">});</span> <span class="c1">// CAS</span>
</span><span class='line'>      <span class="n">buf</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="k">new</span> <span class="kt">byte</span><span class="o">[]</span> <span class="o">{</span><span class="mh">0x65</span><span class="o">,</span> <span class="mh">0x6F</span><span class="o">,</span> <span class="o">(</span><span class="kt">byte</span><span class="o">)(</span><span class="n">i</span> <span class="o">%</span> <span class="mi">9</span><span class="o">)});</span>
</span><span class='line'>      <span class="n">buffers</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">buf</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">giveItSomeLoad</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">MessageDispatcher</span> <span class="n">dispatcher</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MessageDispatcher</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">long</span> <span class="n">amountOfOps</span> <span class="o">=</span> <span class="mi">100000000</span><span class="o">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="kt">long</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">amountOfOps</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">dispatcher</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="k">new</span> <span class="n">Buffer</span><span class="o">(</span><span class="n">buffers</span><span class="o">[(</span><span class="kt">int</span><span class="o">)(</span><span class="n">i</span> <span class="o">%</span> <span class="mi">9</span><span class="o">)]).</span><span class="na">flip</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To actually simulate something real, this test creates ten buffer instances with Couchbase messages. Those familiar with the memcached binary protocol can identify it as a GETQ request. This means it does not return anything when the key is not found (which is what we want, because in this case we want to benchmark the upper limit for write throughput and not concern us with parsing of error responses). Once the data is created, we run a given amount of operations and call the <code>write</code> method on the <code>MessageDispatcher</code>.</p>

<h2>Batch all the things!</h2>

<p>If we run this, we get a &ndash; very disappointing &ndash; number of only 50K ops/s. In addition, we get lots of CPU usage on the Java process (100% and more on a quad core processor here). Why is it so slow? The answer is: network overhead. In our case, we send out 27 byte chunks over the network. With all the TCP, IP and Ethernet headers, there is lots of unnecessary overhead involved that puts down our performance. The answer to that is batching! If our producers are faster than the consumers, we can batch the intermediate data up into a buffer and send it over the wire in one chunk. This will give us a much better goodput ratio.</p>

<p>To help us with batching the Disruptor and the Processor expose the start end end of a batching phase to our consumer. To get this information, we need to extend from the <code>BatchConsumer</code> instead of the regular <code>Consumer</code>. Let&rsquo;s refactor our node and add some batching characteristics:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BatchingNode</span> <span class="kd">implements</span> <span class="n">BatchConsumer</span><span class="o">&lt;</span><span class="n">Event</span><span class="o">&lt;</span><span class="n">Buffer</span><span class="o">&gt;&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">TcpClient</span><span class="o">&lt;</span><span class="n">Buffer</span><span class="o">,</span> <span class="n">Buffer</span><span class="o">&gt;</span> <span class="n">client</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">TcpConnection</span><span class="o">&lt;</span><span class="n">Buffer</span><span class="o">,</span> <span class="n">Buffer</span><span class="o">&gt;</span> <span class="n">conn</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Buffer</span> <span class="n">writeBuffer</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">BatchingNode</span><span class="o">(</span><span class="n">String</span> <span class="n">hostname</span><span class="o">,</span> <span class="n">Environment</span> <span class="n">env</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">client</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TcpClientSpec</span><span class="o">&lt;</span><span class="n">Buffer</span><span class="o">,</span> <span class="n">Buffer</span><span class="o">&gt;(</span><span class="n">NettyTcpClient</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">env</span><span class="o">(</span><span class="n">env</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">connect</span><span class="o">(</span><span class="n">hostname</span><span class="o">,</span> <span class="mi">11210</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">conn</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">open</span><span class="o">().</span><span class="na">await</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">writeBuffer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Buffer</span><span class="o">(</span><span class="mi">1500</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">end</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">flush</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="kd">final</span> <span class="n">Event</span><span class="o">&lt;</span><span class="n">Buffer</span><span class="o">&gt;</span> <span class="n">bufferEvent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Buffer</span> <span class="n">buf</span> <span class="o">=</span> <span class="n">bufferEvent</span><span class="o">.</span><span class="na">getData</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">writeBuffer</span><span class="o">.</span><span class="na">remaining</span><span class="o">()</span> <span class="o">&lt;=</span> <span class="n">buf</span><span class="o">.</span><span class="na">remaining</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">flush</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">writeBuffer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">buf</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">flush</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">CountDownLatch</span> <span class="n">latch</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CountDownLatch</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>    <span class="n">writeBuffer</span><span class="o">.</span><span class="na">flip</span><span class="o">();</span>
</span><span class='line'>    <span class="n">conn</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">writeBuffer</span><span class="o">,</span> <span class="k">new</span> <span class="n">Consumer</span><span class="o">&lt;</span><span class="n">Boolean</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="kd">final</span> <span class="n">Boolean</span> <span class="n">success</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">latch</span><span class="o">.</span><span class="na">countDown</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">latch</span><span class="o">.</span><span class="na">await</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="kd">final</span> <span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">&quot;got ex&quot;</span><span class="o">,</span> <span class="n">ex</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">writeBuffer</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code here is not much different. Note that we refactored the writing part out into the <code>flush</code> method. In the <code>accept</code> method, we write to the network if the buffer is full, otherwise we just add it to our write buffer. Note that we also need to <code>flush</code> if the batching is over (notified through the <code>end</code> method), otherwise we would potentially keep data around for a longer time than needed (and latency is still important to us).</p>

<p>Let&rsquo;s run the test case again&hellip; now we get 500k ops/s with only 40% CPU load on the java process! Now that&rsquo;s what I call an improvement!</p>

<h2>Summary</h2>

<p>This was a very quick introduction into the Processor, just one piece in the very promising Reactor framework. There is so much more to blog about in the future, so stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Useful Couchbase Resources & Blog Posts]]></title>
    <link href="http://daschl.github.io/Useful-Couchbase-Resources-Blog-Posts"/>
    <updated>2013-08-06T14:49:48+02:00</updated>
    <id>http://daschl.github.io/Useful-Couchbase-Resources-Blog-Posts</id>
    <content type="html"><![CDATA[<p>The following list is a convenient way to get access to lots of resources, blog posts and material that have been shared throughout the past months. I tried to separate them by area, but of course lots of them overlap to some extent.</p>

<p>They are sorted by date (so you&rsquo;ll find the most recent ones on top) and include the author where possible. Be aware that some of the older articles may already be outdated  or not 100% accurate.</p>

<p>I&rsquo;ll try to update this page as new articles get published, so it may pay off to come back here from time to time and check out the topmost ones. If you want to see your article included, post them in the comments!</p>

<h2>Starting Out</h2>

<ul>
<li><a href="http://www.couchbase.com/docs/couchbase-manual-2.1.0/">Official Couchbase Server 2.1 Manual</a>: The official manual and a good starting point for all kinds of general-purpose and architectural questions.</li>
<li><a href="http://www.couchbase.com/docs/couchbase-devguide-2.1.0/">Couchbase Server 2.1 Developer Guide</a>: The developer guide is particularly useful for developers that are new to document modeling and general app-related questions.</li>
<li><a href="http://www.couchbase.com/communities">The Community Portal</a>: Starting point for all SDK-related questions and links.</li>
<li>2013-04-24 <a href="http://blog.couchbase.com/top-10-things-ops-sys-admin-must-know-about-couchbase">Top 10 things an Ops / Sys admin must know about Couchbase</a>: Ten short rules that sys admins that maintain Couchbase clusters should keep in mind.</li>
<li>2012-07-06 <a href="http://tugdualgrall.blogspot.co.at/2012/07/couchbase-101-install-store-and-query.html">Couchbase 101 : Install, Store and Query Data (tgrall)</a>: A very basic introduction for people starting out, teaching the very basics in a hands-on fashion.</li>
</ul>


<h2>Installation &amp; Infrastructure</h2>

<ul>
<li><a href="http://www.couchbase.com/docs/couchbase-manual-2.1.0/couchbase-getting-started.html">Official Installation Guide for 2.1</a>: The official installation guide, read this before installing on production systems.</li>
<li>2013-08-05 <a href="http://trondn.blogspot.no/2013/08/running-couchbase-211-on-smartos.html">Running Couchbase 2.1.1 on SmartOS (trondn)</a>: Learn how to &ndash; step by step &ndash; compile and run a Couchbase cluster on SmartOS. This is for all the Solaris fans out there!</li>
<li>2013-07-22 <a href="http://blog.couchbase.com/deploying-couchbase-chef">Deploying Couchbase with Chef (ketakigangal)</a>: If you use Chef to automate your infrastructure, this blog post shows you how to integrate Couchbase with it.</li>
<li>2013-07-11 <a href="http://tugdualgrall.blogspot.co.at/2013/07/deploy-your-nodecouchbase-application.html">Deploy your Node/Couchbase application to the cloud with Clever Cloud (tgrall)</a>: You&rsquo;ll learn how to deploy your Node.JS app with Couchbase onto &ldquo;clever cloud&rdquo;, a PaaS provider.</li>
<li>2013-06-27 <a href="http://www.ebruakagunduz.com/2013/06/nagios-plugin-to-monitor-couchbase.html?spref=tw">Nagios plugin to monitor Couchbase (Ebru Akagündüz)</a>: If you are using Nagios to monitor your infrastructure, this post shows you how to integrate Couchbase with a single plugin.</li>
<li>2013-05-31 <a href="http://tugdualgrall.blogspot.co.at/2013/05/create-couchbase-cluster-in-one-command.html">Create a Couchbase cluster in less than a minute with Ansible (tgrall)</a>: Create a Couchbase cluster automatically with Ansible, a systems automation framework like chef.</li>
<li>2013-05-27 <a href="http://nitschinger.at/A-Couchbase-Cluster-in-Minutes-with-Vagrant-and-Puppet">A Couchbase Cluster in Minutes with Vagrant and Puppet (daschl)</a>: If you want to setup a 4 node cluster with couchbase in minutes, this blog post shows you how to do it.</li>
</ul>


<h2>Document Design &amp; Data Import/Export</h2>

<ul>
<li>2013-07-18 <a href="http://tugdualgrall.blogspot.co.at/2013/07/how-to-implement-document-versioning.html">How to implement Document Versioning with Couchbase (tgrall)</a>: See how to implement document versioning by using a key-based approach. Uses the Java SDK, but can be adapted for all languages.</li>
<li>2013-07-08 <a href="http://dev.theladders.com/2013/07/denormalize-the-datas-for-great-good">Denormalize the Datas for Great Good (John Connolly)</a>: See how TheLadders benefited from denormalizing its dataset and using Couchbase, greatly reducing their response times.</li>
<li>2013-07-03 <a href="http://tugdualgrall.blogspot.co.at/2013/07/sql-to-nosql-importing-data-from-rdbms.html">SQL to NoSQL : Copy your data from MySQL to Couchbase (tgrall)</a>: A Java-based tool to import data from a SQL database into Couchbase.</li>
</ul>


<h2>Views</h2>

<ul>
<li>2013-07-25 <a href="http://blog.couchbase.com/caching-queries-couchbase-high-performance">Caching queries in Couchbase for high performance (Alexis Roos)</a>: Learn how to cache view results for better performance.</li>
<li>2013-07-12 <a href="http://blog.couchbase.com/calculating-average-document-size-documents-stored-couchbase">Calculating average document size of documents stored in Couchbase. (Alexis Roos)</a>: With a simple map and a custom reduce function, one can easily calculate the average document size in the bucket.</li>
<li>2013-06-14 <a href="http://avsej.net/2013/analyzing-binary-data-in-couchbase">Analyzing Binary Data in Couchbase (avsej)</a>: Shows how to access binary (non-json) data from a View. Uses ruby to store the data, but can be adapted to any language.</li>
<li>2013-02-18 <a href="http://tugdualgrall.blogspot.co.at/2013/02/how-to-get-latest-document-by-datetime.html">How to get the latest document by date/time field (tgrall)</a>: A simple example on how to sort View-data based on a timestamp.</li>
<li>2013-02-13 <a href="http://tugdualgrall.blogspot.co.at/2013/02/introduction-to-collated-views-with.html">Introduction to Collated Views with Couchbase 2.0 (tgrall)</a>: Views can also be used to output &ldquo;master/detail&rdquo;-like scenarios. This post shows how.</li>
</ul>


<h2>Java SDK &amp; JVM</h2>

<ul>
<li><a href="http://www.couchbase.com/communities/java/getting-started">Getting Started &amp; Download</a>: The official &ldquo;Getting Started&rdquo; page for the Java SDK. Introduction, Tutorial and Downloads.</li>
<li>2013-05-16 <a href="http://nitschinger.at/Logging-with-the-Couchbase-Java-Client">Logging with the Couchbase Java Client (daschl)</a>: An in-depth post about how to correctly configure logging for the Java SDK (and the underlying spymemcached library).</li>
<li>2013-04-17 <a href="http://nitschinger.at/Couchbase-Java-SDK-Internals">Couchbase Java SDK Internals (daschl)</a>: A very detailed post about the inner workings of the Java SDK. Recommended for advanced users who want to understand more of the internals.</li>
<li>2012-12-30 <a href="http://tugdualgrall.blogspot.co.at/2012/12/couchbase-101-create-views-mapreduce.html">Couchbase 101: Create views (MapReduce) from your Java application (tgrall)</a>: How to create views and design documents directly from the Java SDK.</li>
<li>2012-11-05 <a href="http://tugdualgrall.blogspot.co.at/2012/11/couchbase-create-large-dataset-using.html">Couchbase : Create a large dataset using Twitter and Java (tgrall)</a>: Feed data from Twitter directly into your Couchbase cluster through the Java SDK.</li>
<li>2012-04-26 <a href="http://nitschinger.at/Accessing-Couchbase-from-Scala">Accessing Couchbase from Scala (daschl)</a>: How to access the Couchbase Java SDK from the Scala programing language.</li>
</ul>


<h2>.NET</h2>

<ul>
<li><a href="http://www.couchbase.com/communities/net/getting-started">Getting Started &amp; Download</a>: The official &ldquo;Getting Started&rdquo; page for the .NET SDK. Introduction, Tutorial and Downloads.</li>
<li>2013-06-14 <a href="http://vimeo.com/68378224">Video: Code-First NoSQL with .NET and Couchbase (John Zablocki)</a>: A video where John Zablocki gives an introduction into NoSQL development and especially with Couchbase.</li>
<li>2013-03-06 <a href="http://blog.couchbase.com/net-couchbase-client-instrumentation-aspnet-and-glimpse">.NET Couchbase Client Instrumentation with ASP.NET and Glimpse (John Zablocki)</a>: See how to get your Couchbase server-side logging errors easily displayed in the browser console. Very helpful during development.</li>
<li>2013-02-01 <a href="http://blog.couchbase.com/moving-no-schema-stack-c-and-dynamic-types">Moving No Schema up the Stack with C# and Dynamic Types (John Zablocki)</a>: This blog post shows how to store schemaless data with both dictionaries and C#&rsquo;s dynamic typing.</li>
<li>2013-01-04 <a href="http://blog.couchbase.com/xdcr-aspnet-and-nancy">XDCR with ASP.NET and Nancy (John Zablocki)</a>: Learn how to build an XDCR endpoint (like ElasticSearch integration) and read the data through our XDCR mechanisms.</li>
<li>2012-10-23 <a href="http://blog.couchbase.com/using-c-domain-objects-define-couchbase-views">Using C# Domain Objects to Define Couchbase Views (John Zablocki)</a>: How to automatically create DesignDocuments based of C# domain objects.</li>
<li>2012-10-05 <a href="http://blog.couchbase.com/new-visual-studio-code-snippets-net-couchbase-client-library">New Visual Studio Code Snippets for the .NET Couchbase Client Library (John Zablocki)</a>: A collection of helpful snippets in the day-to-day development process.</li>
<li>2012-09-20 <a href="http://blog.couchbase.com/strongly-typed-views-net-client-library">Strongly Typed Views with the .NET Client Library (John Zablocki)</a>: Learn how to map View responses directly onto domain objects.</li>
<li>2012-08-01 <a href="http://blog.couchbase.com/introducing-couchbase-aspnet-outputcache-provider">Introducing the Couchbase ASP.NET OutputCache Provider (John Zablocki)</a>: A short post on how to use Couchbase for easy caching in the ASP.NET environment.</li>
</ul>


<h2>PHP</h2>

<p>(Note: some of these posts are outdated in the way that currently the &ldquo;way to go&rdquo; when installing the PHP SDK is through PECL. See the the <a href="http://www.couchbase.com/communities/php/getting-started">Getting Started &amp; Download</a> guide for more information.)</p>

<ul>
<li><a href="http://www.couchbase.com/communities/php/getting-started">Getting Started &amp; Download</a>: The official &ldquo;Getting Started&rdquo; page for the PHP SDK. Introduction, Tutorial and Downloads.</li>
<li>2013-04-02  <a href="http://trondn.blogspot.co.at/2013/04/couchbase-php-xampp-and-windows.html">Couchbase, PHP, XAMPP and Windows (trondn)</a>: A short post on how to use the PHP SDK from Microsoft Windows.</li>
<li>2013-04-01 <a href="http://trondn.blogspot.co.at/2013/04/building-couchbase-php-driver-on-ubuntu.html">Building Couchbase PHP driver on Ubuntu (trondn)</a>: Learn how to build the Couchbase driver on Ubuntu and use it in a simple program.</li>
<li>2013-02-04 <a href="http://trondn.blogspot.co.at/2013/02/accessing-couchbase-from-php-on-your-mac.html">Accessing Couchbase from PHP on your Mac! (trondn)</a> Building and running the SDK on your Mac is easy, learn how to do it in this post.</li>
<li>2012-11-01 <a href="http://trondn.blogspot.co.at/2012/11/building-php-extension-for-couchbase-on.html">Building the PHP extension for Couchbase on Microsoft Windows! (trondn)</a>: Learn how to compile the SDK on Windows using Visual Studio 2008.</li>
<li>2012-06-25 <a href="http://nitschinger.at/How-to-store-PHP-sessions-in-Couchbase">How to store PHP sessions in Couchbase (daschl)</a>: This post shows how to store PHP sessions in Couchbase using different mechanims (not only the official SDK).</li>
<li>2012-06-21 <a href="http://nitschinger.at/Using-Couchbase-as-a-flexible-session-store">Using Couchbase as a flexible session store (daschl)</a>: With Couchbase Server 2.0, JSON data and Views, its easy to run metrics over your sessions and identify user behavior. Learn how in this post.</li>
</ul>


<h2>C &amp; Go</h2>

<ul>
<li><a href="http://www.couchbase.com/communities/c/getting-started">Getting Started &amp; Download with the C SDK</a>: The official &ldquo;Getting Started&rdquo; page for the C SDK. Introduction, Tutorial and Downloads.</li>
<li><a href="https://github.com/couchbaselabs/go-couchbase">Official Go Client Repository</a>: The Go repository with code and simple examples.</li>
</ul>


<h2>Ruby</h2>

<ul>
<li><a href="http://www.couchbase.com/communities/ruby/getting-started">Getting Started &amp; Download</a>: The official &ldquo;Getting Started&rdquo; page for the Ruby SDK. Introduction, Tutorial and Downloads.</li>
<li>2013-02-23 <a href="http://avsej.net/links/2013/couchbase-and-rails/">Couchbase and Rails Talk (avsej)</a>: A presentation by our lead Ruby SDK developer on how to integrate it with Ruby on Rails.</li>
<li>2013-02-11 <a href="http://blog.couchbase.com/using-couchbase-ruby-gem-eventmachine">Using Couchbase Ruby Gem with EventMachine (avsej)</a>: This post shows how to use the Ruby SDK together with the high performance EventMachine (custom protocols and performance for TCP/IP) gem.</li>
</ul>


<h2>Node.JS</h2>

<ul>
<li>2013-03-06 <a href="http://tugdualgrall.blogspot.co.at/2013/03/easy-application-development-with.html">Easy application development with Couchbase, Angular and Node (tgrall)</a>: Storing Ideas and Votes in Couchbase with Angular and NodeJS.</li>
<li>2013-01-04 <a href="http://tugdualgrall.blogspot.co.at/2013/01/getting-started-with-couchbase-and.html">Getting started with Couchbase and node.js on Windows (tgrall)</a>: How to install and use the NodeJS Couchbase client library on Windows.</li>
<li>2012-11-13 <a href="http://tugdualgrall.blogspot.co.at/2012/11/building-chat-application-using-nodejs.html">Building a chat application using Node.js and Couchbase (tgrall)</a>: A nice chat application using Couchbase, NodeJS and socket.io for &ldquo;real time&rdquo; feeling.</li>
<li>2012-09-24 <a href="http://tugdualgrall.blogspot.co.at/2012/09/create-simple-nodejs-and-couchbase.html">Create a Simple Node.js and Couchbase application&hellip; on OS X (tgrall)</a> A simple (but maybe outdated) tutorial on how to use the NodeJS driver from OSX.</li>
</ul>


<h2>Python</h2>

<ul>
<li><a href="http://www.couchbase.com/communities/python/getting-started">Getting Started &amp; Download</a>: The official &ldquo;Getting Started&rdquo; page for the Python SDK. Introduction, Tutorial and Downloads.</li>
<li>2013-06-21 <a href="http://mnunberg.github.io/2013/python-extension-windows-binaries">Python Extension Windows Binaries (mnunberg)</a>: A tale by our maintainer of the Python SDK on how to upload Windows binaries to PyPi.</li>
<li>2013-05-30 <a href="http://blog.couchbase.com/whats-python-couchbase-sdk">What&rsquo;s up with the Python Couchbase SDK (volker)</a>: A rundown of the latest changes on the Python SDK.</li>
</ul>


<h2>Ecosystem</h2>

<ul>
<li>2013-07-31 <a href="http://www.ortussolutions.com/blog/couchbase-cluster-setup-orm-secondary-cache-introduction">Couchbase: Cluster Setup + ORM Secondary Cache Introduction (Brad Wood)</a>: Using ColdFusion and looking for a secondary cache implementation? Look no further.</li>
<li>2013-07-22 <a href="http://blog.jeroenreijn.com/2013/07/visitor-analysis-with-couchbase-elasticsearch.html">Real-time visitor analysis with Couchbase, Elasticsearch and Kibana (Jeroen Reijn)</a>: A great post on a customer&rsquo;s use case for real-time visitor analysis.</li>
</ul>


<h2>Troubleshooting</h2>

<ul>
<li><a href="http://www.couchbase.com/docs/couchbase-manual-2.1.0/couchbase-troubleshooting.html">Official troubleshooting Guide</a>: The best place to start if something goes wrong on the server and you don&rsquo;t know why.</li>
<li>2012-12-26 <a href="http://tugdualgrall.blogspot.co.at/2012/12/what-to-do-if-your-couchbase-server.html">What to do if your Couchbase Server does not start? (tgrall)</a>: If you have troubles getting older Couchbase Server 2.0 versions to run on Windows, this post is for you.</li>
</ul>


<h2>Fun Stuff</h2>

<ul>
<li><a href="https://github.com/couchbaselabs/DeveloperDay">Example code for lots of SDKs and Languages</a>: Our DeveloperDay material with hands-on code examples to try and learn.</li>
<li>2013-06-18 <a href="http://nitschinger.at/Fun-with-Couchbase-Views-and-Message-Pack">Fun with Couchbase Views and MessagePack (daschl)</a>: While JSON is tried and true, with a little twiggling and some fun you can get Couchbase Views to speak MessagePack!</li>
<li>2013-04-29 <a href="http://tugdualgrall.blogspot.co.at/2013/04/screencast-fun-with-couchbase-mapreduce.html">Screencast : Fun with Couchbase, MapReduce and Twitter (tgrall)</a>: A Screencast on importing Twitter data into Couchbase and analyzing it on the fly through Views.</li>
</ul>


<p>Last Updated: 2013-08-06 (daschl)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Printing JVM Generated Assembler on Mac OS X]]></title>
    <link href="http://daschl.github.io/Printing-JVM-generated-Assembler-on-Mac-OS-X"/>
    <updated>2013-06-24T14:49:48+02:00</updated>
    <id>http://daschl.github.io/Printing-JVM-generated-Assembler-on-Mac-OS-X</id>
    <content type="html"><![CDATA[<p>Thankfully, the JVM abstracts all of the nitty gritty details from us. Sometimes though, we need to peel off the first layers and see what&rsquo;s going on underneath. If you are curious (and here may be dragons) and want to learn about the actual <a href="http://en.wikipedia.org/wiki/Assembly_language">assembler</a> that your code is generating, the JVM provides mechanisms to inspect it.</p>

<p>Since I wanted to make it work on my development machine and didn&rsquo;t find something comprehensive for Mac, here is how to do it.</p>

<p>First, make sure to have a more or less recent JDK installed. Mac ships with Java 6, but I think you want to upgrade to 7. You can grab the JDK packages from <a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html">here</a> if you haven&rsquo;t already.</p>

<pre><code>~ $ java -version
java version "1.7.0_17"
Java(TM) SE Runtime Environment (build 1.7.0_17-b02)
Java HotSpot(TM) 64-Bit Server VM (build 23.7-b01, mixed mode)
</code></pre>

<p>Now to enable the ASM output, you need to pass in two flags, namely <code>UnlockDiagnosticVMOptions</code> and <code>PrintAssembly</code>. Because the generated ASM is different for each runtime, you need to pass it to the <code>java</code> command and not <code>javac</code>.</p>

<p>Create a very simple script like this and name it <code>Main.java</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Hello World&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, we&rsquo;re going to compile and run it with those options:</p>

<pre><code>michael@daschlbook ~/Downloads/java $ javac Main.java &amp;&amp; java -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly Main
Java HotSpot(TM) 64-Bit Server VM warning: PrintAssembly is enabled; turning on DebugNonSafepoints to gain additional output
Could not load hsdis-amd64.dylib; library not loadable; PrintAssembly is disabled
Hello World
</code></pre>

<p>Woops, not what we expected. The code did compile properly, but HotSpot complains about <code>hsdis-amd64.dylib</code>. I had to google a bit to find it, but you can download <a href="https://kenai.com/projects/base-hsdis/downloads/download/gnu-versions/hsdis-amd64.dylib">the file</a> from <a href="https://kenai.com/projects/base-hsdis/downloads/directory/gnu-versions">here</a>.</p>

<p>Now we need to put it somewhere to make it loadable, and the easiest thing I found is to put it onto <code>LD_LIBRARY_PATH</code>. Make sure to not override any other settings, but in my case the variable was empty so its straightforward.</p>

<pre><code>export LD_LIBRARY_PATH=~/PathToFile/
</code></pre>

<p>If you run our command again from before, you should now see &ldquo;beautiful&rdquo; ASM code generated:</p>

<pre><code>michael@daschlbook ~/Downloads/java $ javac Main.java &amp;&amp; java -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly Main
Java HotSpot(TM) 64-Bit Server VM warning: PrintAssembly is enabled; turning on DebugNonSafepoints to gain additional output
Loaded disassembler from hsdis-amd64.dylib
Decoding compiled method 0x000000010ac74150:
  0x000000010ac742ba: add   [eax], al
[Disassembling for mach='i386(base-hsdis)']
[Entry Point]
[Constants]
  # {method} 'hashCode' '()I' in 'java/lang/String'
  #           [sp+0x30]  (sp of caller)
  0x000000010ac742a0: inc   esp
  0x000000010ac742a1: mov   edx, [esi+0x8]
  0x000000010ac742a4: dec   ecx
  0x000000010ac742a5: shl   edx, 3
  0x000000010ac742a8: dec   ecx
  0x000000010ac742a9: cmp   eax, edx
  0x000000010ac742ab: jnz   0x000000000ac4ba60  ;   {runtime_call}
  0x000000010ac742b1: nop
  0x000000010ac742b4: invalid   0x0f #size=0
  0x000000010ac742b5: pop   ds
  0x000000010ac742b6: test  [eax], al
  0x000000010ac742b8: add   [eax], al
  0x000000010ac742ba: add   [eax], al
  0x000000010ac742bc: nop
[Verified Entry Point]
  0x000000010ac742c0: mov   [esp-0x14000], eax
  0x000000010ac742c7: push  ebp
  0x000000010ac742c8: dec   eax
  0x000000010ac742c9: sub   esp, 0x0000000000000020
                                                ;*synchronization entry
                                                ; - java.lang.String::hashCode@-1 (line 1446)
...
</code></pre>

<p>Now I guess this is were the real fun starts, happy debugging!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fun With Couchbase Views and MessagePack]]></title>
    <link href="http://daschl.github.io/Fun-with-Couchbase-Views-and-Message-Pack"/>
    <updated>2013-06-18T14:49:48+02:00</updated>
    <id>http://daschl.github.io/Fun-with-Couchbase-Views-and-Message-Pack</id>
    <content type="html"><![CDATA[<p>Alright, before we start I have to admit that this is a little bit of a hack. Not that it doesn&rsquo;t work, but of course Couchbase Server 2.0 officially only supports JSON documents to be queried through Views. In addition to that, it is not so much known that you have access to all the other documents through Base64 encoding. Recently, <a href="http://avsej.net/2013/analyzing-binary-data-in-couchbase/">Sergey</a> showed us how to very easily analyze binary data in Couchbase Views and this brought me on the idea to take it one step further.</p>

<p>In this blog post we&rsquo;re going to store <a href="http://msgpack.org/">MessagePack</a> formatted data in Couchbase and then make its content available to Views (and allow us to query it). Note that you don&rsquo;t need to patch Couchbase for this, its just a snippet of JavaScript code that you need to include in your map function. We&rsquo;ll be using Java on the client side here, but nearly every combination of our official SDKs and MessagePack modules works for this.</p>

<h2>Storing the Data</h2>

<p>In order to store something meaningful we can query later, let&rsquo;s create a Maven project with all needed dependencies. Note that I&rsquo;m assuming you have a Couchbase Server installation running and are familiar with the Couchbase Java SDK (at least a little bit). Also I won&rsquo;t cover the View fundamentals since this is a little advanced topic.</p>

<p>Here are the required dependencies to start with the fun:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>        <span class="nt">&lt;groupId&gt;</span>couchbase<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;artifactId&gt;</span>couchbase-client<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;version&gt;</span>1.1.7<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>        <span class="nt">&lt;groupId&gt;</span>org.msgpack<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;artifactId&gt;</span>msgpack<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>        <span class="nt">&lt;version&gt;</span>0.6.7<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependencies&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also, don&rsquo;t forget that the Couchbase SDK lives in its own repository:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;repository&gt;</span>
</span><span class='line'>  <span class="nt">&lt;id&gt;</span>couchbase<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>  <span class="nt">&lt;name&gt;</span>Couchbase Maven Repository<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;url&gt;</span>http://files.couchbase.com/maven2/<span class="nt">&lt;/url&gt;</span>
</span><span class='line'>  <span class="nt">&lt;snapshots&gt;</span>
</span><span class='line'>      <span class="nt">&lt;enabled&gt;</span>false<span class="nt">&lt;/enabled&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/snapshots&gt;</span>
</span><span class='line'><span class="nt">&lt;/repository&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, we can create a simple script that connects to Couchbase, creates some HashMaps with meaningful content, encodes them with the MessagePack encoder and stores them in the database:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">com.couchbase.client.CouchbaseClient</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.msgpack.MessagePack</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.net.URI</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Connect to Couchbase</span>
</span><span class='line'>    <span class="n">CouchbaseClient</span> <span class="n">cb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CouchbaseClient</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="k">new</span> <span class="n">URI</span><span class="o">(</span><span class="s">&quot;http://127.0.0.1:8091/pools&quot;</span><span class="o">)),</span> <span class="s">&quot;default&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Init MessagePack</span>
</span><span class='line'>    <span class="n">MessagePack</span> <span class="n">msgpack</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MessagePack</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Create a few Documents with some content</span>
</span><span class='line'>    <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">user1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>    <span class="n">user1</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;firstname&quot;</span><span class="o">,</span> <span class="s">&quot;Michael&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">user1</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;lastname&quot;</span><span class="o">,</span> <span class="s">&quot;Nitschinger&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">user2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>    <span class="n">user2</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;firstname&quot;</span><span class="o">,</span> <span class="s">&quot;Matt&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">user2</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;lastname&quot;</span><span class="o">,</span> <span class="s">&quot;Ingenthron&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">user3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>    <span class="n">user3</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;firstname&quot;</span><span class="o">,</span> <span class="s">&quot;Sergey&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">user3</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;lastname&quot;</span><span class="o">,</span> <span class="s">&quot;Avseyev&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Encode and store them</span>
</span><span class='line'>    <span class="n">cb</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">&quot;user:michael&quot;</span><span class="o">,</span> <span class="n">msgpack</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">user1</span><span class="o">)).</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>    <span class="n">cb</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">&quot;user:matt&quot;</span><span class="o">,</span> <span class="n">msgpack</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">user2</span><span class="o">)).</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>    <span class="n">cb</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">&quot;user:sergey&quot;</span><span class="o">,</span> <span class="n">msgpack</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">user3</span><span class="o">)).</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Close the Connection</span>
</span><span class='line'>    <span class="n">cb</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The only new part to Couchbase folks is the &ldquo;MessagePack&rdquo; code. You create a new instance of <code>MessagePack</code> and then pass the data to the <code>write</code> method. I&rsquo;m not an expert on this library, but it looks like you can also make it work with generic POJOs, which would be something to look into if you model an actual application with it.</p>

<h2>Querying the Data</h2>

<p>Now if we run the code, we&rsquo;ll see that three documents have been persisted, but they show up as binary. That&rsquo;s because its not JSON and kind of expected. Now, go create a View on your bucket and start out with an empty map function like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">doc</span><span class="p">,</span> <span class="nx">meta</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">emit</span><span class="p">(</span><span class="nx">doc</span><span class="p">,</span> <span class="kc">null</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you query it, you&rsquo;ll see the document keys emitted like <code>gqhsYXN0bmFtZadBdnNleWV2qWZpcnN0bmFtZaZTZXJnZXk</code>, which is <a href="http://en.wikipedia.org/wiki/Base64">Base64</a> encoding. Now, let&rsquo;s change the view function a bit and use the built-in <code>decodeBase64</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">doc</span><span class="p">,</span> <span class="nx">meta</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">emit</span><span class="p">(</span><span class="nx">decodeBase64</span><span class="p">(</span><span class="nx">doc</span><span class="p">),</span> <span class="kc">null</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now your output looks more like <code>[130,168,108,97,115,116,110,97,109,...121]</code>, which is the native format of MessagePack! You would also see the same output if you take the result of <code>msgpack.write()</code> and print out the byte array properly.</p>

<p>The first step is done, we have direct access to the stored data. Now we need to decode it. The good news is that there is a JavaScript library for MessagePack, but it doesn&rsquo;t work out of the box with our view code. The library does lots of browser stuff which we don&rsquo;t have in the environment. <a href="https://raw.github.com/msgpack/msgpack-javascript/master/msgpack.js">here</a> is the link to the original library.</p>

<p>Now, after some fiddling with the code and removing unneeded parts (but actually not changing how it works), I ended up with something that works. You can go ahead and grab the full snippet <a href="https://gist.github.com/daschl/5796263">here</a>. Personally, I prefer to have my map functions short and sweet, so here is the same code, but <a href="https://gist.github.com/daschl/5796268">minified</a>.</p>

<p>Now, we can plug this code into our map function and use the method to decode our data on the fly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">doc</span><span class="p">,</span> <span class="nx">meta</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/*!{id:msgpack.js,ver:1.05,license:&quot;MIT&quot;,author:&quot;uupaa.js@gmail.com&quot;}*/</span>
</span><span class='line'>    <span class="cm">/* Modified by @daschl and @avsej to strip out whats not needed */</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">msgunpack</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">function</span> <span class="nx">k</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">g</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">m</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="mi">224</span><span class="o">&lt;=</span><span class="nx">d</span><span class="p">)</span><span class="k">return</span> <span class="nx">d</span><span class="o">-</span><span class="mi">256</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="mi">192</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="mi">128</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">)</span><span class="k">return</span> <span class="nx">d</span><span class="p">;</span><span class="mi">144</span><span class="o">&gt;</span><span class="nx">d</span><span class="o">?</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">d</span><span class="o">-</span><span class="mi">128</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="mi">128</span><span class="p">)</span><span class="o">:</span><span class="mi">160</span><span class="o">&gt;</span><span class="nx">d</span><span class="o">?</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">d</span><span class="o">-</span><span class="mi">144</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="mi">144</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">d</span><span class="o">-</span><span class="mi">160</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="mi">160</span><span class="p">)}</span><span class="k">switch</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="k">case</span> <span class="mi">192</span><span class="o">:</span><span class="k">return</span> <span class="kc">null</span><span class="p">;</span><span class="k">case</span> <span class="mi">194</span><span class="o">:</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="k">case</span> <span class="mi">195</span><span class="o">:</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="k">case</span> <span class="mi">202</span><span class="o">:</span><span class="k">return</span> <span class="nx">b</span><span class="o">=</span><span class="mi">16777216</span><span class="o">*</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">+</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="mi">16</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="mi">8</span><span class="p">)</span><span class="o">+</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">],</span><span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="o">&gt;&gt;</span><span class="mi">23</span><span class="o">&amp;</span><span class="mi">255</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">b</span><span class="o">&amp;</span><span class="mi">8388607</span><span class="p">,</span><span class="o">!</span><span class="nx">b</span><span class="o">||</span><span class="mi">2147483648</span><span class="o">===</span><span class="nx">b</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="mi">255</span><span class="o">===</span><span class="nx">f</span><span class="o">?</span><span class="nx">h</span><span class="o">?</span><span class="kc">NaN</span><span class="o">:</span><span class="kc">Infinity</span><span class="o">:</span><span class="p">(</span><span class="nx">b</span><span class="o">&amp;</span><span class="mi">2147483648</span><span class="o">?-</span><span class="mi">1</span><span class="o">:</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="nx">h</span><span class="o">|</span><span class="mi">8388608</span><span class="p">)</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="nx">f</span><span class="o">-</span><span class="mi">127</span><span class="o">-</span><span class="mi">23</span><span class="p">);</span><span class="k">case</span> <span class="mi">203</span><span class="o">:</span><span class="nx">b</span><span class="o">=</span><span class="mi">16777216</span><span class="o">*</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">+</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="mi">16</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="mi">8</span><span class="p">)</span><span class="o">+</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">];</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="o">&amp;</span><span class="mi">2147483648</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="o">&gt;&gt;</span><span class="mi">20</span><span class="o">&amp;</span><span class="mi">2047</span><span class="p">;</span><span class="nx">h</span><span class="o">=</span><span class="nx">b</span><span class="o">&amp;</span><span class="mi">1048575</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="o">||</span><span class="mi">2147483648</span><span class="o">===</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span> <span class="nx">a</span><span class="o">+=</span><span class="mi">4</span><span class="p">,</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="mi">2047</span><span class="o">===</span><span class="nx">f</span><span class="p">)</span><span class="k">return</span> <span class="nx">a</span><span class="o">+=</span><span class="mi">4</span><span class="p">,</span><span class="nx">h</span><span class="o">?</span><span class="kc">NaN</span><span class="o">:</span><span class="kc">Infinity</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="mi">16777216</span><span class="o">*</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">+</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="mi">16</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="mi">8</span><span class="p">)</span><span class="o">+</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">];</span><span class="k">return</span><span class="p">(</span><span class="nx">d</span><span class="o">?-</span><span class="mi">1</span><span class="o">:</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="nx">h</span><span class="o">|</span><span class="mi">1048576</span><span class="p">)</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="nx">f</span><span class="o">-</span><span class="mi">1023</span><span class="o">-</span><span class="mi">20</span><span class="p">)</span><span class="o">+</span><span class="nx">b</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="nx">f</span><span class="o">-</span><span class="mi">1023</span><span class="o">-</span><span class="mi">52</span><span class="p">));</span><span class="k">case</span> <span class="mi">207</span><span class="o">:</span><span class="k">return</span> <span class="nx">b</span><span class="o">=</span><span class="mi">16777216</span><span class="o">*</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">+</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="mi">16</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="mi">8</span><span class="p">)</span><span class="o">+</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">],</span><span class="mi">4294967296</span><span class="o">*</span><span class="nx">b</span><span class="o">+</span><span class="mi">16777216</span><span class="o">*</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">+</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="mi">16</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="mi">8</span><span class="p">)</span><span class="o">+</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">];</span><span class="k">case</span> <span class="mi">206</span><span class="o">:</span><span class="nx">b</span><span class="o">+=</span><span class="mi">16777216</span><span class="o">*</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">+</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="mi">16</span><span class="p">);</span><span class="k">case</span> <span class="mi">205</span><span class="o">:</span><span class="nx">b</span><span class="o">+=</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="mi">8</span><span class="p">;</span><span class="k">case</span> <span class="mi">204</span><span class="o">:</span><span class="k">return</span> <span class="nx">b</span><span class="o">+</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">];</span><span class="k">case</span> <span class="mi">211</span><span class="o">:</span><span class="k">return</span> <span class="nx">b</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">],</span><span class="nx">b</span><span class="o">&amp;</span><span class="mi">128</span><span class="o">?-</span><span class="mi">1</span><span class="o">*</span><span class="p">(</span><span class="mi">72057594037927936</span><span class="o">*</span><span class="p">(</span><span class="nx">b</span><span class="o">^</span><span class="mi">255</span><span class="p">)</span><span class="o">+</span>
</span><span class='line'>    <span class="mi">281474976710656</span><span class="o">*</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">^</span><span class="mi">255</span><span class="p">)</span><span class="o">+</span><span class="mi">1099511627776</span><span class="o">*</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">^</span><span class="mi">255</span><span class="p">)</span><span class="o">+</span><span class="mi">4294967296</span><span class="o">*</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">^</span><span class="mi">255</span><span class="p">)</span><span class="o">+</span><span class="mi">16777216</span><span class="o">*</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">^</span><span class="mi">255</span><span class="p">)</span><span class="o">+</span><span class="mi">65536</span><span class="o">*</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">^</span><span class="mi">255</span><span class="p">)</span><span class="o">+</span><span class="mi">256</span><span class="o">*</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">^</span><span class="mi">255</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">^</span><span class="mi">255</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">:</span><span class="mi">72057594037927936</span><span class="o">*</span><span class="nx">b</span><span class="o">+</span><span class="mi">281474976710656</span><span class="o">*</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">+</span><span class="mi">1099511627776</span><span class="o">*</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">+</span><span class="mi">4294967296</span><span class="o">*</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">+</span><span class="mi">16777216</span><span class="o">*</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">+</span><span class="mi">65536</span><span class="o">*</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">+</span><span class="mi">256</span><span class="o">*</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">+</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">];</span><span class="k">case</span> <span class="mi">210</span><span class="o">:</span><span class="k">return</span> <span class="nx">b</span><span class="o">=</span><span class="mi">16777216</span><span class="o">*</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">+</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="mi">16</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="mi">8</span><span class="p">)</span><span class="o">+</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">],</span><span class="mi">2147483648</span><span class="o">&gt;</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="nx">b</span><span class="o">-</span><span class="mi">4294967296</span><span class="p">;</span><span class="k">case</span> <span class="mi">209</span><span class="o">:</span><span class="k">return</span> <span class="nx">b</span><span class="o">=</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="mi">8</span><span class="p">)</span><span class="o">+</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">],</span><span class="mi">32768</span><span class="o">&gt;</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="nx">b</span><span class="o">-</span><span class="mi">65536</span><span class="p">;</span><span class="k">case</span> <span class="mi">208</span><span class="o">:</span><span class="k">return</span> <span class="nx">b</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">],</span><span class="mi">128</span><span class="o">&gt;</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="nx">b</span><span class="o">-</span><span class="mi">256</span><span class="p">;</span><span class="k">case</span> <span class="mi">219</span><span class="o">:</span><span class="nx">b</span><span class="o">+=</span><span class="mi">16777216</span><span class="o">*</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">+</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">&lt;&lt;</span>
</span><span class='line'>    <span class="mi">16</span><span class="p">);</span><span class="k">case</span> <span class="mi">218</span><span class="o">:</span><span class="nx">b</span><span class="o">+=</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="mi">8</span><span class="p">)</span><span class="o">+</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">];</span><span class="k">case</span> <span class="mi">160</span><span class="o">:</span><span class="nx">f</span><span class="o">=</span><span class="p">[];</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">d</span><span class="o">+</span><span class="nx">b</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">;)</span><span class="nx">e</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">d</span><span class="p">],</span><span class="nx">f</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">128</span><span class="o">&gt;</span><span class="nx">e</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="mi">224</span><span class="o">&gt;</span><span class="nx">e</span><span class="o">?</span><span class="p">(</span><span class="nx">e</span><span class="o">&amp;</span><span class="mi">31</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="mi">6</span><span class="o">|</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">d</span><span class="p">]</span><span class="o">&amp;</span><span class="mi">63</span><span class="o">:</span><span class="p">(</span><span class="nx">e</span><span class="o">&amp;</span><span class="mi">15</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="mi">12</span><span class="o">|</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">d</span><span class="p">]</span><span class="o">&amp;</span><span class="mi">63</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="mi">6</span><span class="o">|</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">d</span><span class="p">]</span><span class="o">&amp;</span><span class="mi">63</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="k">return</span> <span class="mi">10240</span><span class="o">&gt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="nx">l</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="nx">f</span><span class="p">)</span><span class="o">:</span><span class="nx">n</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="k">case</span> <span class="mi">223</span><span class="o">:</span><span class="nx">b</span><span class="o">+=</span><span class="mi">16777216</span><span class="o">*</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">+</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="mi">16</span><span class="p">);</span><span class="k">case</span> <span class="mi">222</span><span class="o">:</span><span class="nx">b</span><span class="o">+=</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="mi">8</span><span class="p">)</span><span class="o">+</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">];</span><span class="k">case</span> <span class="mi">128</span><span class="o">:</span><span class="k">for</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="p">{};</span><span class="nx">b</span><span class="o">--</span><span class="p">;){</span><span class="nx">g</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">-</span><span class="mi">160</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="p">[];</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">d</span><span class="o">+</span><span class="nx">g</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">;)</span><span class="nx">e</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">d</span><span class="p">],</span><span class="nx">f</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">128</span><span class="o">&gt;</span><span class="nx">e</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="mi">224</span><span class="o">&gt;</span><span class="nx">e</span><span class="o">?</span><span class="p">(</span><span class="nx">e</span><span class="o">&amp;</span><span class="mi">31</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="mi">6</span><span class="o">|</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">d</span><span class="p">]</span><span class="o">&amp;</span><span class="mi">63</span><span class="o">:</span><span class="p">(</span><span class="nx">e</span><span class="o">&amp;</span><span class="mi">15</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="mi">12</span><span class="o">|</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">d</span><span class="p">]</span><span class="o">&amp;</span><span class="mi">63</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="mi">6</span><span class="o">|</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">d</span><span class="p">]</span><span class="o">&amp;</span><span class="mi">63</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="nx">h</span><span class="p">[</span><span class="nx">l</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="nx">f</span><span class="p">)]</span><span class="o">=</span><span class="nx">k</span><span class="p">()}</span><span class="k">return</span> <span class="nx">h</span><span class="p">;</span><span class="k">case</span> <span class="mi">221</span><span class="o">:</span><span class="nx">b</span><span class="o">+=</span><span class="mi">16777216</span><span class="o">*</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">+</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="mi">16</span><span class="p">);</span><span class="k">case</span> <span class="mi">220</span><span class="o">:</span><span class="nx">b</span><span class="o">+=</span>
</span><span class='line'>    <span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="mi">8</span><span class="p">)</span><span class="o">+</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">a</span><span class="p">];</span><span class="k">case</span> <span class="mi">144</span><span class="o">:</span><span class="k">for</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="p">[];</span><span class="nx">b</span><span class="o">--</span><span class="p">;)</span><span class="nx">f</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">k</span><span class="p">());</span><span class="k">return</span> <span class="nx">f</span><span class="p">}}</span><span class="kd">function</span> <span class="nx">n</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">try</span><span class="p">{</span><span class="k">return</span> <span class="nx">l</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">)}</span><span class="k">catch</span><span class="p">(</span><span class="nx">d</span><span class="p">){}</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="p">[],</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">p</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="o">++</span><span class="nx">b</span><span class="p">)</span><span class="nx">e</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">]];</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)}</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="p">{},</span><span class="nx">p</span><span class="o">=</span><span class="p">{},</span><span class="nx">m</span><span class="o">=</span><span class="p">[],</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">g</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">g</span><span class="p">){</span><span class="nx">d</span><span class="o">=</span><span class="p">[];</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">),</span><span class="nx">b</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span><span class="nx">f</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="o">%</span><span class="mi">8</span><span class="p">;</span><span class="nx">g</span><span class="o">--</span><span class="p">;)</span><span class="o">++</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">e</span><span class="p">[</span><span class="nx">b</span><span class="p">]];</span><span class="k">for</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="o">&gt;&gt;</span><span class="mi">3</span><span class="p">;</span><span class="nx">g</span><span class="o">--</span><span class="p">;)</span><span class="nx">d</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">j</span><span class="p">[</span><span class="nx">e</span><span class="p">[</span><span class="o">++</span><span class="nx">b</span><span class="p">]],</span><span class="nx">j</span><span class="p">[</span><span class="nx">e</span><span class="p">[</span><span class="o">++</span><span class="nx">b</span><span class="p">]],</span><span class="nx">j</span><span class="p">[</span><span class="nx">e</span><span class="p">[</span><span class="o">++</span><span class="nx">b</span><span class="p">]],</span><span class="nx">j</span><span class="p">[</span><span class="nx">e</span><span class="p">[</span><span class="o">++</span><span class="nx">b</span><span class="p">]],</span><span class="nx">j</span><span class="p">[</span><span class="nx">e</span><span class="p">[</span><span class="o">++</span><span class="nx">b</span><span class="p">]],</span><span class="nx">j</span><span class="p">[</span><span class="nx">e</span><span class="p">[</span><span class="o">++</span><span class="nx">b</span><span class="p">]],</span><span class="nx">j</span><span class="p">[</span><span class="nx">e</span><span class="p">[</span><span class="o">++</span><span class="nx">b</span><span class="p">]],</span><span class="nx">j</span><span class="p">[</span><span class="nx">e</span><span class="p">[</span><span class="o">++</span><span class="nx">b</span><span class="p">]])}</span><span class="k">else</span> <span class="nx">d</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span><span class="nx">m</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="nx">a</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="k">return</span> <span class="nx">k</span><span class="p">()}}();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nx">msgunpack</span><span class="p">(</span><span class="nx">decodeBase64</span><span class="p">(</span><span class="nx">doc</span><span class="p">));</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">firstname</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">emit</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">firstname</span><span class="p">,</span> <span class="kc">null</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This map function decodes our MessagePack data and just emits the value with key &ldquo;firstname&rdquo;. Once you query this view, you&rsquo;ll see stuff like this emitted:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nx">total_rows</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">rows</span><span class="o">:</span> <span class="p">[{</span>
</span><span class='line'>      <span class="nx">id</span><span class="o">:</span> <span class="s2">&quot;user:matt&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">key</span><span class="o">:</span> <span class="s2">&quot;Matt&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">value</span><span class="o">:</span> <span class="kc">null</span>
</span><span class='line'>  <span class="p">},{</span>
</span><span class='line'>      <span class="nx">id</span><span class="o">:</span> <span class="s2">&quot;user:michael&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">key</span><span class="o">:</span> <span class="s2">&quot;Michael&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">value</span><span class="o">:</span> <span class="kc">null</span>
</span><span class='line'>  <span class="p">},{</span>
</span><span class='line'>      <span class="nx">id</span><span class="o">:</span> <span class="s2">&quot;user:sergey&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">key</span><span class="o">:</span> <span class="s2">&quot;Sergey&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">value</span><span class="o">:</span> <span class="kc">null</span>
</span><span class='line'>  <span class="p">}]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Isn&rsquo;t that lovely? We can now query this view from our Java SDK and use the MessagePack decoding facilities to retrieve the full documents as needed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Query View</span>
</span><span class='line'><span class="n">View</span> <span class="n">view</span> <span class="o">=</span> <span class="n">cb</span><span class="o">.</span><span class="na">getView</span><span class="o">(</span><span class="s">&quot;designname&quot;</span><span class="o">,</span> <span class="s">&quot;viewname&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">ViewResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="n">cb</span><span class="o">.</span><span class="na">query</span><span class="o">(</span><span class="n">view</span><span class="o">,</span> <span class="k">new</span> <span class="n">Query</span><span class="o">().</span><span class="na">setIncludeDocs</span><span class="o">(</span><span class="kc">true</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Iterate and load full documents</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="n">ViewRow</span> <span class="n">row</span> <span class="o">:</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">msgpack</span><span class="o">.</span><span class="na">read</span><span class="o">((</span><span class="kt">byte</span><span class="o">[])</span> <span class="n">row</span><span class="o">.</span><span class="na">getDocument</span><span class="o">()));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On the console, you&rsquo;ll see the full document content:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span><span class="s2">&quot;lastname&quot;</span><span class="o">:</span><span class="s2">&quot;Ingenthron&quot;</span><span class="p">,</span><span class="s2">&quot;firstname&quot;</span><span class="o">:</span><span class="s2">&quot;Matt&quot;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s2">&quot;lastname&quot;</span><span class="o">:</span><span class="s2">&quot;Nitschinger&quot;</span><span class="p">,</span><span class="s2">&quot;firstname&quot;</span><span class="o">:</span><span class="s2">&quot;Michael&quot;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="s2">&quot;lastname&quot;</span><span class="o">:</span><span class="s2">&quot;Avseyev&quot;</span><span class="p">,</span><span class="s2">&quot;firstname&quot;</span><span class="o">:</span><span class="s2">&quot;Sergey&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, feel free to use all the well-known query mechanisms for Views.</p>

<h2>Benefits, anyone?</h2>

<p>Now one could argue that this is nice to play around with, but what do I actually gain from it? Arguably, there is more work included for the developer, and maybe for the Server side as well.</p>

<p>MessagePack makes bold claims that its faster and smaller than JSON, so lets try to verify this in our environment.</p>

<p>To verify the size argument, let&rsquo;s go ahead and create 1M docs with a &ldquo;reasonable&rdquo; size and store them both through JSON and MessagePack. Since the overhead for each document is static inside Couchbase Server, we can very easily see how much RAM is used to hold the documents and conclude on the size difference (which is what matters at the end).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">numdocs</span> <span class="o">=</span> <span class="mi">1000000</span><span class="o">;</span>
</span><span class='line'><span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;();</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;firstname&quot;</span><span class="o">,</span> <span class="s">&quot;Michael&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;lastname&quot;</span><span class="o">,</span> <span class="s">&quot;Nitschinger&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;age&quot;</span><span class="o">,</span> <span class="mi">25</span><span class="o">);</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;loggedIn&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;active&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numdocs</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">cb</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">&quot;user:&quot;</span> <span class="o">+</span> <span class="n">i</span><span class="o">,</span> <span class="n">msgpack</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">user</span><span class="o">)).</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For 1M documents on my machine with Couchbase Server 2.0, the amount of RAM used is 166MB. Now, let&rsquo;s do the same with JSON. I&rsquo;m going to use <a href="https://code.google.com/p/google-gson/">Google GSON</a> to convert the HashMap:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">numdocs</span> <span class="o">=</span> <span class="mi">1000000</span><span class="o">;</span>
</span><span class='line'><span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;();</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;firstname&quot;</span><span class="o">,</span> <span class="s">&quot;Michael&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;lastname&quot;</span><span class="o">,</span> <span class="s">&quot;Nitschinger&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;age&quot;</span><span class="o">,</span> <span class="mi">25</span><span class="o">);</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;loggedIn&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;active&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numdocs</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">cb</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">&quot;user:&quot;</span> <span class="o">+</span> <span class="n">i</span><span class="o">,</span> <span class="n">gson</span><span class="o">.</span><span class="na">toJson</span><span class="o">(</span><span class="n">user</span><span class="o">)).</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>After inserting those 1M JSON records, Couchbase Server reported exactly 198MB of RAM used! So the difference is 32MB (1/5th of the total data size), or 32 byte per document. That pays off if you have lots of records in your cluster! After doubling the content of the HashMap and storing twice as many documents (2M) MessagePack is ahead of raw JSON by around 96MB. That&rsquo;s another 400K documents you could store (one document is around 230 bytes compared to 285 with raw JSON).</p>

<p>Of course, YMMV depending on the number and size of the documents. I&rsquo;m curious if you could do the same runs on your real workload and see by how much you could improve.</p>

<p>Now, before we talk about RAW encoding/decoding performance, we also need to look into the overhead involved on the server side. Storing and retreiving documents is not slower than any other document, because the server doesn&rsquo;t need to do anything special. The only overhead I can think of is that during index creation, more CPU will be consumed because you execute more JavaScript logic. I guess this CPU overhead increases with the document sizes, but I don&rsquo;t have any actual numbers to share here. Personally, I&rsquo;d use the <a href="">sizing</a> guidelines for Views and maybe add some more CPU just to be safe. It&rsquo;s important to note that at query time, you won&rsquo;t see a difference between JSON and MessagePack, because the index is already created.</p>

<p>Congratulations if you followed to this point! As a bonus, we&rsquo;ll look into the raw encoding/decoding performance of JSON and MessagePack on the JVM. Since there are lots of JSON libraries out there, we&rsquo;re going to use <a href="http://jackson.codehaus.org/">Jackson</a> and Google GSON. Benchmarking on the JVM is not a trivial task, so I&rsquo;ll do my best to keep it objective and we&rsquo;re going to use <a href="https://code.google.com/p/caliper/">Google Caliper</a> to handle things like JVM warmup. Make sure to add everything to your <code>pom.xml</code> like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.msgpack<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>msgpack<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>0.6.7<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>com.google.code.gson<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>gson<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>2.2.4<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>com.google.caliper<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>caliper<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>1.0-beta-1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>com.google.code.java-allocation-instrumenter<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>java-allocation-instrumenter<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>2.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>com.fasterxml.jackson.core<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>jackson-databind<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>2.2.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this simple benchmark, we are only testing smaller and slightly larger <code>HashMap</code>s. I know that this test is not conclusive, but it should give you a starting point from where you can do your own research.</p>

<p>To write a Caliper benchmark, you need to extend the <code>Benchmark</code> class from the caliper package. its as simple as this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EncodingBenchmark</span> <span class="kd">extends</span> <span class="n">Benchmark</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Gson</span> <span class="n">gson</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Gson</span><span class="o">();</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">MessagePack</span> <span class="n">msgpack</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MessagePack</span><span class="o">();</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">ObjectMapper</span> <span class="n">mapper</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ObjectMapper</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">smallMap</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">largeMap</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">smallMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;();</span>
</span><span class='line'>    <span class="n">smallMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;firstname&quot;</span><span class="o">,</span> <span class="s">&quot;Foo&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">smallMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;lastname&quot;</span><span class="o">,</span> <span class="s">&quot;bar&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">smallMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;active&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">largeMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;();</span>
</span><span class='line'>    <span class="n">largeMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;firstname&quot;</span><span class="o">,</span> <span class="s">&quot;Foo&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">largeMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;lastname&quot;</span><span class="o">,</span> <span class="s">&quot;bar&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">largeMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;active&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>    <span class="n">largeMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;firstname1&quot;</span><span class="o">,</span> <span class="s">&quot;Foo&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">largeMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;lastname1&quot;</span><span class="o">,</span> <span class="s">&quot;bar&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">largeMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;active1&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>    <span class="n">largeMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;firstname2&quot;</span><span class="o">,</span> <span class="s">&quot;Foo&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">largeMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;lastname2&quot;</span><span class="o">,</span> <span class="s">&quot;bar&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">largeMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;active2&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>    <span class="n">largeMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;firstname3&quot;</span><span class="o">,</span> <span class="s">&quot;Foo&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">largeMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;lastname3&quot;</span><span class="o">,</span> <span class="s">&quot;bar&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">largeMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;active3&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">timeMessagePackSmall</span><span class="o">(</span><span class="kd">final</span> <span class="kt">int</span> <span class="n">reps</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">reps</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">msgpack</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">smallMap</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">timeGoogleGsonSmall</span><span class="o">(</span><span class="kt">int</span> <span class="n">reps</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">reps</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">gson</span><span class="o">.</span><span class="na">toJson</span><span class="o">(</span><span class="n">smallMap</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">timeJacksonSmall</span><span class="o">(</span><span class="kt">int</span> <span class="n">reps</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">reps</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mapper</span><span class="o">.</span><span class="na">writeValueAsString</span><span class="o">(</span><span class="n">smallMap</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">timeJsonSmartSmall</span><span class="o">(</span><span class="kt">int</span> <span class="n">reps</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">reps</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mapper</span><span class="o">.</span><span class="na">writeValueAsString</span><span class="o">(</span><span class="n">smallMap</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">timeMessagePackLarge</span><span class="o">(</span><span class="kd">final</span> <span class="kt">int</span> <span class="n">reps</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">reps</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">msgpack</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">largeMap</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">timeGoogleGsonLarge</span><span class="o">(</span><span class="kt">int</span> <span class="n">reps</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">reps</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">gson</span><span class="o">.</span><span class="na">toJson</span><span class="o">(</span><span class="n">largeMap</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">timeJacksonLarge</span><span class="o">(</span><span class="kt">int</span> <span class="n">reps</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">reps</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mapper</span><span class="o">.</span><span class="na">writeValueAsString</span><span class="o">(</span><span class="n">largeMap</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>First, we create our converter instances (for MessagePack, GSON and Jackson) and the HashMaps. All the runs in this benchmark are executed by Caliper. We need to modify our <code>main</code> class to load the wrapper:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">business.MsgpackBenchmark</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.caliper.runner.CaliperMain</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">CaliperMain</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">EncodingBenchmark</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now if you run this in your IDE, you&rsquo;ll see some logging going on:</p>

<pre><code>Experiment selection: 
  Instruments:   [allocation, micro]
  User parameters:   {}
  Virtual machines:  [default]
  Selection type:    Full cartesian product

This selection yields 12 experiments.
Starting experiment 1 of 12: {instrument=allocation, method=GoogleGsonLarge, vm=default, parameters={}}
Complete!
Starting experiment 2 of 12: {instrument=allocation, method=GoogleGsonSmall, vm=default, parameters={}}
Complete!
Starting experiment 3 of 12: {instrument=allocation, method=JacksonLarge, vm=default, parameters={}}
Complete!
Starting experiment 4 of 12: {instrument=allocation, method=JacksonSmall, vm=default, parameters={}}
Complete!
...
Starting experiment 11 of 12: {instrument=micro, method=MessagePackLarge, vm=default, parameters={}}
Complete!
Starting experiment 12 of 12: {instrument=micro, method=MessagePackSmall, vm=default, parameters={}}
Complete!

Execution complete: 7.058m.
Collected 162 measurements from:
  2 instrument(s)
  1 virtual machine(s)
  6 benchmark(s)
Results have been uploaded. View them at: https://microbenchmarks.appspot.com/runs/f25820e0-08dd-43f8-833e-e44847400f19
</code></pre>

<p>Once finished, Caliper even uploaded your results to a webpage (so make sure to have internet connection)! Note that if you see &ldquo;GC errors&rdquo; during your runs, it may be good to retry and if they still persist, consider increasing your heap size a bit. I don&rsquo;t know for how long the data is held on the web page, but <a href="https://microbenchmarks.appspot.com/runs/f25820e0-08dd-43f8-833e-e44847400f19#r:scenario.benchmarkSpec.methodName">here</a> are my results.</p>

<p>At least in my benchmarks I found that libraries like Jackson outperform MessagePack by a large amount when encoding <code>HashMap</code>s. Maybe it&rsquo;s different with other data types and sizes though.</p>

<h2>Summary</h2>

<p>I hope this blog post was a fun introduction and showed what&rsquo;s possible with Couchbase Server 2.0 and its new View engine. I found that MessagePack really saves you a good amount of bytes on the wire (and on the server), but is much slower on the JVM when it comes to encoding data (here <code>HashMap</code>s).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Couchbase Cluster in Minutes With Vagrant and Puppet]]></title>
    <link href="http://daschl.github.io/A-Couchbase-Cluster-in-Minutes-with-Vagrant-and-Puppet"/>
    <updated>2013-05-27T14:49:48+02:00</updated>
    <id>http://daschl.github.io/A-Couchbase-Cluster-in-Minutes-with-Vagrant-and-Puppet</id>
    <content type="html"><![CDATA[<h2>Motivation</h2>

<p>Since I work as part of the engineering team at Couchbase, I need to run my code against a variety of server deployments. We run a multitude of operating systems and software versions, and so do our customers. In order to fix bugs reliably and build new features, it is critical to get a cluster up and running that resembles these deployments as good as possible. I know that I can run all of these combinations on EC2, but the cost for this would be very high and most of the time its overkill.</p>

<p>What I need is to get such a cluster up and running in minutes and not spending too much time on configuring it. I heard about <a href="http://www.vagrantup.com/">Vagrant</a> and <a href="https://puppetlabs.com/">Puppet</a> in the past, but never got around to use them on my own box (though I always use <a href="https://www.virtualbox.org/">VirtualBox</a> on MacOS to create virtual machines by hand).</p>

<p>This morning I sat down to take a closer look on how these tools can help me to get more productive &ndash; and to my huge surprise I got a 4 node Couchbase Server cluster running in less than 30 minutes (with looking up all the configuration details). Since its so easy, I want to share it with you.</p>

<h2>Prerequisites</h2>

<p>Before we can provision our nodes, you need to make sure to have Vagrant and VirtualBox installed. If you use MacOS like me, just download the <code>.dmg</code> files for both and you&rsquo;re set. Now, create a directory somewhere to store the configuration files &ndash; I called mine &lsquo;vagrants&rsquo;.</p>

<p>In this directory, you need to create a <code>Vagrantfile</code>. Its like the Vagrants <code>makefile</code> and it will pick it up to learn how you want to have your nodes provisioned. Note that this doesn&rsquo;t configure the software on top of the OS (like installing Couchbase), this is handled by puppet in a separate step. Here is the full config:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="s2">&quot;2&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Number of nodes to provision</span>
</span><span class='line'>  <span class="n">numNodes</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># IP Address Base for private network</span>
</span><span class='line'>  <span class="n">ipAddrPrefix</span> <span class="o">=</span> <span class="s2">&quot;192.168.56.10&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Define Number of RAM for each node</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provider</span> <span class="s2">&quot;virtualbox&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">v</span><span class="o">|</span>
</span><span class='line'>      <span class="n">v</span><span class="o">.</span><span class="n">customize</span> <span class="o">[</span><span class="s2">&quot;modifyvm&quot;</span><span class="p">,</span> <span class="ss">:id</span><span class="p">,</span> <span class="s2">&quot;--memory&quot;</span><span class="p">,</span> <span class="mi">1024</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Provision the server itself with puppet</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="ss">:puppet</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Download the initial box from this url</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box_url</span> <span class="o">=</span> <span class="s2">&quot;http://files.vagrantup.com/precise64.box&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Provision Config for each of the nodes</span>
</span><span class='line'>  <span class="mi">1</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="n">numNodes</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">num</span><span class="o">|</span>
</span><span class='line'>      <span class="n">nodeName</span> <span class="o">=</span> <span class="p">(</span><span class="s2">&quot;node&quot;</span> <span class="o">+</span> <span class="n">num</span><span class="o">.</span><span class="n">to_s</span><span class="p">)</span><span class="o">.</span><span class="n">to_sym</span>
</span><span class='line'>      <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">define</span> <span class="n">nodeName</span> <span class="k">do</span> <span class="o">|</span><span class="n">node</span><span class="o">|</span>
</span><span class='line'>          <span class="n">node</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;precise64&quot;</span>
</span><span class='line'>          <span class="n">node</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="ss">:private_network</span><span class="p">,</span> <span class="ss">ip</span><span class="p">:</span> <span class="n">ipAddrPrefix</span> <span class="o">+</span> <span class="n">num</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>          <span class="n">node</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provider</span> <span class="s2">&quot;virtualbox&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">v</span><span class="o">|</span>
</span><span class='line'>              <span class="n">v</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;Couchbase Server Node &quot;</span> <span class="o">+</span> <span class="n">num</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This file is just ruby code that configures Vagrant. Let&rsquo;s go through each directive and see what it does for us.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Number of nodes to provision</span>
</span><span class='line'><span class="n">numNodes</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># IP Address Base for private network</span>
</span><span class='line'><span class="n">ipAddrPrefix</span> <span class="o">=</span> <span class="s2">&quot;192.168.56.10&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can change these values, I just created them to fit my environment here. Depending on the amount of <code>numNodes</code> set, VMs will be created. I added a loop down below depending on this setting, so I don&rsquo;t have to duplicate code a lot. The ip address prefix is used to easily determine the (static) IP address for the server. The numbers will be counted upwards incrementally, so you will end up with four servers accessible through <code>192.168.56.101</code> to <code>192.168.56.104</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Define Number of RAM for each node</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provider</span> <span class="s2">&quot;virtualbox&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">v</span><span class="o">|</span>
</span><span class='line'>  <span class="n">v</span><span class="o">.</span><span class="n">customize</span> <span class="o">[</span><span class="s2">&quot;modifyvm&quot;</span><span class="p">,</span> <span class="ss">:id</span><span class="p">,</span> <span class="s2">&quot;--memory&quot;</span><span class="p">,</span> <span class="mi">1024</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This config block is needed to increase the memory size of the VM. By default its less than that (I believe around 512MB), and I want to have 1 gig of RAM for each. Of course, feel free to tune that value or remove it completely.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Provision the server itself with puppet</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="ss">:puppet</span>
</span></code></pre></td></tr></table></div></figure>


<p>Because we&rsquo;ll be using puppet to provision the server software, we need to tell Vagrant to use it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Download the initial box from this url</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box_url</span> <span class="o">=</span> <span class="s2">&quot;http://files.vagrantup.com/precise64.box&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Vagrant reuses predefined images so you don&rsquo;t have to reinstall everything from scratch. Here we use a predefined Ubuntu 12.04 64bit box.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Provision Config for each of the nodes</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="n">numNodes</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">num</span><span class="o">|</span>
</span><span class='line'>  <span class="n">nodeName</span> <span class="o">=</span> <span class="p">(</span><span class="s2">&quot;node&quot;</span> <span class="o">+</span> <span class="n">num</span><span class="o">.</span><span class="n">to_s</span><span class="p">)</span><span class="o">.</span><span class="n">to_sym</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">define</span> <span class="n">nodeName</span> <span class="k">do</span> <span class="o">|</span><span class="n">node</span><span class="o">|</span>
</span><span class='line'>      <span class="n">node</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;precise64&quot;</span>
</span><span class='line'>      <span class="n">node</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="ss">:private_network</span><span class="p">,</span> <span class="ss">ip</span><span class="p">:</span> <span class="n">ipAddrPrefix</span> <span class="o">+</span> <span class="n">num</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>      <span class="n">node</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provider</span> <span class="s2">&quot;virtualbox&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">v</span><span class="o">|</span>
</span><span class='line'>          <span class="n">v</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;Couchbase Server Node &quot;</span> <span class="o">+</span> <span class="n">num</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code block configures each virtual machine. Given the number of nodes we want to create, for each of them it assigns an IP address and gives it a descriptive name inside Virtualbox. If you want to add server-dependent settings, the &ldquo;node&rdquo; block is the right place for it. Otherwise it will pick the cluster wide settings defined in the &ldquo;config&rdquo; block.</p>

<p>Now if we would run <code>vagrant up</code> from the command line in this directory, we&rsquo;d get four Ubuntu machines setup where we could SSH into, but nothing else would be installed. In order to make them do something, we want to install Couchbase Server. Puppet is a system automation software and very good at provisioning systems. Vagrant has amazing support for it, all we need to is create a <code>default.pp</code> file inside a <code>manifests</code> directory that looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>exec { "couchbase-server-source": 
</span><span class='line'>  command =&gt; "/usr/bin/wget http://packages.couchbase.com/releases/2.0.1/couchbase-server-enterprise_x86_64_2.0.1.deb",
</span><span class='line'>  cwd =&gt; "/home/vagrant/",
</span><span class='line'>  creates =&gt; "/home/vagrant/couchbase-server-enterprise_x86_64_2.0.1.deb",
</span><span class='line'>  before =&gt; Package['couchbase-server']
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>exec { "install-deps":
</span><span class='line'>  command =&gt; "/usr/bin/apt-get install libssl0.9.8",
</span><span class='line'>  before =&gt; Package['couchbase-server']
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>package { "couchbase-server":
</span><span class='line'>  provider =&gt; dpkg,
</span><span class='line'>  ensure =&gt; installed,
</span><span class='line'>  source =&gt; "/home/vagrant/couchbase-server-enterprise_x86_64_2.0.1.deb"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s go over the internals once more.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>exec { "couchbase-server-source": 
</span><span class='line'>  command =&gt; "/usr/bin/wget http://packages.couchbase.com/releases/2.0.1/couchbase-server-enterprise_x86_64_2.0.1.deb",
</span><span class='line'>  cwd =&gt; "/home/vagrant/",
</span><span class='line'>  creates =&gt; "/home/vagrant/couchbase-server-enterprise_x86_64_2.0.1.deb",
</span><span class='line'>  before =&gt; Package['couchbase-server']
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>In puppet, we define some tasks that we want to run. This task executes a shell command <code>wget</code> and stores the file inside the home directory of the user. We tell puppet to download the debian package of the server. Note that there is a <code>before</code> dependency to the package installation task, because we can&rsquo;t install it before the file wasn&rsquo;t downloaded.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>exec { "install-deps":
</span><span class='line'>  command =&gt; "/usr/bin/apt-get install libssl0.9.8",
</span><span class='line'>  before =&gt; Package['couchbase-server']
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>We also need to install <code>libssl0.9.8</code> on the server, this is the only dependency it has. We use the command line tool <code>apt-get</code> for this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package { "couchbase-server":
</span><span class='line'>  provider =&gt; dpkg,
</span><span class='line'>  ensure =&gt; installed,
</span><span class='line'>  source =&gt; "/home/vagrant/couchbase-server-enterprise_x86_64_2.0.1.deb"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Finally, we can install the debian package from couchbase-server, because the file is in place and all dependencies are satisfied.</p>

<p>Of course, this puppet file is very simple and I&rsquo;m you can do much more with it (and maybe even simplify it more) &ndash; but for my needs it is more than enough. If I want a different server version, I just need to change the puppet file and point it to the new debian package.</p>

<p>Now if we run <code>vagrant up</code> again, much more happens. Note that if you want to play with your puppet files, you can also use <code>vagrant provision</code> to apply the changes while the node is running.</p>

<p>If everything is okay, the output should look like this:</p>

<pre><code>Bringing machine 'node1' up with 'virtualbox' provider...
Bringing machine 'node2' up with 'virtualbox' provider...
Bringing machine 'node3' up with 'virtualbox' provider...
Bringing machine 'node4' up with 'virtualbox' provider...
[node1] Clearing any previously set forwarded ports...
[node1] Creating shared folders metadata...
[node1] Clearing any previously set network interfaces...
[node1] Preparing network interfaces based on configuration...
[node1] Forwarding ports...
[node1] -- 22 =&gt; 2222 (adapter 1)
[node1] Running any VM customizations...
[node1] Booting VM...
[node1] Waiting for VM to boot. This can take a few minutes.
[node1] VM booted and ready for use!
[node1] Configuring and enabling network interfaces...
[node1] Mounting shared folders...
[node1] -- /vagrant
[node1] -- /tmp/vagrant-puppet/manifests
[node1] Running provisioner: puppet...
Running Puppet with default.pp...
stdin: is not a tty
notice: /Stage[main]//Exec[install-deps]/returns: executed successfully
notice: Finished catalog run in 0.77 seconds
.... more for all the other nodes.
</code></pre>

<p>You can then point your browser to <code>192.168.56.10[1-4]</code> and work with your Couchbase cluster. If you are done with it, you can use the <code>vagrant halt</code> command to shut it down cleanly. Very handy is also <code>vagrant suspend</code>, which will save the state of the nodes instead of shutting them down completely.</p>

<p>If you want to interact with one of the nodes instead of the whole cluster, you can always specify the node identifier. For example, if you want to start only the first node you can do it with the <code>vagrant up node1</code> command.</p>

<p>To me, this is a very fast and clean way to provision server nodes. I just need to change a few lines in a file and get a new cluster without much hassle. Even more important, I can put those config files in version control and <a href="https://github.com/daschl/vagrants">share them</a> with other folks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Logging With the Couchbase Java Client]]></title>
    <link href="http://daschl.github.io/Logging-with-the-Couchbase-Java-Client"/>
    <updated>2013-05-16T14:49:48+02:00</updated>
    <id>http://daschl.github.io/Logging-with-the-Couchbase-Java-Client</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>There is a huge variety in logging frameworks for Java, and its hard to please everyone. To understand how logging is currently handled in the SDK, we have to go back a few years. As you may know, the SDK depends on the <a href="https://code.google.com/p/spymemcached/">spymemcached</a> library and therefore also inherits its logging mechanisms. Back in the days when <a href="https://twitter.com/dlsspy">@dustin</a> wrote spy, there was no good abstraction for logging available (like SLF4J), so he wrote his own. Nowadays things have changed, but spy still inherits this legacy.</p>

<p>At the time of writing, the SDK supports logging to a simple default logger (logs to STDERR from INFO level up), <a href="http://logging.apache.org/log4j/1.2/">Log4J</a> and the SunLogger (java.util.logging). In the upcoming 2.9.0 release of spymemcached, it will also support the SLF4J logging facade where you can plug in your own implementation. The next version of the SDK (most likely 1.1.7) will depend on spy 2.9, so you&rsquo;ll also get the benefits there.</p>

<p>Before we dig into the concepts, here are the supported Log Levels (defined by <code>net.spy.memcached.compat.log.Level</code>):</p>

<ul>
<li>TRACE (with 2.9)</li>
<li>DEBUG</li>
<li>INFO</li>
<li>WARN</li>
<li>ERROR</li>
<li>FATAL</li>
</ul>


<p>Keep in mind that different loggers implement different levels, so for some of them a mapping needs top happen. This will be noted during the descriptions of each implementation.</p>

<p>We&rsquo;ll now look at the different logging mechanisms available and how you can configure them. SLF4J will be covered towards the end.</p>

<h2>Switching Logging</h2>

<p>If you don&rsquo;t change anything, the default logger will be used. This mechanism just prints log messages to STDERR (from INFO level upwards). Chances are that you want to integrate the SDK with the same logging library that you use as well. The LoggerFactory inside spy decides at construction which one to choose, based on a system property. So you can either change this programmatically or through a param to the <code>java</code> command.</p>

<p>If you want to use the Log4JLogger programmatically, do it this way (before initializing the <code>CouchbaseClient</code> object):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Properties</span> <span class="n">systemProperties</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">getProperties</span><span class="o">();</span>
</span><span class='line'><span class="n">systemProperties</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;net.spy.log.LoggerImpl&quot;</span><span class="o">,</span> <span class="s">&quot;net.spy.memcached.compat.log.Log4JLogger&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">setProperties</span><span class="o">(</span><span class="n">systemProperties</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, you need to add the Log4J JAR to your CLASSPATH to make it work (as we&rsquo;ll see later). Alternatively, you can set it this way on the comman dline:</p>

<pre><code>java -Dnet.spy.log.LoggerImpl=net.spy.memcached.compat.log.Log4JLogger ...
</code></pre>

<p>Now that we know how to enable the different implementations, let&rsquo;s look at them in greater detail.</p>

<h2>The Simple Default Logger</h2>

<p>If you don&rsquo;t change anything, the SDK will use the DefaultLogger (net.spy.memcached.compat.log.DefaultLogger). This logger has no dependencies and prints every log message that is INFO level or higher (INFO, WARN, ERROR and FATAL) to the systems STDERR. Since the STDERR is covered by most IDEs automatically, you&rsquo;ll also see them in the console output window.</p>

<p>Since its so simple, you can&rsquo;t customize this behavior. Every log message gets timestamped as well (the format is <code>yyyy-MM-dd HH:mm:ss.SSS</code>). Connecting to Couchbase commonly looks like this:</p>

<pre><code>2013-05-07 12:28:41.852 INFO com.couchbase.client.CouchbaseConnection:  Added {QA sa=/127.0.0.1:11210, #Rops=0, #Wops=0, #iq=0, topRop=null, topWop=null, toWrite=0, interested=0} to connect queue
2013-05-07 12:28:41.862 INFO com.couchbase.client.CouchbaseConnection:  Connection state changed for sun.nio.ch.SelectionKeyImpl@3d9360e2
2013-05-07 12:28:41.887 INFO com.couchbase.client.ViewConnection:  Added localhost to connect queue
2013-05-07 12:28:41.888 INFO com.couchbase.client.CouchbaseClient:  viewmode property isn't defined. Setting viewmode to production mode
2013-05-07 12:28:41.986 INFO com.couchbase.client.CouchbaseConnection:  Shut down Couchbase client
2013-05-07 12:28:41.991 INFO com.couchbase.client.ViewConnection:  Node localhost has no ops in the queue
2013-05-07 12:28:41.992 INFO com.couchbase.client.ViewNode:  I/O reactor terminated for localhost
</code></pre>

<p>So the format is always: <code>&lt;timestamp&gt; &lt;level&gt; &lt;classname&gt; &lt;message&gt;</code>. Remeber that DEBUG messages or so will not be logged, so you won&rsquo;t see them with the DefaultLogger.</p>

<h2>The SunLogger (java.util.logging)</h2>

<p>The SunLogger also doesn&rsquo;t introduce additional dependencies, since it depends on the <code>java.util.logging</code> implementation. The <code>java.util.logging.Level</code> enum defines the following levels: ALL, CONFIG, FINEST, FINER, FINE, INFO, WARNING, SEVERE and OFF. Since this does not map well to our defined Levels, here is the mapping that happens:</p>

<ul>
<li>TRACE to FINEST (with 2.9)</li>
<li>DEBUG to FINE</li>
<li>INFO to INFO</li>
<li>WARN to WARNING</li>
<li>ERROR to SEVERE</li>
<li>FATAL to SEVERE</li>
</ul>


<p>Without any further changes, the SunLogger also prints from INFO level upwards like this:</p>

<pre><code>May 7, 2013 12:42:16 PM com.couchbase.client.CouchbaseProperties setPropertyFile
INFO: Could not load properties file "cbclient.properties" because: File not found with system classloader.
May 7, 2013 12:42:16 PM net.spy.memcached.MemcachedConnection createConnections
INFO: Added {QA sa=/127.0.0.1:11210, #Rops=0, #Wops=0, #iq=0, topRop=null, topWop=null, toWrite=0, interested=0} to connect queue
May 7, 2013 12:42:16 PM net.spy.memcached.MemcachedConnection handleIO
INFO: Connection state changed for sun.nio.ch.SelectionKeyImpl@4ce2cb55
May 7, 2013 12:42:16 PM com.couchbase.client.ViewConnection createConnections
INFO: Added localhost to connect queue
May 7, 2013 12:42:16 PM com.couchbase.client.CouchbaseClient &lt;init&gt;
INFO: viewmode property isn't defined. Setting viewmode to production mode
May 7, 2013 12:42:16 PM com.couchbase.client.CouchbaseConnection run
INFO: Shut down Couchbase client
May 7, 2013 12:42:16 PM com.couchbase.client.ViewConnection shutdown
INFO: Node localhost has no ops in the queue
May 7, 2013 12:42:16 PM com.couchbase.client.ViewNode$1 run
INFO: I/O reactor terminated for localhost
</code></pre>

<p>If you want to change the log level to DEBUG and lower, you can do it like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Logger</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="s">&quot;com.couchbase.client&quot;</span><span class="o">).</span><span class="na">setLevel</span><span class="o">(</span><span class="n">Level</span><span class="o">.</span><span class="na">FINEST</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now there is one more thing you need to do if you want to print all debug messages to the console. You set the logging level correctly, but the <code>ConsoleHandler</code> is not set to debug yet (so most likely you will pay the price for debug logging, but won&rsquo;t actually see anything in your IDE).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">for</span><span class="o">(</span><span class="n">Handler</span> <span class="n">h</span> <span class="o">:</span> <span class="n">Logger</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="s">&quot;com.couchbase.client&quot;</span><span class="o">).</span><span class="na">getParent</span><span class="o">().</span><span class="na">getHandlers</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span><span class="n">h</span> <span class="k">instanceof</span> <span class="n">ConsoleHandler</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">h</span><span class="o">.</span><span class="na">setLevel</span><span class="o">(</span><span class="n">Level</span><span class="o">.</span><span class="na">FINEST</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, here is a full example on how to use the <code>SunLogger</code> and get all Debug messages on the console.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Properties</span> <span class="n">systemProperties</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">getProperties</span><span class="o">();</span>
</span><span class='line'><span class="n">systemProperties</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;net.spy.log.LoggerImpl&quot;</span><span class="o">,</span> <span class="s">&quot;net.spy.memcached.compat.log.SunLogger&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">setProperties</span><span class="o">(</span><span class="n">systemProperties</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">Logger</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="s">&quot;com.couchbase.client&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">logger</span><span class="o">.</span><span class="na">setLevel</span><span class="o">(</span><span class="n">Level</span><span class="o">.</span><span class="na">FINEST</span><span class="o">);</span>
</span><span class='line'><span class="k">for</span><span class="o">(</span><span class="n">Handler</span> <span class="n">h</span> <span class="o">:</span> <span class="n">logger</span><span class="o">.</span><span class="na">getParent</span><span class="o">().</span><span class="na">getHandlers</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span><span class="n">h</span> <span class="k">instanceof</span> <span class="n">ConsoleHandler</span><span class="o">){</span>
</span><span class='line'>        <span class="n">h</span><span class="o">.</span><span class="na">setLevel</span><span class="o">(</span><span class="n">Level</span><span class="o">.</span><span class="na">FINEST</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then just go ahead and create your <code>CouchbaseClient</code> object, you will see detailed output like this (trimmed here):</p>

<pre><code>May 7, 2013 12:54:34 PM com.couchbase.client.vbucket.ReconfigurableObserver update
FINEST: Received an update, notifying reconfigurables about a com.couchbase.client.vbucket.config.Bucketcom.couchbase.client.vbucket.config.Bucket@3d77949
May 7, 2013 12:54:34 PM com.couchbase.client.vbucket.ReconfigurableObserver update
FINEST: Received an update, notifying reconfigurables about a com.couchbase.client.vbucket.config.Bucketcom.couchbase.client.vbucket.config.Bucket@4e927aef
May 7, 2013 12:54:34 PM com.couchbase.client.vbucket.ReconfigurableObserver update
FINEST: It says it is default and it's talking to /pools/default/bucketsStreaming/default?bucket_uuid=adfff22b70e09fafaa26ca37b7e05e9d
May 7, 2013 12:54:34 PM com.couchbase.client.vbucket.ReconfigurableObserver update
FINEST: It says it is default and it's talking to /pools/default/bucketsStreaming/default?bucket_uuid=adfff22b70e09fafaa26ca37b7e05e9d
</code></pre>

<h2>Log4J</h2>

<p>Most people will need more flexibility, and Log4J was (and still is) standard in lots of applications. The SDK provides support for Log4J as well. To make it work, you first need to set the instance correctly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Properties</span> <span class="n">systemProperties</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">getProperties</span><span class="o">();</span>
</span><span class='line'><span class="n">systemProperties</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;net.spy.log.LoggerImpl&quot;</span><span class="o">,</span> <span class="s">&quot;net.spy.memcached.compat.log.Log4JLogger&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">setProperties</span><span class="o">(</span><span class="n">systemProperties</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now if you run this, you&rsquo;ll get an error that some of the Log4J classes can not be found. This is not a surprise, because its not on the classpath. Let&rsquo;s fix this by adding it accordingly. If you use maven, add the <code>log4j.log4j</code> dependency (current version is 1.2.17). You can also just download the JAR and add it to the CLASSPATH as needed.</p>

<p>Now if we run it again, we get another error:</p>

<pre><code>log4j:WARN No appenders could be found for logger (com.couchbase.client.vbucket.ConfigurationProviderHTTP).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
</code></pre>

<p>One way to fix this is to get a correct <code>log4j.xml</code> configuration file into our CLASSPATH, but to make it work quickly Log4J provides a <code>BasicConfigurator</code>. Right after the system property configurations, add this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">log4j</span><span class="o">.</span><span class="na">BasicConfigurator</span><span class="o">.</span><span class="na">configure</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you run it with the code change applied, you will see that we get nicely printed log messages. You can also see that they show up straight from the DEBUG level (and even contain information from which thread they got logged):</p>

<pre><code>69 [main] INFO com.couchbase.client.CouchbaseConnection  - Added {QA sa=/127.0.0.1:11210, #Rops=0, #Wops=0, #iq=0, topRop=null, topWop=null, toWrite=0, interested=0} to connect queue
70 [main] DEBUG com.couchbase.client.vbucket.VBucketNodeLocator  - Updating nodesMap in VBucketNodeLocator.
73 [main] DEBUG com.couchbase.client.vbucket.VBucketNodeLocator  - Adding node with hostname 127.0.0.1:11210.
74 [main] DEBUG com.couchbase.client.vbucket.VBucketNodeLocator  - Node added is {QA sa=localhost/127.0.0.1:11210, #Rops=0, #Wops=0, #iq=0, topRop=null, topWop=null, toWrite=0, interested=8}.
74 [Memcached IO over {MemcachedConnection to localhost/127.0.0.1:11210}] DEBUG com.couchbase.client.CouchbaseConnection  - Done dealing with queue.
74 [Memcached IO over {MemcachedConnection to localhost/127.0.0.1:11210}] DEBUG com.couchbase.client.CouchbaseConnection  - Selecting with delay of 0ms
79 [Memcached IO over {MemcachedConnection to localhost/127.0.0.1:11210}] DEBUG com.couchbase.client.CouchbaseConnection  - Selected 1, selected 1 keys
79 [Memcached IO over
</code></pre>

<p>You can control the logging levels through the usual Log4J mechanisms. I won&rsquo;t go into detail about them here, so please <a href="http://logging.apache.org/log4j/1.2/manual.html">check out</a> their official documentation (for example on how to use the <code>PropertyConfigurator</code> instead).</p>

<p>Speaking of Log4J, <a href="https://twitter.com/zooldk">Steffen Larsen</a> implemented a <a href="https://github.com/zooldk/log4j-couchbase">Log4J appender</a> to store logs in Couchbase (instead of a file)!</p>

<h2>The new Facade: SLF4J</h2>

<p>Not binding the application to a specific logging library is always a good idea. SLF4J is a facade for various pluggable logging frameworks behind it. So you can choose the logging implementation during runtime, be it <a href="http://logback.qos.ch/">logback</a>, Log4J or others. Since we already tried Log4J, let&rsquo;s make SLF4J work with Logback, one of the other very common log frameworks out there.</p>

<p>Note that SLF4J support will be available in the 1.9.0 release of spymemcached and therefore also in one of the next releases of the Couchbase Java SDK.</p>

<p>First, we need to configure it accordingly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Properties</span> <span class="n">systemProperties</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">getProperties</span><span class="o">();</span>
</span><span class='line'><span class="n">systemProperties</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;net.spy.log.LoggerImpl&quot;</span><span class="o">,</span> <span class="s">&quot;net.spy.memcached.compat.log.SLF4JLogger&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">setProperties</span><span class="o">(</span><span class="n">systemProperties</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, we need to include two JARs into our classpath. The first one is the SLF4J facade API and the other one is our logging framework of choice. The facade API package is called <code>slf4j-api</code> (this package always needs to be in place) and since we want to use logback we need to include the <code>logback-classic</code> JAR. Note that this is not specific to the SDK, you can find this information <a href="http://logback.qos.ch/manual/introduction.html">here</a>. If you use maven, you can use this snippet:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>org.slf4j<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>slf4j-api<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>1.7.5<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>ch.qos.logback<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>logback-classic<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>1.0.12<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>SLF4J will automatically pick up our logback implementation, so the logs will look like this:</p>

<pre><code>13:25:43.692 [main] INFO  c.c.client.CouchbaseConnection - Added {QA sa=/127.0.0.1:11210, #Rops=0, #Wops=0, #iq=0, topRop=null, topWop=null, toWrite=0, interested=0} to connect queue
13:25:43.694 [main] DEBUG c.c.c.vbucket.VBucketNodeLocator - Updating nodesMap in VBucketNodeLocator.
13:25:43.697 [main] DEBUG c.c.c.vbucket.VBucketNodeLocator - Adding node with hostname 127.0.0.1:11210.
13:25:43.697 [main] DEBUG c.c.c.vbucket.VBucketNodeLocator - Node added is {QA sa=localhost/127.0.0.1:11210, #Rops=0, #Wops=0, #iq=0, topRop=null, topWop=null, toWrite=0, interested=8}.
13:25:43.698 [Memcached IO over {MemcachedConnection to localhost/127.0.0.1:11210}] DEBUG c.c.client.CouchbaseConnection - Done dealing with queue.
13:25:43.699 [Memcached IO over {MemcachedConnection to localhost/127.0.0.1:11210}] DEBUG c.c.client.CouchbaseConnection - Selecting with delay of 0ms
13:25:43.702 [Memcached IO over {MemcachedConnection to localhost/127.0.0.1:11210}] DEBUG c.c.client.CouchbaseConnection - Selected 1, selected 1 keys
13:25:43.703 [Memcached IO over {MemcachedConnection to localhost/127.0.0.1:11210}] DEBUG c.c.client.CouchbaseConnection - Handling IO for:  sun.nio.ch.SelectionKeyImpl@48ff2413 (r=false, w=false, c=true, op={QA sa=localhost/127.0.0.1:11210, #Rops=0, #Wops=0, #iq=0, topRop=null, topWop=null, toWrite=0, interested=8})
13:25:43.703 [Memcached IO over {MemcachedConnection to localhost/127.0.0.1:11210}] INFO  c.c.client.CouchbaseConnection - Connection state changed for sun.nio.ch.SelectionKeyImpl@48ff2413
13:25:43.713
</code></pre>

<p>As you can see, they also include DEBUG level logging here. If you don&rsquo;t include the logging implementation during runtime, SLF4J will complain at startup:</p>

<pre><code>SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details
</code></pre>

<p>If you want to learn how to configure logback, <a href="http://logback.qos.ch/manual/configuration.html">look here</a>.</p>

<h2>Summary</h2>

<p>Once you know the abstraction in spymemcached and how it works, switching logging implementations is easy and straightforward. If you work with one of the Couchbase people to report errors, please try to include output with DEBUG turned on, because this includes lots of useful information that can be used to determine the failure sources.</p>

<p>With the SLF4J facade added in the next spy release (2.9), you will be able to plug every large logging framework out there into the SDK. Let us know if you see a use case not covered with these mechanisms or if you have other comments on this.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Couchbase Java SDK Internals]]></title>
    <link href="http://daschl.github.io/Couchbase-Java-SDK-Internals"/>
    <updated>2013-04-17T14:49:48+02:00</updated>
    <id>http://daschl.github.io/Couchbase-Java-SDK-Internals</id>
    <content type="html"><![CDATA[<h2>Motivation</h2>

<p>This blog post is intended to be a very detailed and informative article for those who already have used the Couchbase Java SDK and want to know how the internals work. This is not a introduction on how to use the Java SDK and we&rsquo;ll cover some fairly advanced topics on the way.</p>

<p>Normally, when talking about the SDK we mean everything that is needed to get you going (Client library, documentation, release notes,&hellip;). In this article though, the SDK refers to the Client library (code) unless stated otherwise.</p>

<p>As always, if you have feedback please let me/us know!</p>

<h2>Introduction</h2>

<p>First and foremost, it is important to understand that the SDK wraps and extends the functionality of the <a href="https://github.com/couchbase/spymemcached">spymemcached</a> (called &ldquo;spy&rdquo;) memcached library. One of the protocols used internally is the memcached protocol, and a lot of functionality can be reused. On the other hand, once you start to peel off the first layers of the SDK you will notice that some components are somewhat more complex because of the fact that spy provides more features than the SDK needs in the first place. The other part is to remember that a lot of the components are interwoven, so you always need to get the dependency right. Most of the time, we release a new spy version at the same date with a new SDK, because new stuff has been added or fixed.</p>

<p>So, aside from reusing the functionality provided by spy, the SDK mainly adds two blocks of functionality: automatic cluster topology management and since 1.1 (and 2.0 server) support for Views. Aside from that it also provides administrative facilities like bucket and design document management.</p>

<p>To understand how the client operates, we&rsquo;ll dissect the whole process in different life cycle phases of the client. After we go through all three phases (bootstrap, operation and shutdown) you should have a clear picture of whats going on under the hood. Note that there is a separate blog post in the making about error handling, so we won&rsquo;t cover that here in greater detail (which will be published a few weeks later on the same blog here).</p>

<h2>Phase 1: Bootstrap</h2>

<p>Before we can actually start serving operations like <code>get()</code> and <code>set()</code>, we need to bootstrap the <code>CouchbaseClient</code> object. The important part that we need to accomplish here is to initially get a cluster configuration (which contains the nodes and vBucket map), but also to establish a streaming connection to receive cluster updates in (near) real-time.</p>

<p>We take the list of nodes passing during bootstrap and iterate over it. The first node in the list that can be contacted on port 8091 is used to walk the RESTful interface on the server. If it is not available, the next one will be tried. This means that going from the provided <code>http://host:port/pools</code> URI we eventually follow the links to the bucket entity. All this happens inside a <code>ConfigurationProvider</code>, which is in this case the <code>com.couchbase.client.vbucket.ConfigurationProviderHTTP</code>. If you want to poke around on the internals, look for <code>getBucketConfiguration</code> and <code>readPools</code> methods.</p>

<p>A (successful) walk can be illustrated like this:</p>

<ul>
<li>GET /pools</li>
<li>look for the &ldquo;default&rdquo; pools</li>
<li>GET /pools/default</li>
<li>look for the &ldquo;buckets&rdquo; hash which contains the bucket list</li>
<li>GET /pools/default/buckets</li>
<li>parse the list of buckets and extract the one provided by the application</li>
<li>GET /pools/default/buckets/<bucketname></li>
</ul>


<p>Now we are at the REST endpoint we need. Inside this JSON response, you&rsquo;ll find all useful details that gets also be used by SDK internally (for example <code>stre  amingUri</code>, <code>nodes</code> and <code>vBucketServerMap</code>). The config gets parsed and stored. Before we move on, let&rsquo;s quickly discuss the strange <code>pools</code> part inside our REST walk:</p>

<p>The concept of a resource pool to group buckets was designed for Couchbase Server, but is currently not implemented. Still, the REST API is implemented that way and therefore all SDKs support it. That said, while we could theoretically just go directly to <code>/pools/default/buckets</code> and skip the first few queries, the current behaviour is future proof so you won&rsquo;t have to change the bootstrap code once the server implements it.</p>

<p>Back to our bootstrap phase. Now that we have a valid cluster config which contains all the nodes (and their hostnames or ip addresses), we can establish connections to them. Aside from establishing the data connections, we also need to instantiate a streaming connection to one of them. For simplicity reasons, we just establish the streaming connection to the node from the list where we got our initial configuration.</p>

<p>This gets us to an important point to keep in mind: if you have lots of CouchbaseClient objects running on many nodes and they all get bootstrapped with the same list, they may end up connecting to the same node for the streaming connection and create a possible bottleneck. Therefore, to distribute the load a little better I recommend shuffling the array before it gets passed in to the CouchbaseClient object. When you only have a few CouchbaseClient objects connected to your cluster, that won&rsquo;t be a problem at all.</p>

<p>The streaming connection URI is taken from the config we got previously, and normally looks like this:</p>

<pre><code>streamingUri: "/pools/default/bucketsStreaming/default?bucket_uuid=88cae4a609eea500d8ad072fe71a7290"
</code></pre>

<p>If you point your browser to this address, you will also get the cluster topology updates streamed in real-time. Since the streaming connection needs to be established all the time and potentially blocks a thread, this is done in the background handled by different threads. We are using the NIO framework <a href="http://netty.io">Netty</a> for this task, which provides a very handy way of dealing with asynchronous operations. If you want to start digging into this part, keep in mind that all read operations are completely separate from write operations, so you need to deal with handlers that take care of what comes back from the server. Aside from some wiring needed for Netty, the business logic can be found in <code>com.couchbase.client.vbucket.BucketMonitor</code> and <code>com.couchbase.client.vbucket.BucketUpdateResponseHandler</code>. We also try to reestablish this streaming connection if the socket gets closed (for example if this node gets rebalanced out of the cluster).</p>

<p>To actually shuffle data to the cluster nodes, we need to open various sockets to them. Note that there is absolutely no connection pooling needed inside the client, because we manage all sockets proactively. Aside from the special streaming connection to one of the severs (which is opened against port 8091), we need to open the following connections:</p>

<ul>
<li>Memcached Socket: Port 11210</li>
<li>View Socket: Port 8092</li>
</ul>


<p>Note that port 11211 is not used inside the client SDKs, but used to connect generic memcached clients that are not cluster aware. This means that these generic clients do not get updated cluster topologies.</p>

<p>So as a rule of thumb, if you have a 10 node cluster running, one CouchbaseClient object open about 21 (2*10 + 1) client sockets. These are directly managed, so if a node gets removed or added the numbers will change accordingly.</p>

<p>Now that all sockets have been opened, we are ready to perform regular cluster operations. As you can see, there is a lot of overhead involved when the CouchbaseClient object gets bootstrapped. Because of this fact, we strongly discourage you from either creating a new object on every request or running a lot of CouchbaseClient objects in one application server. This only adds unnecessary overhead and load on the application server and adds on the total sockets opened against the cluster (resulting in a possible performance problem).</p>

<p>As a point of reference, with regular INFO level logging enabled this is how connecting and disconnecting to a 1-node cluster (Couchbase bucket) should look like:</p>

<pre><code>Apr 17, 2013 3:14:49 PM com.couchbase.client.CouchbaseProperties setPropertyFile
INFO: Could not load properties file "cbclient.properties" because: File not found with system classloader.
2013-04-17 15:14:49.656 INFO com.couchbase.client.CouchbaseConnection:  Added {QA sa=/127.0.0.1:11210, #Rops=0, #Wops=0, #iq=0, topRop=null, topWop=null, toWrite=0, interested=0} to connect queue
2013-04-17 15:14:49.673 INFO com.couchbase.client.CouchbaseConnection:  Connection state changed for sun.nio.ch.SelectionKeyImpl@2adb1d4
2013-04-17 15:14:49.718 INFO com.couchbase.client.ViewConnection:  Added localhost to connect queue
2013-04-17 15:14:49.720 INFO com.couchbase.client.CouchbaseClient:  viewmode property isn't defined. Setting viewmode to production mode
2013-04-17 15:14:49.856 INFO com.couchbase.client.CouchbaseConnection:  Shut down Couchbase client
2013-04-17 15:14:49.861 INFO com.couchbase.client.ViewConnection:  Node localhost has no ops in the queue
2013-04-17 15:14:49.861 INFO com.couchbase.client.ViewNode:  I/O reactor terminated for localhost
</code></pre>

<p>If you are connecting to a Couchbase Server 1.8 or against a Memcache-Bucket you won&rsquo;t see View connections getting established:</p>

<pre><code>INFO: Could not load properties file "cbclient.properties" because: File not found with system classloader.
2013-04-17 15:16:44.295 INFO com.couchbase.client.CouchbaseConnection:  Added {QA sa=/192.168.56.101:11210, #Rops=0, #Wops=0, #iq=0, topRop=null, topWop=null, toWrite=0, interested=0} to connect queue
2013-04-17 15:16:44.297 INFO com.couchbase.client.CouchbaseConnection:  Added {QA sa=/192.168.56.102:11210, #Rops=0, #Wops=0, #iq=0, topRop=null, topWop=null, toWrite=0, interested=0} to connect queue
2013-04-17 15:16:44.298 INFO com.couchbase.client.CouchbaseConnection:  Added {QA sa=/192.168.56.103:11210, #Rops=0, #Wops=0, #iq=0, topRop=null, topWop=null, toWrite=0, interested=0} to connect queue
2013-04-17 15:16:44.298 INFO com.couchbase.client.CouchbaseConnection:  Added {QA sa=/192.168.56.104:11210, #Rops=0, #Wops=0, #iq=0, topRop=null, topWop=null, toWrite=0, interested=0} to connect queue
2013-04-17 15:16:44.306 INFO com.couchbase.client.CouchbaseConnection:  Connection state changed for sun.nio.ch.SelectionKeyImpl@38b5dac4
2013-04-17 15:16:44.313 INFO com.couchbase.client.CouchbaseClient:  viewmode property isn't defined. Setting viewmode to production mode
2013-04-17 15:16:44.332 INFO com.couchbase.client.CouchbaseConnection:  Connection state changed for sun.nio.ch.SelectionKeyImpl@69945ce
2013-04-17 15:16:44.333 INFO com.couchbase.client.CouchbaseConnection:  Connection state changed for sun.nio.ch.SelectionKeyImpl@6766afb3
2013-04-17 15:16:44.334 INFO com.couchbase.client.CouchbaseConnection:  Connection state changed for sun.nio.ch.SelectionKeyImpl@2b2d96f2
2013-04-17 15:16:44.368 INFO net.spy.memcached.auth.AuthThread:  Authenticated to 192.168.56.103/192.168.56.103:11210
2013-04-17 15:16:44.368 INFO net.spy.memcached.auth.AuthThread:  Authenticated to 192.168.56.102/192.168.56.102:11210
2013-04-17 15:16:44.369 INFO net.spy.memcached.auth.AuthThread:  Authenticated to 192.168.56.101/192.168.56.101:11210
2013-04-17 15:16:44.369 INFO net.spy.memcached.auth.AuthThread:  Authenticated to 192.168.56.104/192.168.56.104:11210
2013-04-17 15:16:44.490 INFO com.couchbase.client.CouchbaseConnection:  Shut down Couchbase client
</code></pre>

<h2>Phase 2: Operations</h2>

<p>When the SDK is bootstrapped, it enables your application to run operations against the attached cluster. For the purpose of this blog post, we need to distinguish between operations that get executed against a stable cluster and operations on a cluster that is currently experiencing some form of topology change (be it planned because of adding nodes or unplanned because of a node failure). Let&rsquo;s tackle the regular operations first.</p>

<h3>Operations against a stable cluster</h3>

<p>While not directly visible in the first place, inside the SDK we need to distinguish between memcached operations and View operations. All operations that have a unique key in their method signature can be treaded as memcached operations. All of them eventually end up getting funneled through spy. View operations on the other hand are implemented completely inside the SDK itself.</p>

<p>Both View and memcached operations are asynchronous. Inside spy, there is one thread (call the I/O thread) dedicated to deal with IO operations. Note that in high-traffic environments, its not unusual that this thread is always active. It uses the non-blocking Java NIO mechanisms to deal with traffic, and loops around &ldquo;selectors&rdquo; that get notified when data can either be written or read. If you profile your application you&rsquo;ll see that this thread spends most of its time waiting on a <code>select</code> method, it means that it is idling there waiting to be notified for new traffic. The concepts used inside spy to deal with this are common Java NIO knowledge, so you may want to look into the <a href="https://www.ibm.com/developerworks/java/tutorials/j-nio/">NIO internals</a> first before digging into that code path. Good starting points are the <code>net.spy.memcached.MemcachedConnection</code> and <code>net.spy.memcached.protocol.TCPMemcachedNodeImpl</code> classes. Note that inside the SDK, we override the <code>MemcachedConnection</code> to hook in our own reconfiguration logic. This class can be found inside the SDK at <code>com.couchbase.client.CouchbaseConnection</code> and for memcached-type buckets in <code>com.couchbase.client.CouchbaseMemcachedConnection</code>.</p>

<p>So if a memcached operations (like <code>get()</code>) gets issued, it gets passed down until it reaches the IO thread. The IO thread will then put it on a write queue towards its target node. It gets written eventually and then the IO thread adds information to a read queue so the responses can be mapped accordingly. This approach is based on futures, so when the result actually arrives, the Future is marked as completed, the result gets parsed and attached as Object.</p>

<p>The SDK only uses the memcached binary protocol, although spy would also support ASCII. The binary format is much more efficient and some of the advanced operations are only implemented there.</p>

<p>You may wonder how the SDK knows where to send the operation? Since we already have the up-to-date cluster map, we can hash the key and then based on the node list and vBucketMap determine which node to access. The vBucketMap not only contains the information for the master node of the array, but also the information for zero to three replica nodes. Look at this (shortened) example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">vBucketServerMap</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'><span class="nx">hashAlgorithm</span><span class="o">:</span> <span class="s2">&quot;CRC&quot;</span><span class="p">,</span>
</span><span class='line'><span class="nx">numReplicas</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'><span class="nx">serverList</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>  <span class="s2">&quot;192.168.56.101:11210&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;192.168.56.102:11210&quot;</span>
</span><span class='line'><span class="p">],</span>
</span><span class='line'><span class="nx">vBucketMap</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span>
</span><span class='line'><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span>
</span><span class='line'><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="c1">//.....</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>serverList</code> contains our nodes, and the <code>vBucketMap</code> has pointers to the <code>serverList</code> array. We have 1024 vBuckets, so only some of them are shown here. You can see from looking at it that all keys that has into the first vBucket have its master node at index 0 (so the <code>.101</code> node) and its replica at index 1 (so the <code>.102</code> node). Once the cluster map changes and the vBuckets move around, we just need to update our config and know all the time where to point our operations towards.</p>

<p>View operations are handled differently. Since views can&rsquo;t be sent to a specific node (because we don&rsquo;t have a way to hash a key or something), we round-robin between the connected nodes. The operation gets assigned to a <a href="http://www.couchbase.com/autodocs/couchbase-java-client-1.1.5/com/couchbase/client/ViewNode.html">com.couchbase.client.ViewNode</a> once it has free connections and then executed. The result is also handled through futures. To implement this functionality, the SDK uses the third party Apache HTTP Commons (NIO) library.</p>

<p>The whole View API hides behind port 8092 on every node and is very similar to <a href="http://couchdb.apache.org/">CouchDB</a>. It also contains a RESTful API, but the structure is a little bit different. For example, you can reach a design document at <code>/&lt;bucketname&gt;/_design/&lt;designname&gt;</code>. It contains the View definitions in JSON:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nx">language</span><span class="o">:</span> <span class="s2">&quot;javascript&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">views</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">all</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">map</span><span class="o">:</span> <span class="s2">&quot;function (doc) { if(doc.type == &quot;</span><span class="nx">city</span><span class="s2">&quot;) {emit([doc.continent, doc.country, doc.name], 1)}}&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">reduce</span><span class="o">:</span> <span class="s2">&quot;_sum&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can then reach down one level further like <code>/&lt;bucketname&gt;/_design/&lt;designname&gt;/_view/&lt;viewname&gt;</code> to actually query it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span><span class="s2">&quot;total_rows&quot;</span><span class="o">:</span><span class="mi">9</span><span class="p">,</span><span class="s2">&quot;rows&quot;</span><span class="o">:</span><span class="p">[</span>
</span><span class='line'><span class="p">{</span><span class="s2">&quot;id&quot;</span><span class="o">:</span><span class="s2">&quot;city:shanghai&quot;</span><span class="p">,</span><span class="s2">&quot;key&quot;</span><span class="o">:</span><span class="p">[</span><span class="s2">&quot;asia&quot;</span><span class="p">,</span><span class="s2">&quot;china&quot;</span><span class="p">,</span><span class="s2">&quot;shanghai&quot;</span><span class="p">],</span><span class="s2">&quot;value&quot;</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="s2">&quot;id&quot;</span><span class="o">:</span><span class="s2">&quot;city:tokyo&quot;</span><span class="p">,</span><span class="s2">&quot;key&quot;</span><span class="o">:</span><span class="p">[</span><span class="s2">&quot;asia&quot;</span><span class="p">,</span><span class="s2">&quot;japan&quot;</span><span class="p">,</span><span class="s2">&quot;tokyo&quot;</span><span class="p">],</span><span class="s2">&quot;value&quot;</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="s2">&quot;id&quot;</span><span class="o">:</span><span class="s2">&quot;city:moscow&quot;</span><span class="p">,</span><span class="s2">&quot;key&quot;</span><span class="o">:</span><span class="p">[</span><span class="s2">&quot;asia&quot;</span><span class="p">,</span><span class="s2">&quot;russia&quot;</span><span class="p">,</span><span class="s2">&quot;moscow&quot;</span><span class="p">],</span><span class="s2">&quot;value&quot;</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="s2">&quot;id&quot;</span><span class="o">:</span><span class="s2">&quot;city:vienna&quot;</span><span class="p">,</span><span class="s2">&quot;key&quot;</span><span class="o">:</span><span class="p">[</span><span class="s2">&quot;europe&quot;</span><span class="p">,</span><span class="s2">&quot;austria&quot;</span><span class="p">,</span><span class="s2">&quot;vienna&quot;</span><span class="p">],</span><span class="s2">&quot;value&quot;</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="s2">&quot;id&quot;</span><span class="o">:</span><span class="s2">&quot;city:paris&quot;</span><span class="p">,</span><span class="s2">&quot;key&quot;</span><span class="o">:</span><span class="p">[</span><span class="s2">&quot;europe&quot;</span><span class="p">,</span><span class="s2">&quot;france&quot;</span><span class="p">,</span><span class="s2">&quot;paris&quot;</span><span class="p">],</span><span class="s2">&quot;value&quot;</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="s2">&quot;id&quot;</span><span class="o">:</span><span class="s2">&quot;city:rome&quot;</span><span class="p">,</span><span class="s2">&quot;key&quot;</span><span class="o">:</span><span class="p">[</span><span class="s2">&quot;europe&quot;</span><span class="p">,</span><span class="s2">&quot;italy&quot;</span><span class="p">,</span><span class="s2">&quot;rome&quot;</span><span class="p">],</span><span class="s2">&quot;value&quot;</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="s2">&quot;id&quot;</span><span class="o">:</span><span class="s2">&quot;city:amsterdam&quot;</span><span class="p">,</span><span class="s2">&quot;key&quot;</span><span class="o">:</span><span class="p">[</span><span class="s2">&quot;europe&quot;</span><span class="p">,</span><span class="s2">&quot;netherlands&quot;</span><span class="p">,</span><span class="s2">&quot;amsterdam&quot;</span><span class="p">],</span><span class="s2">&quot;value&quot;</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="s2">&quot;id&quot;</span><span class="o">:</span><span class="s2">&quot;city:new_york&quot;</span><span class="p">,</span><span class="s2">&quot;key&quot;</span><span class="o">:</span><span class="p">[</span><span class="s2">&quot;north_america&quot;</span><span class="p">,</span><span class="s2">&quot;usa&quot;</span><span class="p">,</span><span class="s2">&quot;new_york&quot;</span><span class="p">],</span><span class="s2">&quot;value&quot;</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="s2">&quot;id&quot;</span><span class="o">:</span><span class="s2">&quot;city:san_francisco&quot;</span><span class="p">,</span><span class="s2">&quot;key&quot;</span><span class="o">:</span><span class="p">[</span><span class="s2">&quot;north_america&quot;</span><span class="p">,</span><span class="s2">&quot;usa&quot;</span><span class="p">,</span><span class="s2">&quot;san_francisco&quot;</span><span class="p">],</span><span class="s2">&quot;value&quot;</span><span class="o">:</span><span class="mi">1</span><span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once the request is sent and a response gets back, it depends on the type of View request to determine on how the response gets parsed. It makes a difference, because reduced View queries look different than non-reduced. The SDK also includes support for spatial Views and they need to be handled differently as well.</p>

<p>The whole View response parsing implementation can be found inside the <a href="http://www.couchbase.com/autodocs/couchbase-java-client-1.1.5/com/couchbase/client/protocol/views/package-frame.html">com.couchbase.client.protocol.views</a> namespace. You&rsquo;ll find abstract classes and interfaces like <code>ViewResponse</code> in there, and then their special implementations like <code>ViewResponseNoDocs</code>, <code>ViewResponseWithDocs</code> or <code>ViewResponseReduced</code>. It also makes a different if <code>setIncludeDocs()</code> is used on the Query object, because the SDK also needs to load the full documents using the memcached protocol behind the scenes. This is also done while parsing the Views.</p>

<p>Now that you have a basic understanding on how the SDK distributes its operations under stable conditions, we need to cover an important topic: how the SDK deals with cluster topology changes.</p>

<h3>Operations against a rebalancing cluster</h3>

<p>Note that there is a separate blog post upcoming dealing with all the scenarios that may come up when something goes wrong on the SDK. Since rebalancing and failover are crucial parts of the SDK, this post deals more with the general process on how this is handled.</p>

<p>As mentioned earlier, the SDK receives topology updates through the streaming connection. Leaving the special case aside where this node actually gets removed or fails, all updates will stream in near real-time (in a eventually consistent architecture, it may take some time until the cluster updates get populated to that node). The chunks that come in over the stream look exactly like the ones we&rsquo;ve seen when reading the initial configuration. After those chunks have been parsed, we need to check if the changes really affect the SDK (since there are many more parameters than the SDK needs, it won&rsquo;t make sense to listen to all of them). All changes that affect the topology and/or vBucket map are considered as important. If nodes get added or removed (be it either through failure or planned), we need to open or close the sockets. This process is called &ldquo;reconfiguration&rdquo;.</p>

<p>Once such a reconfiguration is triggered, lots of actions need to happen in various places. Spymemcached needs to handle its sockets, View nodes need to be managed and new configuration needs to be updated. The SDK makes sure that only one reconfiguration can happen at the same time through locks so we don&rsquo;t have any race conditions going on.</p>

<p>The Netty-based <code>BucketUpdateResponseHandler</code> triggers the <code>CouchbaseClient#reconfigure</code> method, which then starts to dispatch everything. Depending on the bucket type used (i.e. memcached type buckets don&rsquo;t have Views and therefore no ViewNodes), configs are updated and sockets closed. Once the reconfiguration is done, it can receive new ones. During planned changes, everything should be pretty much controlled and no operations should fail. If a node is actually down and cannot be reached, those operations will be cancelled. Reconfiguration is tricky because the topology changes while operations are flowing through the system.</p>

<p>Finally, let&rsquo;s cover some differences between Couchbase and Memcache type buckets. All the information hat you&rsquo;ve been reading previously only applies to Couchbase buckets. Memcache buckets are pretty basic and do not have the concept of vBuckets. Since you don&rsquo;t have vBuckets, all that the Client has to do is to manage the nodes and their corresponding sockets. Also, a different hashing algorithm is used (mostly Ketama) to determine the target node for each key. Also, memcache buckets don&rsquo;t have views, so you can&rsquo;t use the View API and it doesn&rsquo;t make much sense to keep View sockets around. So to clarify the previous statement, if you are running against a memcache bucket, for a 10 node cluster you&rsquo;ll only have 11 open connections.</p>

<h2>Phase 3: Shutdown</h2>

<p>Once the <code>CouchbaseClient#shutdown()</code> method is called, no more operations are allowed to be added onto the <code>CouchbaseConnection</code>. Until the timeout is reached, the client wants to make sure that all operations went through accordingly. All sockets for both memcached and View connections are shut down once there are no more operations in the queue (or they get dropped). Note that that the <code>shutdown</code> methods on those sockets are also used when a node gets removed from the cluster during normal operations, so it&rsquo;s basically the same, but just for all attached nodes at the same time.</p>

<h2>Summary</h2>

<p>After reading this blog post, you should have a much more clear picture on how the client SDK works and why it is designed the way it is. We have lots of enhancements planned for future releases, mostly enhancing the direct API experience. Note that this blog post didn&rsquo;t cover how errors are handled inside the SDK; this will be published in a separate blog post because there is also lots of information to cover.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Never awaitUninterruptibly() on Netty Channels]]></title>
    <link href="http://daschl.github.io/Never-await-Uninterruptibly-on-Netty-Channels"/>
    <updated>2013-03-05T13:49:48+01:00</updated>
    <id>http://daschl.github.io/Never-await-Uninterruptibly-on-Netty-Channels</id>
    <content type="html"><![CDATA[<p>TL:DR; When acquiring <a href="http://netty.io/3.6/api/org/jboss/netty/channel/Channel.html">Channels</a> in <a href="http://netty.io">Netty</a>, always use a <a href="http://netty.io/3.6/api/org/jboss/netty/channel/ChannelFutureListener.html">ChannelFutureListener</a> and never <a href="http://docs.jboss.org/netty/3.2/api/org/jboss/netty/channel/ChannelFuture.html#awaitUninterruptibly(">awaitUninterruptibly()</a>). Curious why? Read on.</p>

<p>In the <a href="http://www.couchbase.com/develop/java/current">Java SDK</a> for <a href="http://www.couchbase.com/">Couchbase</a>, we use Netty to establish and maintain a streaming connection to one of the cluster nodes in order to get notified when topology changes happen. This streaming connection needs to be established during the bootstrap process of the client and we need to block until the connection is established (actually we don&rsquo;t need to, but the current implementation works that way). The old implementation to acquire the Channel looked like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ClientBootstrap</span> <span class="n">bootstrap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClientBootstrap</span><span class="o">(</span><span class="n">factory</span><span class="o">);</span>
</span><span class='line'><span class="n">bootstrap</span><span class="o">.</span><span class="na">setPipelineFactory</span><span class="o">(</span><span class="k">new</span> <span class="n">BucketMonitorPipelineFactory</span><span class="o">());</span>
</span><span class='line'><span class="n">ChannelFuture</span> <span class="n">future</span> <span class="o">=</span> <span class="n">bootstrap</span><span class="o">.</span><span class="na">connect</span><span class="o">(</span><span class="k">new</span> <span class="n">InetSocketAddress</span><span class="o">(</span><span class="n">host</span><span class="o">,</span> <span class="n">port</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="n">channel</span> <span class="o">=</span> <span class="n">future</span><span class="o">.</span><span class="na">awaitUninterruptibly</span><span class="o">().</span><span class="na">getChannel</span><span class="o">();</span>
</span><span class='line'><span class="k">if</span> <span class="o">(!</span><span class="n">future</span><span class="o">.</span><span class="na">isSuccess</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">bootstrap</span><span class="o">.</span><span class="na">releaseExternalResources</span><span class="o">();</span>
</span><span class='line'>  <span class="k">throw</span> <span class="k">new</span> <span class="nf">ConnectionException</span><span class="o">(</span><span class="s">&quot;Something bad happened...&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works great, but there is a problem associated that is not obvious in the first place. As long as you use this code only in a client side context, Netty will not complain and happily work with your code. When people started to use our client library inside a Netty based server framework (for example <a href="http://www.playframework.com/">Play</a>), Netty complained like this:</p>

<pre><code>Unexpected exception[IllegalStateException: await*() in I/O thread causes a dead lock or sudden performance drop. Use addListener() instead or call await*() from a different thread.]
</code></pre>

<p>The environment where this happens is clearly defined: we are bootstrapping a Netty client inside the I/O thread of a Netty server, so we basically have two Netty environments running and one is complaining about the other. Once you are aware of this situation, it is more or less easy to fix:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">bootstrap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClientBootstrap</span><span class="o">(</span><span class="n">factory</span><span class="o">);</span>
</span><span class='line'><span class="n">bootstrap</span><span class="o">.</span><span class="na">setPipelineFactory</span><span class="o">(</span><span class="k">new</span> <span class="n">BucketMonitorPipelineFactory</span><span class="o">());</span>
</span><span class='line'><span class="n">ChannelFuture</span> <span class="n">future</span> <span class="o">=</span>  <span class="n">bootstrap</span><span class="o">.</span><span class="na">connect</span><span class="o">(</span><span class="k">new</span> <span class="n">InetSocketAddress</span><span class="o">(</span><span class="n">host</span><span class="o">,</span> <span class="n">port</span><span class="o">));</span>
</span><span class='line'><span class="n">channelFuture</span><span class="o">.</span><span class="na">addListener</span><span class="o">(</span><span class="k">new</span> <span class="n">ChannelFutureListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">operationComplete</span><span class="o">(</span><span class="n">ChannelFuture</span> <span class="n">cf</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span><span class="n">cf</span><span class="o">.</span><span class="na">isSuccess</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">channel</span> <span class="o">=</span> <span class="n">cf</span><span class="o">.</span><span class="na">getChannel</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">bootstrap</span><span class="o">.</span><span class="na">releaseExternalResources</span><span class="o">();</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">ConnectionException</span><span class="o">(</span><span class="s">&quot;Something bad happened...&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, instead of waiting on the caller thread, we move the waiting part to a separate thread managed by the Netty execution context. There&rsquo;s only one problem left: we still need to block, because the code down the stack depends on a established Channel to work with. To solve this issue, we can use a <a href="http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/CountDownLatch.html">CountDownLatch</a> like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">final</span> <span class="n">CountDownLatch</span> <span class="n">channelLatch</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CountDownLatch</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'><span class="n">channelFuture</span><span class="o">.</span><span class="na">addListener</span><span class="o">(</span><span class="k">new</span> <span class="n">ChannelFutureListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">operationComplete</span><span class="o">(</span><span class="n">ChannelFuture</span> <span class="n">cf</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span><span class="n">cf</span><span class="o">.</span><span class="na">isSuccess</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">channel</span> <span class="o">=</span> <span class="n">cf</span><span class="o">.</span><span class="na">getChannel</span><span class="o">();</span>
</span><span class='line'>      <span class="n">channelLatch</span><span class="o">.</span><span class="na">countDown</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">bootstrap</span><span class="o">.</span><span class="na">releaseExternalResources</span><span class="o">();</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">ConnectionException</span><span class="o">(</span><span class="s">&quot;Something bad happened...&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">channelLatch</span><span class="o">.</span><span class="na">await</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="n">InterruptedException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">throw</span> <span class="k">new</span> <span class="nf">ConnectionException</span><span class="o">(</span><span class="s">&quot;Interrupted while waiting for streaming &quot;</span>
</span><span class='line'>    <span class="o">+</span> <span class="s">&quot;connection to arrive.&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the end we still block on the caller thread, but we are compliant with Netty. The main takeaway for me is that you should never block on acquiring Channels in Netty, just because of the fact that your client side code may be used in a server side context as well. This is especially true for library developers like me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Journey on Avoiding Nulls in PHP]]></title>
    <link href="http://daschl.github.io/A-Journey-on-Avoiding-Nulls-in-PHP"/>
    <updated>2013-02-19T13:49:48+01:00</updated>
    <id>http://daschl.github.io/A-Journey-on-Avoiding-Nulls-in-PHP</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s face it: nulls are a hassle and lead to exceptions and inconsistent application state. <a href="http://en.wikipedia.org/wiki/Tony_Hoare">Tony Hoare</a>, the inventor of QuickSort, even calls it his <a href="http://qconlondon.com/london-2009/presentation/Null+References:+The+Billion+Dollar+Mistake">billion dollar mistake</a>.</p>

<p>While every developer has kind of accepted their existence, they are suddenly there when we&rsquo;d desperately need them to not show up. How often did you write<code>if($obj === null)</code> in your PHP code? Can&rsquo;t there be a better, more elegant and fault-tolerant solution to the problem?</p>

<p>It turns out that for example in <a href="http://www.scala-lang.org/">Scala</a>, you can avoid nulls by using the <a href="http://www.scala-lang.org/api/current/index.html#scala.Option">Option</a> class. It allows you to express in a clear way that the result of a &ndash; lets say &ndash; method can either be good (a reference to a valid object) or bad. In PHP, bad often means null. Scala then consequently provides method to access this object safely. You as the developer can choose at which point you want to get the value out, either by accessing it directly (and catching exceptions) or provide a sensible default value.</p>

<p>In Scala, you write code like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/* An option with a value */</span>
</span><span class='line'><span class="k">val</span> <span class="n">a</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Some</span><span class="o">(</span><span class="mi">5</span><span class="o">)</span>
</span><span class='line'><span class="cm">/* An option with no value */</span>
</span><span class='line'><span class="k">val</span> <span class="n">b</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="nc">None</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Returns 5 */</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">getOrElse</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span>
</span><span class='line'><span class="cm">/* Returns 10 */</span>
</span><span class='line'><span class="n">b</span><span class="o">.</span><span class="n">getOrElse</span><span class="o">(</span><span class="mi">10</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also use helpful methods like <code>isDefined()</code> to peek into the object and see whats going on at runtime. All this is much more expressive than juggling around with a possible <code>null</code> value.</p>

<p>Java has the same issues as PHP, and it hurt Google so much that they integrated the concept of an <a href="http://code.google.com/p/guava-libraries/wiki/UsingAndAvoidingNullExplained">Optional</a> directly into the core of their <a href="http://code.google.com/p/guava-libraries/">Google Guava</a> Java library collection. I really like their code and use it in my Java projects, so I decided it would be an interesting project to port this to PHP. Since PHP isn&rsquo;t a statically typed language like Java, concepts like generics have been removed and some methods renamed (they look more like Scala&rsquo;s now), but in essence its the same.</p>

<h2>Usage</h2>

<p>Before digging into how it works, let&rsquo;s look at how we can use it. We only need to work with three classes called <code>Optional</code>, <code>Present</code> and <code>Absent</code>. <code>Optional</code> is the base class, <code>Present</code> and <code>Absent</code> inherit from it and provide the method bodies for their appropriate behavior.</p>

<p>The main idea is to fail fast when null is discovered and afterwards have a safe way of working with our value. Creating a <code>Optional</code> works through the static <code>of</code> method. We then have a range of methods available to inspect and fetch the output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nv">$possible</span> <span class="o">=</span> <span class="nx">Optional</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$possible</span><span class="o">-&gt;</span><span class="na">isPresent</span><span class="p">());</span> <span class="c1">// bool(true)</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$possible</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">());</span> <span class="c1">// int(5)</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$possible</span><span class="o">-&gt;</span><span class="na">getOrElse</span><span class="p">(</span><span class="mi">99</span><span class="p">));</span> <span class="c1">// int(5)</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$possible</span><span class="o">-&gt;</span><span class="na">getOrNull</span><span class="p">());</span> <span class="c1">// int(5)</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>If we&rsquo;re trying to call <code>of</code> with <code>null</code>, a <code>NullPointerException</code> is raised immediately. We can use the <code>fromNullable</code> method to handle this case safely:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nv">$possible</span> <span class="o">=</span> <span class="nx">Optional</span><span class="o">::</span><span class="na">of</span><span class="p">(</span><span class="k">null</span><span class="p">);</span> <span class="c1">// Throws &#39;NullPointerException&#39; with message &#39;Unallowed null in reference found.&#39;</span>
</span><span class='line'><span class="nv">$possible</span> <span class="o">=</span> <span class="nx">Optional</span><span class="o">::</span><span class="na">fromNullable</span><span class="p">(</span><span class="k">null</span><span class="p">);</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$possible</span><span class="o">-&gt;</span><span class="na">isPresent</span><span class="p">());</span> <span class="c1">// bool(false)</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$possible</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">());</span> <span class="c1">// Throws IllegalStateException</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$possible</span><span class="o">-&gt;</span><span class="na">getOrElse</span><span class="p">(</span><span class="mi">99</span><span class="p">));</span> <span class="c1">// int(99)</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$possible</span><span class="o">-&gt;</span><span class="na">getOrNull</span><span class="p">());</span> <span class="c1">// NULL</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>We can even check the equality of the contained Optionals:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nv">$val1</span> <span class="o">=</span> <span class="nx">Optional</span><span class="o">::</span><span class="na">fromNullable</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'><span class="nv">$val2</span> <span class="o">=</span> <span class="nx">Optional</span><span class="o">::</span><span class="na">fromNullable</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'><span class="nv">$val3</span> <span class="o">=</span> <span class="nx">Optional</span><span class="o">::</span><span class="na">fromNullable</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$val1</span><span class="o">-&gt;</span><span class="na">equals</span><span class="p">(</span><span class="nv">$val2</span><span class="p">));</span> <span class="c1">// bool(false)</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$val2</span><span class="o">-&gt;</span><span class="na">equals</span><span class="p">(</span><span class="nv">$val3</span><span class="p">));</span> <span class="c1">// bool(true)</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Now this simple examples are easy to grasp and this is a good thing. It&rsquo;s not about complexity here, it&rsquo;s about making it obvious that a value may or may not be null and handling it appropriately.</p>

<p>If you&rsquo;re accessing a method of a library, you need to check the return value every time if it&rsquo;s null to make sure you&rsquo;re not in an invalid state. If it&rsquo;s clear that the library is returning an instance of <code>Optional</code>, you know what to expect and how to deal with it appropriately.</p>

<h2>Implementation</h2>

<p>Let&rsquo;s look at how this implemented.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">abstract</span> <span class="k">class</span> <span class="nc">Optional</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">private</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="sd">/**</span>
</span><span class='line'><span class="sd">  * Returns an instance with no contained reference.</span>
</span><span class='line'><span class="sd">  */</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">absent</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">Absent</span><span class="o">::</span><span class="na">instance</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Returns an Optional instance containing the given non-null reference.</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">of</span><span class="p">(</span><span class="nv">$reference</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="nx">Present</span><span class="p">(</span><span class="k">static</span><span class="o">::</span><span class="na">checkNotNull</span><span class="p">(</span><span class="nv">$reference</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="sd">/**</span>
</span><span class='line'><span class="sd">  * If reference is non-null, returns an Optional instance containing</span>
</span><span class='line'><span class="sd">  * that reference; otherwise returns Absent.</span>
</span><span class='line'><span class="sd">  */</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">fromNullable</span><span class="p">(</span><span class="nv">$reference</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$reference</span> <span class="o">===</span> <span class="k">null</span> <span class="o">?</span> <span class="k">static</span><span class="o">::</span><span class="na">absent</span><span class="p">()</span> <span class="o">:</span> <span class="k">new</span> <span class="nx">Present</span><span class="p">(</span><span class="nv">$reference</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">abstract</span> <span class="k">function</span> <span class="nf">isPresent</span><span class="p">();</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">abstract</span> <span class="k">function</span> <span class="nf">get</span><span class="p">();</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">abstract</span> <span class="k">function</span> <span class="nf">getOrElse</span><span class="p">(</span><span class="nv">$defaultValue</span><span class="p">);</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">abstract</span> <span class="k">function</span> <span class="nf">getOrNull</span><span class="p">();</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">abstract</span> <span class="k">function</span> <span class="nf">equals</span><span class="p">(</span><span class="nv">$object</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="sd">/**</span>
</span><span class='line'><span class="sd">  * Make sure the passed reference is not null.</span>
</span><span class='line'><span class="sd">  */</span>
</span><span class='line'>  <span class="k">protected</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">checkNotNull</span><span class="p">(</span><span class="nv">$reference</span><span class="p">,</span> <span class="nv">$message</span> <span class="o">=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nv">$message</span> <span class="o">===</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nv">$message</span> <span class="o">=</span> <span class="s2">&quot;Unallowed null in reference found.&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nv">$reference</span> <span class="o">===</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">throw</span> <span class="k">new</span> <span class="nx">NullPointerException</span><span class="p">(</span><span class="nv">$message</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$reference</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>This abstract class defines all of the methods we&rsquo;ll implement in <code>Present</code> and <code>Absent</code>, as well as all the static methods that you can call directly (especially the <code>of</code> and <code>fromNullable</code> methods). Note that in the appropriate places, <code>checkNotNull</code> is called which will throw a <code>NullPointerException</code> if a null is found. This adheres to the fail fast principle.</p>

<p>Now let&rsquo;s implement the <code>Absent</code> class, which represents the state where no reference is present (for example a null was passed in through <code>fromNullable</code>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;?</span><span class="n">php</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">Absent</span> <span class="kd">extends</span> <span class="n">Optional</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">$instance</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">function</span> <span class="nf">__construct</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">function</span> <span class="nf">isPresent</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">function</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">&quot;Optional-&gt;get() cannot be called on an absent value&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">function</span> <span class="nf">getOrElse</span><span class="o">(</span><span class="n">$defaultValue</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">$message</span> <span class="o">=</span> <span class="s">&quot;use Optional-&gt;orNull() instead of Optional-&gt;or(null)&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="kd">static</span><span class="o">::</span><span class="n">checkNotNull</span><span class="o">(</span><span class="n">$defaultValue</span><span class="o">,</span> <span class="n">$message</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">function</span> <span class="nf">getOrNull</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">function</span> <span class="nf">equals</span><span class="o">(</span><span class="n">$object</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">$object</span> <span class="o">===</span> <span class="n">$this</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">protected</span> <span class="kd">static</span> <span class="n">function</span> <span class="nf">instance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="kd">static</span><span class="o">::</span><span class="n">$instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="kd">static</span><span class="o">::</span><span class="n">$instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Absent</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="kd">static</span><span class="o">::</span><span class="n">$instance</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">?&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>$instance</code> variable is managed here through the singleton pattern. We only need one instance of <code>Absent</code>, this saves memory and CPU time. The other methods just implement the expected behaviour of something that is not available.</p>

<p>Finally, we can implement the <code>Present</code> class, which actually stores our instance if available.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Present</span> <span class="k">extends</span> <span class="nx">Optional</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span> <span class="nv">$reference</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">protected</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$reference</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">reference</span> <span class="o">=</span> <span class="nv">$reference</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">isPresent</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">get</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">reference</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">getOrElse</span><span class="p">(</span><span class="nv">$defaultValue</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$message</span> <span class="o">=</span> <span class="s2">&quot;use Optional-&gt;orNull() instead of Optional-&gt;or(null)&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="k">static</span><span class="o">::</span><span class="na">checkNotNull</span><span class="p">(</span><span class="nv">$defaultValue</span><span class="p">,</span> <span class="nv">$message</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">reference</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">getOrNull</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">reference</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">equals</span><span class="p">(</span><span class="nv">$object</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nv">$object</span> <span class="nx">instanceof</span> <span class="nx">Present</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">reference</span> <span class="o">===</span> <span class="nv">$object</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>It looks the same as the <code>Absent</code> class, but manages to return our instance if necessary and implements the <code>equals</code> method to actually check with the given object.</p>

<p>Edit: Rasmus Schultz pointed out that he uses the ternary operator for lightweight null checks, you may want to <a href="http://blog.mindplay.dk/2013/02/the-or-else-operator-in-php-53.html">check out</a> his post too!</p>

<h2>Summary</h2>

<p>As you can see, the adoption of the <code>Optional</code> pattern can greatly increase the expressiveness of your code, by consequently avoiding null and its associated pitfalls. It also makes your code less error-prone, because you can&rsquo;t stumble upon nulls when using this pattern consequently.</p>

<p>This is kind of an experimental implementation, but I think putting this together in a utility library could drive the adoption in the PHP community. I&rsquo;m curious what you think about the concept and if it makes sense for you and your applications!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Benchmarking Cache Transcoders in PHP]]></title>
    <link href="http://daschl.github.io/Benchmarking-Cache-Transcoders-in-PHP"/>
    <updated>2013-01-30T13:49:48+01:00</updated>
    <id>http://daschl.github.io/Benchmarking-Cache-Transcoders-in-PHP</id>
    <content type="html"><![CDATA[<h2>Motivation</h2>

<p>Storing PHP objects (or simpler data types like arrays) in caches always requires some kind of transformation. You need a way of encoding/decoding data so that it can be stored and loaded properly. In most languages, this process is known as object <a href="http://en.wikipedia.org/wiki/Serialization">serialization</a>. PHP provides a mechanism for this out of the box, but in this article we&rsquo;ll also look at <a href="http://pecl.php.net/package/igbinary">igbinary</a> as a drop-in replacement for the default serializer. We also compare the results to object transcoding based on <a href="http://json.org/">JSON</a>, which is not really an object serialization mechanism but commonly used as a data chache structure which has its own benefits and drawbacks.</p>

<p>As always, please take this benchmarks with a grain of salt. Don&rsquo;t take the absolute numbers as a reference, look at the differences and run the benchmarks in your environment to get accurate results that apply to your scenarios. If you spot any flaws in what is shown here, please point it out in the comments. This blog post is not some kind of &ldquo;advertising&rdquo; for a special mechanism and all different transcoders are discussed with their benefits and drawbacks.</p>

<p>If you want to compare your results to mine, I&rsquo;m using a MacBook Pro on Mac OS X 10.8.2 with the 2.3 GHz i7 and 16GB RAM. I&rsquo;m using PHP 5.4.11 (through <a href="https://github.com/josegonzalez/homebrew-php">homebrew-php</a>) instead of the shipped 5.3.</p>

<h2>The PHP Serializer</h2>

<p>Out of the box, PHP provides a serialization mechanism on top of the <a href="http://php.net/manual/de/function.serialize.php">serialize</a> and <a href="http://www.php.net/manual/de/function.unserialize.php">unserialize</a> methods. By applying this method on a variable, it gets encoded to a byte stream and neither the type nor the structure gets lost (you can&rsquo;t store <a href="http://www.php.net/manual/en/language.types.resource.php">resources</a>).</p>

<p>So, let&rsquo;s look at a simple and a more complex example on how the transformation looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">private</span> <span class="nv">$name</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span> <span class="o">=</span> <span class="nv">$name</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">getName</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$simple</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s2">&quot;key&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;value&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$complex</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s2">&quot;Michael&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>If we&rsquo;re calling <code>serialize()</code> on both variables, the output (as a string representation) looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nv">$simpleSerialized</span> <span class="o">=</span> <span class="nb">serialize</span><span class="p">(</span><span class="nv">$simple</span><span class="p">);</span>
</span><span class='line'><span class="nv">$complexSerialized</span> <span class="o">=</span> <span class="nb">serialize</span><span class="p">(</span><span class="nv">$complex</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// string(28) &quot;a:1:{s:3:&quot;key&quot;;s:5:&quot;value&quot;;}&quot;</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nb">serialize</span><span class="p">(</span><span class="nv">$simple</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// string(51) &quot;O:6:&quot;Person&quot;:1:{s:12:&quot;\000Person\000name&quot;;s:7:&quot;Michael&quot;;}&quot;</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nb">serialize</span><span class="p">(</span><span class="nv">$complex</span><span class="p">));</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>While the resulting string is not designed for readability, you can clearly see that some metadata is added in order to make the unserialization possible. For example, the <code>key</code> string is serialized to <code>s:3:"key"</code> where the <code>s</code> means <code>string</code> and <code>3</code> is the string length. Also, <code>a</code> points to an <code>array</code> and <code>O</code> to an <code>object</code>.</p>

<p>We can now <code>unserialize()</code> the values and work with them as if they&rsquo;ve never been stored somewhere else:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nv">$simpleUnserialized</span> <span class="o">=</span> <span class="nb">unserialize</span><span class="p">(</span><span class="nv">$simpleSerialized</span><span class="p">);</span>
</span><span class='line'><span class="nv">$complexUnserialized</span> <span class="o">=</span> <span class="nb">unserialize</span><span class="p">(</span><span class="nv">$complexSerialized</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// array(1) {&#39;key&#39; =&gt; string(5) &quot;value&quot;}</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$simpleUnserialized</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// string(7) &quot;Michael&quot;</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$complexUnserialized</span><span class="o">-&gt;</span><span class="na">getName</span><span class="p">());</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>In practice, two characteristics are important: size of the serialized value and performance. While from a developer perspective performance is fun to explore, the size of the serialized object is what matters most. Performance differences are only measurable when running it in a loop with lots of iterations, while in practice you may only work with a few objects at a time per request.</p>

<p>Let&rsquo;s use a common caching scenario: imagine we&rsquo;re caching entity responses from an ORM framework like <a href="http://www.doctrine-project.org/">Doctrine</a>. Here is a blog post class that will be filled with life:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">BlogPost</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span> <span class="nv">$title</span><span class="p">;</span>
</span><span class='line'>  <span class="k">private</span> <span class="nv">$teaser</span><span class="p">;</span>
</span><span class='line'>  <span class="k">private</span> <span class="nv">$author</span><span class="p">;</span>
</span><span class='line'>  <span class="k">private</span> <span class="nv">$body</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$title</span><span class="p">,</span> <span class="nv">$teaser</span><span class="p">,</span> <span class="nv">$author</span><span class="p">,</span> <span class="nv">$body</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">title</span> <span class="o">=</span> <span class="nv">$title</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">teaser</span> <span class="o">=</span> <span class="nv">$teaser</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">author</span> <span class="o">=</span> <span class="nv">$author</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">body</span> <span class="o">=</span> <span class="nv">$body</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">getTitle</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">title</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">getTeaser</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">teaser</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">getAuthor</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">author</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">getBody</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">body</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Please take this with a grain of salt, because since JSON transcoding is not able to store a 1:1 representation like <code>serialize</code>, we need to work around that a bit. More details and discussion will be provided in the JSON section.</p>

<p>Assume that a blog post with content has around 10k characters and about 10kb in size, lets create a crafted blog post:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nv">$randomString</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$chars</span> <span class="o">=</span> <span class="s2">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 .&quot;</span><span class="p">;</span>    
</span><span class='line'>  <span class="nv">$str</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span> <span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$length</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$str</span> <span class="o">.=</span> <span class="nv">$chars</span><span class="p">[</span><span class="nx">rand</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">strlen</span><span class="p">(</span><span class="nv">$chars</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nv">$str</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$title</span> <span class="o">=</span> <span class="s2">&quot;How to measure caching transcoders&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$teaser</span> <span class="o">=</span> <span class="s2">&quot;This is a much longer introduction on how to measure caching transcoders. Feel free to post your own findings.&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$author</span> <span class="o">=</span> <span class="s2">&quot;daschl&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$body</span> <span class="o">=</span> <span class="nv">$randomString</span><span class="p">(</span><span class="mi">10000</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$post</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BlogPost</span><span class="p">(</span><span class="nv">$title</span><span class="p">,</span> <span class="nv">$teaser</span><span class="p">,</span> <span class="nv">$author</span><span class="p">,</span> <span class="nv">$body</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Now run <code>serialize</code> and <code>unserialize</code> in loops to measure performance as well as determine the resulting size of the object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nv">$iterations</span> <span class="o">=</span> <span class="mi">10000</span><span class="p">;</span>
</span><span class='line'><span class="nv">$start</span> <span class="o">=</span> <span class="nb">microtime</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="nv">$i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nv">$i</span><span class="o">&lt;</span><span class="nv">$iterations</span><span class="p">;</span><span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$serialized</span> <span class="o">=</span> <span class="nb">serialize</span><span class="p">(</span><span class="nv">$post</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nv">$end</span> <span class="o">=</span> <span class="nb">microtime</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;Size: &quot;</span> <span class="o">.</span> <span class="nb">strlen</span><span class="p">(</span><span class="nv">$serialized</span><span class="p">)</span> <span class="o">.</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">echo</span> <span class="p">(</span><span class="nv">$end</span> <span class="o">-</span> <span class="nv">$start</span><span class="p">)</span> <span class="o">*</span> <span class="mi">1000</span> <span class="o">.</span> <span class="s2">&quot;Milliseconds</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>On my machine, to serialize 10000 objects it took about 33 milliseconds. The length of the resulting object (its string representation) is 10297 characters. This is kind of expected because the bulk of the object is the long article body. Before start comparing, we can already make one observation: its pretty fast. Now, let&rsquo;s move on to igbinary serialization and see how these results compare.</p>

<h2>Serializing with igbinary</h2>

<p>The <a href="http://pecl.php.net/package/igbinary">igbinary</a> extension was developed as a drop-in replacement for the default PHP serializer. Instead of storing the serialized object as a text, it is stored as binary data. You can install it either through PECL or compile it from source, either way before running the tests make sure you have the <code>igbinary</code> extension enabled:</p>

<pre><code>michael@daschlbook ~ $ php -m | grep igbinary
igbinary
</code></pre>

<p>Instead of using <code>serialize</code> or <code>unserialize</code>, igbinary provides us with appropriate <code>igbinary_serialize</code> and <code>igbinary_unserialize</code> functions. Now we can apply the same microbenchmark and see the results:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nv">$iterations</span> <span class="o">=</span> <span class="mi">10000</span><span class="p">;</span>
</span><span class='line'><span class="nv">$start</span> <span class="o">=</span> <span class="nb">microtime</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="nv">$i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nv">$i</span><span class="o">&lt;</span><span class="nv">$iterations</span><span class="p">;</span><span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$serialized</span> <span class="o">=</span> <span class="nx">igbinary_serialize</span><span class="p">(</span><span class="nv">$post</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nv">$end</span> <span class="o">=</span> <span class="nb">microtime</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;Size: &quot;</span> <span class="o">.</span> <span class="nb">strlen</span><span class="p">(</span><span class="nv">$serialized</span><span class="p">)</span> <span class="o">.</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">echo</span> <span class="p">(</span><span class="nv">$end</span> <span class="o">-</span> <span class="nv">$start</span><span class="p">)</span> <span class="o">*</span> <span class="mi">1000</span> <span class="o">.</span> <span class="s2">&quot;Milliseconds</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>With default settings, to serialize 10000 objects with igbinary it took 678 milliseconds. The length of the resulting object is 10244 characters. If you compare it with the default serialization mechanism, that is 20 times slower and the resulting object isn&rsquo;t much smaller either. Bummer &ndash; or not? Let&rsquo;s look at why this is happening.</p>

<p>Let&rsquo;s look at a different workload. Let&rsquo;s create a data structure which consist of 30 smaller blog posts and measure the statistics for both again (only doing 1000 iterations instead of 10000):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nv">$posts</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="nv">$i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nv">$i</span><span class="o">&lt;</span><span class="mi">30</span><span class="p">;</span><span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$posts</span><span class="p">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BlogPost</span><span class="p">(</span><span class="nv">$title</span><span class="p">,</span> <span class="nv">$teaser</span><span class="p">,</span> <span class="nv">$author</span><span class="p">,</span> <span class="nv">$randomString</span><span class="p">(</span><span class="mi">50</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The results are more interesting: on my machine igbinary takes about 95 milliseconds while serialize needs only 41 milliseconds. Now it&rsquo;s just 2 times slower. But here comes the important part: the resulting size of igbinary is 2385 characters, while serialize is 10467 characters! That&rsquo;s about 5 times smaller. Note that this gap increases the larger your PHP object gets (not in terms of long character strings but speaking of complexity like methods).</p>

<p>Note that the igbinary docs say you should set <code>igbinary.compact_strings</code> to <code>Off</code> to increase performance, but there was no real measurable difference in my testings.</p>

<p>There is one more thing we haven&rsquo;t compared: deserializing of previously serialized objects. We can take the same code from above, use the serialized part as input and measure the timings once again (not that we don&rsquo;t need to measure the size of the resulting object because we&rsquo;re creating a &ldquo;live&rdquo; object again):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nv">$posts</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="nv">$i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nv">$i</span><span class="o">&lt;</span><span class="mi">30</span><span class="p">;</span><span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$posts</span><span class="p">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BlogPost</span><span class="p">(</span><span class="nv">$title</span><span class="p">,</span> <span class="nv">$teaser</span><span class="p">,</span> <span class="nv">$author</span><span class="p">,</span> <span class="nv">$randomString</span><span class="p">(</span><span class="mi">50</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$serializedIgbinary</span> <span class="o">=</span> <span class="nx">igbinary_serialize</span><span class="p">(</span><span class="nv">$posts</span><span class="p">);</span>
</span><span class='line'><span class="nv">$serializedClassic</span> <span class="o">=</span> <span class="nb">serialize</span><span class="p">(</span><span class="nv">$posts</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$iterations</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">;</span>
</span><span class='line'><span class="nv">$start</span> <span class="o">=</span> <span class="nb">microtime</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="nv">$i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nv">$i</span><span class="o">&lt;</span><span class="nv">$iterations</span><span class="p">;</span><span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$unserialized</span> <span class="o">=</span> <span class="nx">igbinary_unserialize</span><span class="p">(</span><span class="nv">$serializedIgbinary</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nv">$end</span> <span class="o">=</span> <span class="nb">microtime</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">echo</span> <span class="p">(</span><span class="nv">$end</span> <span class="o">-</span> <span class="nv">$start</span><span class="p">)</span> <span class="o">*</span> <span class="mi">1000</span> <span class="o">.</span> <span class="s2">&quot;Milliseconds</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$start</span> <span class="o">=</span> <span class="nb">microtime</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="nv">$i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nv">$i</span><span class="o">&lt;</span><span class="nv">$iterations</span><span class="p">;</span><span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$unserialized</span> <span class="o">=</span> <span class="nb">unserialize</span><span class="p">(</span><span class="nv">$serializedClassic</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nv">$end</span> <span class="o">=</span> <span class="nb">microtime</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">echo</span> <span class="p">(</span><span class="nv">$end</span> <span class="o">-</span> <span class="nv">$start</span><span class="p">)</span> <span class="o">*</span> <span class="mi">1000</span> <span class="o">.</span> <span class="s2">&quot;Milliseconds</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>This is giving us very interesting results: igbinary takes 65 milliseconds while classic unserialize needs 82 milliseconds! So igbinary is faster here. This is pretty good news, because in practice you will need to unserialize (speak &ldquo;fetch from cache&rdquo;) much more often than to serialize (speak &ldquo;store in cache&rdquo;). That&rsquo;s the whole point of a cache.</p>

<p>Before we move on to JSON, I think it&rsquo;s fair to say that igbinary wins this comparison. Most of the time you want to store complex PHP objects and fetch them out fast and quickly. Of course it has the overhead of installing it as an extension, but since it&rsquo;s a drop-in replacement you can change your mind later (but take this with a grain of salt because you can only unserialize what was serialized with igbinary and vice versa &ndash; so you&rsquo;d need to fetch and restore them).</p>

<p>Finally, when you are storing very long strings in objects, both have pretty much the same overhead (because you can&rsquo;t &ldquo;compact&rdquo; this long string very well). One workaround may be to compress and decompress the string as needed, using a mixture of gzip and base64 encoding. When serializing PHP objects, you can use the <a href="http://www.php.net/manual/en/language.oop5.magic.php#object.sleep">__sleep</a> and <a href="http://www.php.net/manual/en/language.oop5.magic.php#object.wakeup">__wakeup</a> methods to perform these kind of transformations.</p>

<p>Adding these two methods to our <code>BlogPost</code> class results in a 20% saving when using the 10k random string again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">__sleep</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">body</span> <span class="o">=</span> <span class="nb">gzdeflate</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">body</span><span class="p">,</span> <span class="mi">9</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="s1">&#39;teaser&#39;</span><span class="p">,</span> <span class="s1">&#39;author&#39;</span><span class="p">,</span> <span class="s1">&#39;body&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">__wakeup</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">body</span> <span class="o">=</span> <span class="nb">gzinflate</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">body</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that compressing takes time too, so measure if it makes sense in your case and the space savings are good enough. You also need the <code>zblib</code> extension to make this work properly.</p>

<h2>Transcoding on top of JSON</h2>

<p>First of all, JSON has not the same characteristics as serialization. This is just because JSON only supports a subset of the available data types that PHP supports and therefore encoding/decoding takes some extra steps on the application side. So why are we comparing it here? Well, JSON is used very often for storing data in caches. Not only is it human readable, it can also be used in combination with other languages and applications. Using JSON allows you to store cache information from a Java backend and use it in your PHP application. That doesn&rsquo;t work with traditional serialization approaches.</p>

<p>If you need a primer on JSON and PHP, <a href="http://nitschinger.at/Handling-JSON-like-a-boss-in-PHP">read</a> my other article first. PHP allows you to transcode all objects (except resources) through the <a href="http://www.php.net/manual/en/function.json-encode.php">json_encode</a> and <a href="http://www.php.net/manual/en/function.json-decode.php">json_decode</a> functions. Private and protected variables are not converted, so we either need to make them public or provide a custom method that exports a storable object structure. While we&rsquo;re at it, we can provide a static factory method that initializes our BlogPost from the returned JSON string:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">toJson</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;title&#39;</span> <span class="o">=&gt;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">title</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;teaser&#39;</span> <span class="o">=&gt;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">teaser</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;author&#39;</span> <span class="o">=&gt;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">author</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;body&#39;</span> <span class="o">=&gt;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">body</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">fromJson</span><span class="p">(</span><span class="nv">$json</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$d</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$json</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nx">BlogPost</span><span class="p">(</span><span class="nv">$d</span><span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">],</span> <span class="nv">$d</span><span class="p">[</span><span class="s1">&#39;teaser&#39;</span><span class="p">],</span> <span class="nv">$d</span><span class="p">[</span><span class="s1">&#39;author&#39;</span><span class="p">],</span> <span class="nv">$d</span><span class="p">[</span><span class="s1">&#39;body&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the <code>toJson()</code> method returns a simple representation of the object, which is much less complicated than a full serialization approach. Let&rsquo;s run our benchmark again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nv">$post</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BlogPost</span><span class="p">(</span><span class="nv">$title</span><span class="p">,</span> <span class="nv">$teaser</span><span class="p">,</span> <span class="nv">$author</span><span class="p">,</span> <span class="nv">$randomString</span><span class="p">(</span><span class="mi">10000</span><span class="p">));</span>
</span><span class='line'><span class="nv">$post</span> <span class="o">=</span> <span class="nv">$post</span><span class="o">-&gt;</span><span class="na">toJson</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$iterations</span> <span class="o">=</span> <span class="mi">10000</span><span class="p">;</span>
</span><span class='line'><span class="nv">$start</span> <span class="o">=</span> <span class="nb">microtime</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="nv">$i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nv">$i</span><span class="o">&lt;</span><span class="nv">$iterations</span><span class="p">;</span><span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$encoded</span> <span class="o">=</span> <span class="nb">json_encode</span><span class="p">(</span><span class="nv">$post</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;Size: &quot;</span> <span class="o">.</span> <span class="nb">strlen</span><span class="p">(</span><span class="nv">$serialized</span><span class="p">)</span> <span class="o">.</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$end</span> <span class="o">=</span> <span class="nb">microtime</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">echo</span> <span class="p">(</span><span class="nv">$end</span> <span class="o">-</span> <span class="nv">$start</span><span class="p">)</span> <span class="o">*</span> <span class="mi">1000</span> <span class="o">.</span> <span class="s2">&quot;Milliseconds</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>On my machine it takes 1.7 seconds (!) to complete the encoding. The resulting object size is 10196 bytes which is comparable to our earlier measurements (again, the large value dominates here). Testing it against complex objects is not interesting because we can&rsquo;t restore them anyway without further modifications. Running <code>json_decode</code> on the encoded object also takes around 1.5 seconds, so there is no major difference here.</p>

<p>Personally, I&rsquo;d expected to have JSON transcoding to perform better, but again normally you don&rsquo;t run 10k iterations in a row. When you break it down to 10 encodings they take about 1 millisecond which is okay for most scenarios (given we encode a really large objects with a few kb here). Smaller objects like user sessions will encode much faster.</p>

<p>Edit: a friendly reader on <a href="http://www.reddit.com/r/PHP/comments/17kcy3/benchmarking_cache_transcoders_in_php/">reddit</a> pointed out that you can (and should) use the <a href="http://www.php.net/manual/en/class.jsonserializable.php">JsonSerializable interface</a> instead of rolling your own method name like <code>toJson()</code>. Thanks!</p>

<p>Edit2: another reader pointed out that naming a method <code>toJson()</code> which does not return JSON but an array is misleading. I agree, so if you adapt this approach in your environment choose a better name like <code>prepareForJson()</code>, <code>toArray()</code> or use the <code>JsonSerializable</code> Interface as shown above.</p>

<h2>Conclusion</h2>

<p>After running these microbenchmarks, my conclusion is that when you need object serialization, go with igbinary. It provides good enough serialization performance and huge wins on object sizes. Decoding performance is also much better than out-ouf-the-box serialization. If you need interoperability with other applications or if you don&rsquo;t want to limit yourself to serialized PHP blobs, go with JSON. JSON requires much more hand wiring but you&rsquo;ll gain a lot of flexibility.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Caching Doctrine Entities With Couchbase]]></title>
    <link href="http://daschl.github.io/Caching-Doctrine-Entities-with-Couchbase"/>
    <updated>2013-01-08T13:49:48+01:00</updated>
    <id>http://daschl.github.io/Caching-Doctrine-Entities-with-Couchbase</id>
    <content type="html"><![CDATA[<h2>Motivation</h2>

<p>As part of our ongoing efforts to make Couchbase more integrated with frameworks and libraries, we added caching support for the <a href="http://www.doctrine-project.org/">Doctrine ORM</a>. Recently, the pull request has been merged into the master branch and is scheduled to be published along with the <a href="http://doctrine-project.org/jira/browse/DCOM/fixforversion/10327">2.4</a> release.</p>

<p>Caching can either be used standalone (through the API provided by <a href="http://www.doctrine-project.org/projects/common.html">doctrine/common</a>) or integrated with the ORM functionality. We&rsquo;ll look at both variants through simple examples, a good documentation can also be found <a href="http://docs.doctrine-project.org/en/latest/reference/caching.html">here</a>. Note that at the time of writing, the CouchbaseCache is not mentioned as a caching driver because the documentation still needs to be updated.</p>

<p>Since 2.4 has not been released yet, we need to work against the <code>2.4.x-dev</code> branch. We&rsquo;ll be using <a href="http://getcomposer.org/">Composer</a> to fetch our dependencies, so just need change the version number if you want to pin it down to 2.4 later.</p>

<h2>Simple Caching</h2>

<p>Our first example shows how the caching API can be used directly. If you are familiar with the Couchbase API, you may think that it&rsquo;s more or less just a different API with the same (and maybe less) semantics, but the point is that it uses the Doctrine Cache API interface and as a result you can switch between different caching implementations very easily.</p>

<p>Create a directory called <code>couchbase-doctrine-simple</code> with the following <code>composer.json</code> inside:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;require&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;doctrine/common&quot;</span><span class="o">:</span> <span class="s2">&quot;2.4.x-dev&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;ext-couchbase&quot;</span><span class="o">:</span> <span class="s2">&quot;1.1.x&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This installs the <a href="https://packagist.org/packages/doctrine/common">doctrine/common</a> package and also makes sure that we have the <code>couchbase.so</code> extension in place. If you haven&rsquo;t installed the Couchbase PHP extension already, head over to the <a href="http://www.couchbase.com/develop/php/current">official website</a> and install it based on the tutorial and the docs.</p>

<p>Create a <code>index.php</code> with the following content (we&rsquo;ll break up the code afterwards):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="c1">// 0: Composer Autoloader</span>
</span><span class='line'><span class="k">require</span> <span class="s1">&#39;vendor/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 1: Open the Couchbase Connection</span>
</span><span class='line'><span class="nv">$couchbase</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Couchbase</span><span class="p">(</span><span class="s2">&quot;127.0.0.1&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="s2">&quot;default&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 2: Instantiate the Driver &amp; Inject the Connection</span>
</span><span class='line'><span class="nv">$cacheDriver</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">\Doctrine\Common\Cache\CouchbaseCache</span><span class="p">();</span>
</span><span class='line'><span class="nv">$cacheDriver</span><span class="o">-&gt;</span><span class="na">setCouchbase</span><span class="p">(</span><span class="nv">$couchbase</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 3: Execute your commands!</span>
</span><span class='line'><span class="nv">$key</span> <span class="o">=</span> <span class="s2">&quot;my-cache-item&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nv">$cacheDriver</span><span class="o">-&gt;</span><span class="na">contains</span><span class="p">(</span><span class="nv">$key</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$cacheDriver</span><span class="o">-&gt;</span><span class="na">save</span><span class="p">(</span><span class="nv">$key</span><span class="p">,</span> <span class="s2">&quot;my_data&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">echo</span> <span class="nv">$cacheDriver</span><span class="o">-&gt;</span><span class="na">fetch</span><span class="p">(</span><span class="nv">$key</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>First, we need to bootstrap the composer autoloader so we don&rsquo;t have to write all <code>require</code> statements on our own. The next thing we need to do is actually connect to the Couchbase cluster:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">// 1: Open the Couchbase Connection</span>
</span><span class='line'><span class="nv">$couchbase</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Couchbase</span><span class="p">(</span><span class="s2">&quot;127.0.0.1&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="s2">&quot;default&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, we&rsquo;re connecting to a node in the cluster which points at <code>localhost</code>, but you can pass in an array of nodes as well. We connect to the <code>default</code> bucket, which has no password. Now that we have our connection established, we can instantiate the cache driver and inject our Couchbase client:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">// 2: Instantiate the Driver &amp; Inject the Connection</span>
</span><span class='line'><span class="nv">$cacheDriver</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">\Doctrine\Common\Cache\CouchbaseCache</span><span class="p">();</span>
</span><span class='line'><span class="nv">$cacheDriver</span><span class="o">-&gt;</span><span class="na">setCouchbase</span><span class="p">(</span><span class="nv">$couchbase</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>From here on, the API is the same for all cache drivers. The following code checks if the cache contains a key. If it is present, it prints out the document but if it isn&rsquo;t it creates a new one. This is a very simple example but shows how you can start to use Couchbase caching in your own projects with just a few lines of bootstrapping!</p>

<p>Aside from these three methods, there is also a <code>delete</code> method available. Finally, you can pass an optional third param on <code>save</code> with a <code>$lifeTime</code> so that the cache item vanishes automatically.</p>

<p>Since Couchbase Server doesn&rsquo;t care what you store, you can also save and fetch any kind of datatype (aside from resources):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$cacheDriver</span><span class="o">-&gt;</span><span class="na">save</span><span class="p">(</span><span class="nv">$key</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;bar&#39;</span><span class="p">));</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$cacheDriver</span><span class="o">-&gt;</span><span class="na">fetch</span><span class="p">(</span><span class="nv">$key</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that when you use the driver at this level, try to store JSON strings when you can (use <code>json_encode</code>/<code>json_decode</code> on your datastructures) This way you can take advantage of the brand new view engine inside Couchbase Server 2.0. You can always just store serialized objects as well (like we need to do with ORM integration) since for Couchbase Server it&rsquo;s just a byte stream.</p>

<p>We can now build on this foundation and see how this works with ORM integration.</p>

<h2>ORM Integration</h2>

<p>Create a new directory called <code>couchbase-doctrine-orm</code> with the following <code>composer.json</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;require&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;doctrine/orm&quot;</span><span class="o">:</span> <span class="s2">&quot;2.4.x-dev&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;doctrine/dbal&quot;</span><span class="o">:</span> <span class="s2">&quot;2.4.x-dev&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;doctrine/common&quot;</span><span class="o">:</span> <span class="s2">&quot;2.4.x-dev&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;ext-couchbase&quot;</span><span class="o">:</span> <span class="s2">&quot;1.1.x&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;autoload&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;psr-0&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;Entities&quot;</span><span class="o">:</span> <span class="s2">&quot;src/&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This time our <code>composer.json</code> file is a little bit longer, because we need to define all of our dependencies by hand (since we don&rsquo;t want to work against the stable release). Since we need to define Doctrine Entities we pass the composer autoloader the custom directory (<code>src/</code>).</p>

<p>The next thing we need is our actual entity that we want to manage through Doctrine. Go ahead and create a <code>Person.php</code> file inside the <code>src/Entities</code> directory with the following content:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">Entities</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/** @Entity */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="sd">/**</span>
</span><span class='line'><span class="sd">  * @Id @Column(type=&quot;integer&quot;) @GeneratedValue(strategy=&quot;AUTO&quot;)</span>
</span><span class='line'><span class="sd">  */</span>
</span><span class='line'>  <span class="k">private</span> <span class="nv">$id</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="sd">/** @Column(type=&quot;string&quot;) */</span>
</span><span class='line'>  <span class="k">private</span> <span class="nv">$firstname</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="sd">/** @Column(type=&quot;string&quot;) */</span>
</span><span class='line'>  <span class="k">private</span> <span class="nv">$lastname</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">setFirstname</span><span class="p">(</span><span class="nv">$firstname</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">firstname</span> <span class="o">=</span> <span class="nv">$firstname</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">getFirstname</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">firstname</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">setLastname</span><span class="p">(</span><span class="nv">$lastname</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">lastname</span> <span class="o">=</span> <span class="nv">$lastname</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">getLastname</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">lastname</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a very simple Doctrine Entity that has some properties and also a autogenerated <code>ID</code> field. I&rsquo;m going to use <a href="http://www.sqlite.org/">SQLite</a> in the following example, but feel free to use MySQL or any other relational database that you have available.</p>

<p>To wire everything together, we&rsquo;re going to create a <code>index.php</code> file in the root directory of the project. Again, here is the full content and we&rsquo;re going to break it apart afterwards:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="c1">// Composer autoloader.</span>
</span><span class='line'><span class="nv">$loader</span> <span class="o">=</span> <span class="k">require</span> <span class="s1">&#39;vendor/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Initialize Couchbase &amp; the Cache.</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="nv">$couchbase</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Couchbase</span><span class="p">(</span><span class="s2">&quot;127.0.0.1&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="s2">&quot;default&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$cacheDriver</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">\Doctrine\Common\Cache\CouchbaseCache</span><span class="p">();</span>
</span><span class='line'><span class="nv">$cacheDriver</span><span class="o">-&gt;</span><span class="na">setCouchbase</span><span class="p">(</span><span class="nv">$couchbase</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Initialize the Entity Manager.</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="nv">$paths</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="nx">__DIR__</span> <span class="o">.</span> <span class="s1">&#39;/src/Entities/&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$isDevMode</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'><span class="nv">$dbParams</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;driver&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;pdo_sqlite&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;user&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;root&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;password&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;path&#39;</span> <span class="o">=&gt;</span> <span class="nx">__DIR__</span> <span class="o">.</span> <span class="s1">&#39;/cbexample.sqlite&#39;</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$config</span> <span class="o">=</span> <span class="nx">\Doctrine\ORM\Tools\Setup</span><span class="o">::</span><span class="na">createAnnotationMetadataConfiguration</span><span class="p">(</span><span class="nv">$paths</span><span class="p">,</span> <span class="nv">$isDevMode</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="nv">$cacheDriver</span><span class="p">);</span>
</span><span class='line'><span class="nv">$em</span> <span class="o">=</span> <span class="nx">\Doctrine\ORM\EntityManager</span><span class="o">::</span><span class="na">create</span><span class="p">(</span><span class="nv">$dbParams</span><span class="p">,</span> <span class="nv">$config</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Work with our Entities.</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="nv">$person</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">\Entities\Person</span><span class="p">();</span>
</span><span class='line'><span class="nv">$person</span><span class="o">-&gt;</span><span class="na">setFirstname</span><span class="p">(</span><span class="s2">&quot;Michael&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$person</span><span class="o">-&gt;</span><span class="na">setLastname</span><span class="p">(</span><span class="s2">&quot;Nitschinger&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$em</span><span class="o">-&gt;</span><span class="na">persist</span><span class="p">(</span><span class="nv">$person</span><span class="p">);</span>
</span><span class='line'><span class="nv">$em</span><span class="o">-&gt;</span><span class="na">flush</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Query with Result Cache</span>
</span><span class='line'><span class="nv">$query</span> <span class="o">=</span> <span class="nv">$em</span><span class="o">-&gt;</span><span class="na">createQuery</span><span class="p">(</span><span class="s1">&#39;select p from Entities\Person p&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$query</span><span class="o">-&gt;</span><span class="na">useResultCache</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</span><span class='line'><span class="nv">$results</span> <span class="o">=</span> <span class="nv">$query</span><span class="o">-&gt;</span><span class="na">getResult</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Since this may be a lot to grasp, let&rsquo;s break it into smaller sized chunks.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$couchbase</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Couchbase</span><span class="p">(</span><span class="s2">&quot;127.0.0.1&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="s2">&quot;default&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$cacheDriver</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">\Doctrine\Common\Cache\CouchbaseCache</span><span class="p">();</span>
</span><span class='line'><span class="nv">$cacheDriver</span><span class="o">-&gt;</span><span class="na">setCouchbase</span><span class="p">(</span><span class="nv">$couchbase</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>After our bootstrapping the autoloader, we&rsquo;re initializing the cache driver. You already know what this means because we&rsquo;ve used the same code in the simple example before.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$paths</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="nx">__DIR__</span> <span class="o">.</span> <span class="s1">&#39;/src/Entities/&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$isDevMode</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'><span class="nv">$dbParams</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;driver&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;pdo_sqlite&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;user&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;root&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;password&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;path&#39;</span> <span class="o">=&gt;</span> <span class="nx">__DIR__</span> <span class="o">.</span> <span class="s1">&#39;/cbexample.sqlite&#39;</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$config</span> <span class="o">=</span> <span class="nx">\Doctrine\ORM\Tools\Setup</span><span class="o">::</span><span class="na">createAnnotationMetadataConfiguration</span><span class="p">(</span><span class="nv">$paths</span><span class="p">,</span> <span class="nv">$isDevMode</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="nv">$cacheDriver</span><span class="p">);</span>
</span><span class='line'><span class="nv">$em</span> <span class="o">=</span> <span class="nx">\Doctrine\ORM\EntityManager</span><span class="o">::</span><span class="na">create</span><span class="p">(</span><span class="nv">$dbParams</span><span class="p">,</span> <span class="nv">$config</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>\Doctrine\ORM\EntityManager</code> is one of the major building blocks inside Doctrine and needs to be initialized accordingly. Therefore, we need to provide it a valid configuration. Here we&rsquo;re going to use annotations (as seen on the Doctrine Entity, but you can also do it through XML or YAML). We also need to provide our database connection and the path to the entities. The important part here is that we pass the <code>$cacheDriver</code> to the factory method. This automatically initializes our <code>CouchbaseCache</code> to be used for all kinds of caching (Query, Metadata and Result caching).</p>

<p>Now we can go ahead and create a record:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$person</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">\Entities\Person</span><span class="p">();</span>
</span><span class='line'><span class="nv">$person</span><span class="o">-&gt;</span><span class="na">setFirstname</span><span class="p">(</span><span class="s2">&quot;Michael&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$person</span><span class="o">-&gt;</span><span class="na">setLastname</span><span class="p">(</span><span class="s2">&quot;Nitschinger&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$em</span><span class="o">-&gt;</span><span class="na">persist</span><span class="p">(</span><span class="nv">$person</span><span class="p">);</span>
</span><span class='line'><span class="nv">$em</span><span class="o">-&gt;</span><span class="na">flush</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Afterwards, we can fetch it back through a query:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$query</span> <span class="o">=</span> <span class="nv">$em</span><span class="o">-&gt;</span><span class="na">createQuery</span><span class="p">(</span><span class="s1">&#39;select p from Entities\Person p&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$query</span><span class="o">-&gt;</span><span class="na">useResultCache</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</span><span class='line'><span class="nv">$results</span> <span class="o">=</span> <span class="nv">$query</span><span class="o">-&gt;</span><span class="na">getResult</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that we explicitely tell it to cache this query result for us (by default, result caching won&rsquo;t be used). If open the browser and point it to your Couchbase Server 2.0 management UI, you can see that Doctrine did create lots of documents behind the scenes. These are subsequently used to boost your application performance.</p>

<h2>Summary</h2>

<p>As you can see, using Couchbase as a Cache for Doctrine is not hard. You just need to initialize it and pass it into the configuration. From this point on, everything happens behind the scenes. And don&rsquo;t forget that you not only get exceptional performance, but also persistence, scalability and all the cool stuff that Couchbase Server provides out of the box.</p>

<p>If you have any questions or input, please let me know in the comments! Finally, thanks to <a href="https://twitter.com/Ocramius">Marco Pivetta</a> for helping me debug an <a href="https://github.com/doctrine/common/pull/240">issue</a> with ORM integration!</p>
]]></content>
  </entry>
  
</feed>
