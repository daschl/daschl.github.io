<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Php | Nitschinger.at]]></title>
  <link href="http://daschl.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://daschl.github.io/"/>
  <updated>2013-12-19T10:31:42+01:00</updated>
  <id>http://daschl.github.io/</id>
  <author>
    <name><![CDATA[Michael Nitschinger]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Useful Couchbase Resources & Blog Posts]]></title>
    <link href="http://daschl.github.io/Useful-Couchbase-Resources-Blog-Posts"/>
    <updated>2013-08-06T14:49:48+02:00</updated>
    <id>http://daschl.github.io/Useful-Couchbase-Resources-Blog-Posts</id>
    <content type="html"><![CDATA[<p>The following list is a convenient way to get access to lots of resources, blog posts and material that have been shared throughout the past months. I tried to separate them by area, but of course lots of them overlap to some extent.</p>

<p>They are sorted by date (so you&rsquo;ll find the most recent ones on top) and include the author where possible. Be aware that some of the older articles may already be outdated  or not 100% accurate.</p>

<p>I&rsquo;ll try to update this page as new articles get published, so it may pay off to come back here from time to time and check out the topmost ones. If you want to see your article included, post them in the comments!</p>

<h2>Starting Out</h2>

<ul>
<li><a href="http://www.couchbase.com/docs/couchbase-manual-2.1.0/">Official Couchbase Server 2.1 Manual</a>: The official manual and a good starting point for all kinds of general-purpose and architectural questions.</li>
<li><a href="http://www.couchbase.com/docs/couchbase-devguide-2.1.0/">Couchbase Server 2.1 Developer Guide</a>: The developer guide is particularly useful for developers that are new to document modeling and general app-related questions.</li>
<li><a href="http://www.couchbase.com/communities">The Community Portal</a>: Starting point for all SDK-related questions and links.</li>
<li>2013-04-24 <a href="http://blog.couchbase.com/top-10-things-ops-sys-admin-must-know-about-couchbase">Top 10 things an Ops / Sys admin must know about Couchbase</a>: Ten short rules that sys admins that maintain Couchbase clusters should keep in mind.</li>
<li>2012-07-06 <a href="http://tugdualgrall.blogspot.co.at/2012/07/couchbase-101-install-store-and-query.html">Couchbase 101 : Install, Store and Query Data (tgrall)</a>: A very basic introduction for people starting out, teaching the very basics in a hands-on fashion.</li>
</ul>


<h2>Installation &amp; Infrastructure</h2>

<ul>
<li><a href="http://www.couchbase.com/docs/couchbase-manual-2.1.0/couchbase-getting-started.html">Official Installation Guide for 2.1</a>: The official installation guide, read this before installing on production systems.</li>
<li>2013-08-05 <a href="http://trondn.blogspot.no/2013/08/running-couchbase-211-on-smartos.html">Running Couchbase 2.1.1 on SmartOS (trondn)</a>: Learn how to &ndash; step by step &ndash; compile and run a Couchbase cluster on SmartOS. This is for all the Solaris fans out there!</li>
<li>2013-07-22 <a href="http://blog.couchbase.com/deploying-couchbase-chef">Deploying Couchbase with Chef (ketakigangal)</a>: If you use Chef to automate your infrastructure, this blog post shows you how to integrate Couchbase with it.</li>
<li>2013-07-11 <a href="http://tugdualgrall.blogspot.co.at/2013/07/deploy-your-nodecouchbase-application.html">Deploy your Node/Couchbase application to the cloud with Clever Cloud (tgrall)</a>: You&rsquo;ll learn how to deploy your Node.JS app with Couchbase onto &ldquo;clever cloud&rdquo;, a PaaS provider.</li>
<li>2013-06-27 <a href="http://www.ebruakagunduz.com/2013/06/nagios-plugin-to-monitor-couchbase.html?spref=tw">Nagios plugin to monitor Couchbase (Ebru Akagündüz)</a>: If you are using Nagios to monitor your infrastructure, this post shows you how to integrate Couchbase with a single plugin.</li>
<li>2013-05-31 <a href="http://tugdualgrall.blogspot.co.at/2013/05/create-couchbase-cluster-in-one-command.html">Create a Couchbase cluster in less than a minute with Ansible (tgrall)</a>: Create a Couchbase cluster automatically with Ansible, a systems automation framework like chef.</li>
<li>2013-05-27 <a href="http://nitschinger.at/A-Couchbase-Cluster-in-Minutes-with-Vagrant-and-Puppet">A Couchbase Cluster in Minutes with Vagrant and Puppet (daschl)</a>: If you want to setup a 4 node cluster with couchbase in minutes, this blog post shows you how to do it.</li>
</ul>


<h2>Document Design &amp; Data Import/Export</h2>

<ul>
<li>2013-07-18 <a href="http://tugdualgrall.blogspot.co.at/2013/07/how-to-implement-document-versioning.html">How to implement Document Versioning with Couchbase (tgrall)</a>: See how to implement document versioning by using a key-based approach. Uses the Java SDK, but can be adapted for all languages.</li>
<li>2013-07-08 <a href="http://dev.theladders.com/2013/07/denormalize-the-datas-for-great-good">Denormalize the Datas for Great Good (John Connolly)</a>: See how TheLadders benefited from denormalizing its dataset and using Couchbase, greatly reducing their response times.</li>
<li>2013-07-03 <a href="http://tugdualgrall.blogspot.co.at/2013/07/sql-to-nosql-importing-data-from-rdbms.html">SQL to NoSQL : Copy your data from MySQL to Couchbase (tgrall)</a>: A Java-based tool to import data from a SQL database into Couchbase.</li>
</ul>


<h2>Views</h2>

<ul>
<li>2013-07-25 <a href="http://blog.couchbase.com/caching-queries-couchbase-high-performance">Caching queries in Couchbase for high performance (Alexis Roos)</a>: Learn how to cache view results for better performance.</li>
<li>2013-07-12 <a href="http://blog.couchbase.com/calculating-average-document-size-documents-stored-couchbase">Calculating average document size of documents stored in Couchbase. (Alexis Roos)</a>: With a simple map and a custom reduce function, one can easily calculate the average document size in the bucket.</li>
<li>2013-06-14 <a href="http://avsej.net/2013/analyzing-binary-data-in-couchbase">Analyzing Binary Data in Couchbase (avsej)</a>: Shows how to access binary (non-json) data from a View. Uses ruby to store the data, but can be adapted to any language.</li>
<li>2013-02-18 <a href="http://tugdualgrall.blogspot.co.at/2013/02/how-to-get-latest-document-by-datetime.html">How to get the latest document by date/time field (tgrall)</a>: A simple example on how to sort View-data based on a timestamp.</li>
<li>2013-02-13 <a href="http://tugdualgrall.blogspot.co.at/2013/02/introduction-to-collated-views-with.html">Introduction to Collated Views with Couchbase 2.0 (tgrall)</a>: Views can also be used to output &ldquo;master/detail&rdquo;-like scenarios. This post shows how.</li>
</ul>


<h2>Java SDK &amp; JVM</h2>

<ul>
<li><a href="http://www.couchbase.com/communities/java/getting-started">Getting Started &amp; Download</a>: The official &ldquo;Getting Started&rdquo; page for the Java SDK. Introduction, Tutorial and Downloads.</li>
<li>2013-05-16 <a href="http://nitschinger.at/Logging-with-the-Couchbase-Java-Client">Logging with the Couchbase Java Client (daschl)</a>: An in-depth post about how to correctly configure logging for the Java SDK (and the underlying spymemcached library).</li>
<li>2013-04-17 <a href="http://nitschinger.at/Couchbase-Java-SDK-Internals">Couchbase Java SDK Internals (daschl)</a>: A very detailed post about the inner workings of the Java SDK. Recommended for advanced users who want to understand more of the internals.</li>
<li>2012-12-30 <a href="http://tugdualgrall.blogspot.co.at/2012/12/couchbase-101-create-views-mapreduce.html">Couchbase 101: Create views (MapReduce) from your Java application (tgrall)</a>: How to create views and design documents directly from the Java SDK.</li>
<li>2012-11-05 <a href="http://tugdualgrall.blogspot.co.at/2012/11/couchbase-create-large-dataset-using.html">Couchbase : Create a large dataset using Twitter and Java (tgrall)</a>: Feed data from Twitter directly into your Couchbase cluster through the Java SDK.</li>
<li>2012-04-26 <a href="http://nitschinger.at/Accessing-Couchbase-from-Scala">Accessing Couchbase from Scala (daschl)</a>: How to access the Couchbase Java SDK from the Scala programing language.</li>
</ul>


<h2>.NET</h2>

<ul>
<li><a href="http://www.couchbase.com/communities/net/getting-started">Getting Started &amp; Download</a>: The official &ldquo;Getting Started&rdquo; page for the .NET SDK. Introduction, Tutorial and Downloads.</li>
<li>2013-06-14 <a href="http://vimeo.com/68378224">Video: Code-First NoSQL with .NET and Couchbase (John Zablocki)</a>: A video where John Zablocki gives an introduction into NoSQL development and especially with Couchbase.</li>
<li>2013-03-06 <a href="http://blog.couchbase.com/net-couchbase-client-instrumentation-aspnet-and-glimpse">.NET Couchbase Client Instrumentation with ASP.NET and Glimpse (John Zablocki)</a>: See how to get your Couchbase server-side logging errors easily displayed in the browser console. Very helpful during development.</li>
<li>2013-02-01 <a href="http://blog.couchbase.com/moving-no-schema-stack-c-and-dynamic-types">Moving No Schema up the Stack with C# and Dynamic Types (John Zablocki)</a>: This blog post shows how to store schemaless data with both dictionaries and C#&rsquo;s dynamic typing.</li>
<li>2013-01-04 <a href="http://blog.couchbase.com/xdcr-aspnet-and-nancy">XDCR with ASP.NET and Nancy (John Zablocki)</a>: Learn how to build an XDCR endpoint (like ElasticSearch integration) and read the data through our XDCR mechanisms.</li>
<li>2012-10-23 <a href="http://blog.couchbase.com/using-c-domain-objects-define-couchbase-views">Using C# Domain Objects to Define Couchbase Views (John Zablocki)</a>: How to automatically create DesignDocuments based of C# domain objects.</li>
<li>2012-10-05 <a href="http://blog.couchbase.com/new-visual-studio-code-snippets-net-couchbase-client-library">New Visual Studio Code Snippets for the .NET Couchbase Client Library (John Zablocki)</a>: A collection of helpful snippets in the day-to-day development process.</li>
<li>2012-09-20 <a href="http://blog.couchbase.com/strongly-typed-views-net-client-library">Strongly Typed Views with the .NET Client Library (John Zablocki)</a>: Learn how to map View responses directly onto domain objects.</li>
<li>2012-08-01 <a href="http://blog.couchbase.com/introducing-couchbase-aspnet-outputcache-provider">Introducing the Couchbase ASP.NET OutputCache Provider (John Zablocki)</a>: A short post on how to use Couchbase for easy caching in the ASP.NET environment.</li>
</ul>


<h2>PHP</h2>

<p>(Note: some of these posts are outdated in the way that currently the &ldquo;way to go&rdquo; when installing the PHP SDK is through PECL. See the the <a href="http://www.couchbase.com/communities/php/getting-started">Getting Started &amp; Download</a> guide for more information.)</p>

<ul>
<li><a href="http://www.couchbase.com/communities/php/getting-started">Getting Started &amp; Download</a>: The official &ldquo;Getting Started&rdquo; page for the PHP SDK. Introduction, Tutorial and Downloads.</li>
<li>2013-04-02  <a href="http://trondn.blogspot.co.at/2013/04/couchbase-php-xampp-and-windows.html">Couchbase, PHP, XAMPP and Windows (trondn)</a>: A short post on how to use the PHP SDK from Microsoft Windows.</li>
<li>2013-04-01 <a href="http://trondn.blogspot.co.at/2013/04/building-couchbase-php-driver-on-ubuntu.html">Building Couchbase PHP driver on Ubuntu (trondn)</a>: Learn how to build the Couchbase driver on Ubuntu and use it in a simple program.</li>
<li>2013-02-04 <a href="http://trondn.blogspot.co.at/2013/02/accessing-couchbase-from-php-on-your-mac.html">Accessing Couchbase from PHP on your Mac! (trondn)</a> Building and running the SDK on your Mac is easy, learn how to do it in this post.</li>
<li>2012-11-01 <a href="http://trondn.blogspot.co.at/2012/11/building-php-extension-for-couchbase-on.html">Building the PHP extension for Couchbase on Microsoft Windows! (trondn)</a>: Learn how to compile the SDK on Windows using Visual Studio 2008.</li>
<li>2012-06-25 <a href="http://nitschinger.at/How-to-store-PHP-sessions-in-Couchbase">How to store PHP sessions in Couchbase (daschl)</a>: This post shows how to store PHP sessions in Couchbase using different mechanims (not only the official SDK).</li>
<li>2012-06-21 <a href="http://nitschinger.at/Using-Couchbase-as-a-flexible-session-store">Using Couchbase as a flexible session store (daschl)</a>: With Couchbase Server 2.0, JSON data and Views, its easy to run metrics over your sessions and identify user behavior. Learn how in this post.</li>
</ul>


<h2>C &amp; Go</h2>

<ul>
<li><a href="http://www.couchbase.com/communities/c/getting-started">Getting Started &amp; Download with the C SDK</a>: The official &ldquo;Getting Started&rdquo; page for the C SDK. Introduction, Tutorial and Downloads.</li>
<li><a href="https://github.com/couchbaselabs/go-couchbase">Official Go Client Repository</a>: The Go repository with code and simple examples.</li>
</ul>


<h2>Ruby</h2>

<ul>
<li><a href="http://www.couchbase.com/communities/ruby/getting-started">Getting Started &amp; Download</a>: The official &ldquo;Getting Started&rdquo; page for the Ruby SDK. Introduction, Tutorial and Downloads.</li>
<li>2013-02-23 <a href="http://avsej.net/links/2013/couchbase-and-rails/">Couchbase and Rails Talk (avsej)</a>: A presentation by our lead Ruby SDK developer on how to integrate it with Ruby on Rails.</li>
<li>2013-02-11 <a href="http://blog.couchbase.com/using-couchbase-ruby-gem-eventmachine">Using Couchbase Ruby Gem with EventMachine (avsej)</a>: This post shows how to use the Ruby SDK together with the high performance EventMachine (custom protocols and performance for TCP/IP) gem.</li>
</ul>


<h2>Node.JS</h2>

<ul>
<li>2013-03-06 <a href="http://tugdualgrall.blogspot.co.at/2013/03/easy-application-development-with.html">Easy application development with Couchbase, Angular and Node (tgrall)</a>: Storing Ideas and Votes in Couchbase with Angular and NodeJS.</li>
<li>2013-01-04 <a href="http://tugdualgrall.blogspot.co.at/2013/01/getting-started-with-couchbase-and.html">Getting started with Couchbase and node.js on Windows (tgrall)</a>: How to install and use the NodeJS Couchbase client library on Windows.</li>
<li>2012-11-13 <a href="http://tugdualgrall.blogspot.co.at/2012/11/building-chat-application-using-nodejs.html">Building a chat application using Node.js and Couchbase (tgrall)</a>: A nice chat application using Couchbase, NodeJS and socket.io for &ldquo;real time&rdquo; feeling.</li>
<li>2012-09-24 <a href="http://tugdualgrall.blogspot.co.at/2012/09/create-simple-nodejs-and-couchbase.html">Create a Simple Node.js and Couchbase application&hellip; on OS X (tgrall)</a> A simple (but maybe outdated) tutorial on how to use the NodeJS driver from OSX.</li>
</ul>


<h2>Python</h2>

<ul>
<li><a href="http://www.couchbase.com/communities/python/getting-started">Getting Started &amp; Download</a>: The official &ldquo;Getting Started&rdquo; page for the Python SDK. Introduction, Tutorial and Downloads.</li>
<li>2013-06-21 <a href="http://mnunberg.github.io/2013/python-extension-windows-binaries">Python Extension Windows Binaries (mnunberg)</a>: A tale by our maintainer of the Python SDK on how to upload Windows binaries to PyPi.</li>
<li>2013-05-30 <a href="http://blog.couchbase.com/whats-python-couchbase-sdk">What&rsquo;s up with the Python Couchbase SDK (volker)</a>: A rundown of the latest changes on the Python SDK.</li>
</ul>


<h2>Ecosystem</h2>

<ul>
<li>2013-07-31 <a href="http://www.ortussolutions.com/blog/couchbase-cluster-setup-orm-secondary-cache-introduction">Couchbase: Cluster Setup + ORM Secondary Cache Introduction (Brad Wood)</a>: Using ColdFusion and looking for a secondary cache implementation? Look no further.</li>
<li>2013-07-22 <a href="http://blog.jeroenreijn.com/2013/07/visitor-analysis-with-couchbase-elasticsearch.html">Real-time visitor analysis with Couchbase, Elasticsearch and Kibana (Jeroen Reijn)</a>: A great post on a customer&rsquo;s use case for real-time visitor analysis.</li>
</ul>


<h2>Troubleshooting</h2>

<ul>
<li><a href="http://www.couchbase.com/docs/couchbase-manual-2.1.0/couchbase-troubleshooting.html">Official troubleshooting Guide</a>: The best place to start if something goes wrong on the server and you don&rsquo;t know why.</li>
<li>2012-12-26 <a href="http://tugdualgrall.blogspot.co.at/2012/12/what-to-do-if-your-couchbase-server.html">What to do if your Couchbase Server does not start? (tgrall)</a>: If you have troubles getting older Couchbase Server 2.0 versions to run on Windows, this post is for you.</li>
</ul>


<h2>Fun Stuff</h2>

<ul>
<li><a href="https://github.com/couchbaselabs/DeveloperDay">Example code for lots of SDKs and Languages</a>: Our DeveloperDay material with hands-on code examples to try and learn.</li>
<li>2013-06-18 <a href="http://nitschinger.at/Fun-with-Couchbase-Views-and-Message-Pack">Fun with Couchbase Views and MessagePack (daschl)</a>: While JSON is tried and true, with a little twiggling and some fun you can get Couchbase Views to speak MessagePack!</li>
<li>2013-04-29 <a href="http://tugdualgrall.blogspot.co.at/2013/04/screencast-fun-with-couchbase-mapreduce.html">Screencast : Fun with Couchbase, MapReduce and Twitter (tgrall)</a>: A Screencast on importing Twitter data into Couchbase and analyzing it on the fly through Views.</li>
</ul>


<p>Last Updated: 2013-08-06 (daschl)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Journey on Avoiding Nulls in PHP]]></title>
    <link href="http://daschl.github.io/A-Journey-on-Avoiding-Nulls-in-PHP"/>
    <updated>2013-02-19T13:49:48+01:00</updated>
    <id>http://daschl.github.io/A-Journey-on-Avoiding-Nulls-in-PHP</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s face it: nulls are a hassle and lead to exceptions and inconsistent application state. <a href="http://en.wikipedia.org/wiki/Tony_Hoare">Tony Hoare</a>, the inventor of QuickSort, even calls it his <a href="http://qconlondon.com/london-2009/presentation/Null+References:+The+Billion+Dollar+Mistake">billion dollar mistake</a>.</p>

<p>While every developer has kind of accepted their existence, they are suddenly there when we&rsquo;d desperately need them to not show up. How often did you write<code>if($obj === null)</code> in your PHP code? Can&rsquo;t there be a better, more elegant and fault-tolerant solution to the problem?</p>

<p>It turns out that for example in <a href="http://www.scala-lang.org/">Scala</a>, you can avoid nulls by using the <a href="http://www.scala-lang.org/api/current/index.html#scala.Option">Option</a> class. It allows you to express in a clear way that the result of a &ndash; lets say &ndash; method can either be good (a reference to a valid object) or bad. In PHP, bad often means null. Scala then consequently provides method to access this object safely. You as the developer can choose at which point you want to get the value out, either by accessing it directly (and catching exceptions) or provide a sensible default value.</p>

<p>In Scala, you write code like this:</p>

<p>``` scala
/<em> An option with a value </em>/
val a: Option[Int] = Some(5)
/<em> An option with no value </em>/
val b: Option[Int] = None</p>

<p>/<em> Returns 5 </em>/
a.getOrElse(0)
/<em> Returns 10 </em>/
b.getOrElse(10)
```</p>

<p>You can also use helpful methods like <code>isDefined()</code> to peek into the object and see whats going on at runtime. All this is much more expressive than juggling around with a possible <code>null</code> value.</p>

<p>Java has the same issues as PHP, and it hurt Google so much that they integrated the concept of an <a href="http://code.google.com/p/guava-libraries/wiki/UsingAndAvoidingNullExplained">Optional</a> directly into the core of their <a href="http://code.google.com/p/guava-libraries/">Google Guava</a> Java library collection. I really like their code and use it in my Java projects, so I decided it would be an interesting project to port this to PHP. Since PHP isn&rsquo;t a statically typed language like Java, concepts like generics have been removed and some methods renamed (they look more like Scala&rsquo;s now), but in essence its the same.</p>

<h2>Usage</h2>

<p>Before digging into how it works, let&rsquo;s look at how we can use it. We only need to work with three classes called <code>Optional</code>, <code>Present</code> and <code>Absent</code>. <code>Optional</code> is the base class, <code>Present</code> and <code>Absent</code> inherit from it and provide the method bodies for their appropriate behavior.</p>

<p>The main idea is to fail fast when null is discovered and afterwards have a safe way of working with our value. Creating a <code>Optional</code> works through the static <code>of</code> method. We then have a range of methods available to inspect and fetch the output:</p>

<p><code>php
&lt;?php
$possible = Optional::of(5);
var_dump($possible-&gt;isPresent()); // bool(true)
var_dump($possible-&gt;get()); // int(5)
var_dump($possible-&gt;getOrElse(99)); // int(5)
var_dump($possible-&gt;getOrNull()); // int(5)
?&gt;
</code></p>

<p>If we&rsquo;re trying to call <code>of</code> with <code>null</code>, a <code>NullPointerException</code> is raised immediately. We can use the <code>fromNullable</code> method to handle this case safely:</p>

<p><code>php
&lt;?php
$possible = Optional::of(null); // Throws 'NullPointerException' with message 'Unallowed null in reference found.'
$possible = Optional::fromNullable(null);
var_dump($possible-&gt;isPresent()); // bool(false)
var_dump($possible-&gt;get()); // Throws IllegalStateException
var_dump($possible-&gt;getOrElse(99)); // int(99)
var_dump($possible-&gt;getOrNull()); // NULL
?&gt;
</code></p>

<p>We can even check the equality of the contained Optionals:</p>

<p>``` php
&lt;?php
$val1 = Optional::fromNullable(5);
$val2 = Optional::fromNullable(4);
$val3 = Optional::fromNullable(4);</p>

<p>var_dump($val1->equals($val2)); // bool(false)
var_dump($val2->equals($val3)); // bool(true)
?>
```</p>

<p>Now this simple examples are easy to grasp and this is a good thing. It&rsquo;s not about complexity here, it&rsquo;s about making it obvious that a value may or may not be null and handling it appropriately.</p>

<p>If you&rsquo;re accessing a method of a library, you need to check the return value every time if it&rsquo;s null to make sure you&rsquo;re not in an invalid state. If it&rsquo;s clear that the library is returning an instance of <code>Optional</code>, you know what to expect and how to deal with it appropriately.</p>

<h2>Implementation</h2>

<p>Let&rsquo;s look at how this implemented.</p>

<p>``` php
&lt;?php
abstract class Optional {</p>

<pre><code>private function __construct() {}

/**
 * Returns an instance with no contained reference.
 */
public static function absent() {
    return Absent::instance();
}

/**
 * Returns an Optional instance containing the given non-null reference.
 */
public static function of($reference) {
    return new Present(static::checkNotNull($reference));
}

/**
 * If reference is non-null, returns an Optional instance containing
 * that reference; otherwise returns Absent.
 */
public static function fromNullable($reference) {
    return $reference === null ? static::absent() : new Present($reference);
}

public abstract function isPresent();
public abstract function get();
public abstract function getOrElse($defaultValue);
public abstract function getOrNull();
public abstract function equals($object);

/**
 * Make sure the passed reference is not null.
 */
protected static function checkNotNull($reference, $message = null) {
    if($message === null) {
        $message = "Unallowed null in reference found.";
    }

    if($reference === null) {
        throw new NullPointerException($message);
    }
    return $reference;
}
</code></pre>

<p>}
?>
```</p>

<p>This abstract class defines all of the methods we&rsquo;ll implement in <code>Present</code> and <code>Absent</code>, as well as all the static methods that you can call directly (especially the <code>of</code> and <code>fromNullable</code> methods). Note that in the appropriate places, <code>checkNotNull</code> is called which will throw a <code>NullPointerException</code> if a null is found. This adheres to the fail fast principle.</p>

<p>Now let&rsquo;s implement the <code>Absent</code> class, which represents the state where no reference is present (for example a null was passed in through <code>fromNullable</code>).</p>

<p>``` java
&lt;?php
class Absent extends Optional {</p>

<pre><code>private static $instance;

private function __construct() {}

public function isPresent() {
    return false;
}

public function get() {
    throw new IllegalStateException("Optional-&gt;get() cannot be called on an absent value");
}

public function getOrElse($defaultValue) {
    $message = "use Optional-&gt;orNull() instead of Optional-&gt;or(null)";
    return static::checkNotNull($defaultValue, $message);
}

public function getOrNull() {
    return null;
}

public function equals($object) {
    return $object === $this;
}

protected static function instance() {
    if(static::$instance == null) {
        return static::$instance = new Absent();
    }
    return static::$instance;
}
</code></pre>

<p>}
?>
```</p>

<p>The <code>$instance</code> variable is managed here through the singleton pattern. We only need one instance of <code>Absent</code>, this saves memory and CPU time. The other methods just implement the expected behaviour of something that is not available.</p>

<p>Finally, we can implement the <code>Present</code> class, which actually stores our instance if available.</p>

<p>``` php
&lt;?php
class Present extends Optional {</p>

<pre><code>private $reference;

protected function __construct($reference) {
    $this-&gt;reference = $reference;
}

public function isPresent() {
    return true;
}

public function get() {
    return $this-&gt;reference;
}

public function getOrElse($defaultValue) {
    $message = "use Optional-&gt;orNull() instead of Optional-&gt;or(null)";
    static::checkNotNull($defaultValue, $message);
    return $this-&gt;reference;
}

public function getOrNull() {
    return $this-&gt;reference;
}


public function equals($object) {
    if($object instanceof Present) {
        return $this-&gt;reference === $object-&gt;get();
    }
    return false;
}
</code></pre>

<p>}
?>
```</p>

<p>It looks the same as the <code>Absent</code> class, but manages to return our instance if necessary and implements the <code>equals</code> method to actually check with the given object.</p>

<p>Edit: Rasmus Schultz pointed out that he uses the ternary operator for lightweight null checks, you may want to <a href="http://blog.mindplay.dk/2013/02/the-or-else-operator-in-php-53.html">check out</a> his post too!</p>

<h2>Summary</h2>

<p>As you can see, the adoption of the <code>Optional</code> pattern can greatly increase the expressiveness of your code, by consequently avoiding null and its associated pitfalls. It also makes your code less error-prone, because you can&rsquo;t stumble upon nulls when using this pattern consequently.</p>

<p>This is kind of an experimental implementation, but I think putting this together in a utility library could drive the adoption in the PHP community. I&rsquo;m curious what you think about the concept and if it makes sense for you and your applications!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Benchmarking Cache Transcoders in PHP]]></title>
    <link href="http://daschl.github.io/Benchmarking-Cache-Transcoders-in-PHP"/>
    <updated>2013-01-30T13:49:48+01:00</updated>
    <id>http://daschl.github.io/Benchmarking-Cache-Transcoders-in-PHP</id>
    <content type="html"><![CDATA[<h2>Motivation</h2>

<p>Storing PHP objects (or simpler data types like arrays) in caches always requires some kind of transformation. You need a way of encoding/decoding data so that it can be stored and loaded properly. In most languages, this process is known as object <a href="http://en.wikipedia.org/wiki/Serialization">serialization</a>. PHP provides a mechanism for this out of the box, but in this article we&rsquo;ll also look at <a href="http://pecl.php.net/package/igbinary">igbinary</a> as a drop-in replacement for the default serializer. We also compare the results to object transcoding based on <a href="http://json.org/">JSON</a>, which is not really an object serialization mechanism but commonly used as a data chache structure which has its own benefits and drawbacks.</p>

<p>As always, please take this benchmarks with a grain of salt. Don&rsquo;t take the absolute numbers as a reference, look at the differences and run the benchmarks in your environment to get accurate results that apply to your scenarios. If you spot any flaws in what is shown here, please point it out in the comments. This blog post is not some kind of &ldquo;advertising&rdquo; for a special mechanism and all different transcoders are discussed with their benefits and drawbacks.</p>

<p>If you want to compare your results to mine, I&rsquo;m using a MacBook Pro on Mac OS X 10.8.2 with the 2.3 GHz i7 and 16GB RAM. I&rsquo;m using PHP 5.4.11 (through <a href="https://github.com/josegonzalez/homebrew-php">homebrew-php</a>) instead of the shipped 5.3.</p>

<h2>The PHP Serializer</h2>

<p>Out of the box, PHP provides a serialization mechanism on top of the <a href="http://php.net/manual/de/function.serialize.php">serialize</a> and <a href="http://www.php.net/manual/de/function.unserialize.php">unserialize</a> methods. By applying this method on a variable, it gets encoded to a byte stream and neither the type nor the structure gets lost (you can&rsquo;t store <a href="http://www.php.net/manual/en/language.types.resource.php">resources</a>).</p>

<p>So, let&rsquo;s look at a simple and a more complex example on how the transformation looks like:</p>

<p>``` php
&lt;?php</p>

<p>class Person {</p>

<pre><code>private $name;

public function __construct($name) {
    $this-&gt;name = $name;
}

public function getName() {
    return $this-&gt;name;
}
</code></pre>

<p>}</p>

<p>$simple = array(&ldquo;key&rdquo; => &ldquo;value&rdquo;);
$complex = new Person(&ldquo;Michael&rdquo;);</p>

<p>?>
```</p>

<p>If we&rsquo;re calling <code>serialize()</code> on both variables, the output (as a string representation) looks like this:</p>

<p>``` php
&lt;?php
$simpleSerialized = serialize($simple);
$complexSerialized = serialize($complex);</p>

<p>// string(28) &ldquo;a:1:{s:3:"key&rdquo;;s:5:&ldquo;value&rdquo;;}&ldquo;
var_dump(serialize($simple));</p>

<p>// string(51) &ldquo;O:6:"Person&rdquo;:1:{s:12:&ldquo;\000Person\000name&rdquo;;s:7:&ldquo;Michael&rdquo;;}&ldquo;
var_dump(serialize($complex));
?>
```</p>

<p>While the resulting string is not designed for readability, you can clearly see that some metadata is added in order to make the unserialization possible. For example, the <code>key</code> string is serialized to <code>s:3:"key"</code> where the <code>s</code> means <code>string</code> and <code>3</code> is the string length. Also, <code>a</code> points to an <code>array</code> and <code>O</code> to an <code>object</code>.</p>

<p>We can now <code>unserialize()</code> the values and work with them as if they&rsquo;ve never been stored somewhere else:</p>

<p>``` php
&lt;?php
$simpleUnserialized = unserialize($simpleSerialized);
$complexUnserialized = unserialize($complexSerialized);</p>

<p>// array(1) {&lsquo;key&rsquo; => string(5) &ldquo;value&rdquo;}
var_dump($simpleUnserialized);</p>

<p>// string(7) &ldquo;Michael&rdquo;
var_dump($complexUnserialized->getName());
?>
```</p>

<p>In practice, two characteristics are important: size of the serialized value and performance. While from a developer perspective performance is fun to explore, the size of the serialized object is what matters most. Performance differences are only measurable when running it in a loop with lots of iterations, while in practice you may only work with a few objects at a time per request.</p>

<p>Let&rsquo;s use a common caching scenario: imagine we&rsquo;re caching entity responses from an ORM framework like <a href="http://www.doctrine-project.org/">Doctrine</a>. Here is a blog post class that will be filled with life:</p>

<p>``` php
&lt;?php
class BlogPost {</p>

<pre><code>private $title;
private $teaser;
private $author;
private $body;

public function __construct($title, $teaser, $author, $body) {
    $this-&gt;title = $title;
    $this-&gt;teaser = $teaser;
    $this-&gt;author = $author;
    $this-&gt;body = $body;
}

public function getTitle() { return $this-&gt;title; }
public function getTeaser() { return $this-&gt;teaser; }
public function getAuthor() { return $this-&gt;author; }
public function getBody() { return $this-&gt;body; }
</code></pre>

<p>}
?>
```</p>

<p>Please take this with a grain of salt, because since JSON transcoding is not able to store a 1:1 representation like <code>serialize</code>, we need to work around that a bit. More details and discussion will be provided in the JSON section.</p>

<p>Assume that a blog post with content has around 10k characters and about 10kb in size, lets create a crafted blog post:</p>

<p>``` php
&lt;?php
$randomString = function ($length) {</p>

<pre><code>$chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 .";    
$str = "";
for( $i = 0; $i &lt; $length; $i++ ) {
    $str .= $chars[rand(0, strlen($chars)-1)];
}
return $str;
</code></pre>

<p>};</p>

<p>$title = &ldquo;How to measure caching transcoders&rdquo;;
$teaser = &ldquo;This is a much longer introduction on how to measure caching transcoders. Feel free to post your own findings.&rdquo;;
$author = &ldquo;daschl&rdquo;;
$body = $randomString(10000);</p>

<p>$post = new BlogPost($title, $teaser, $author, $body);
?>
```</p>

<p>Now run <code>serialize</code> and <code>unserialize</code> in loops to measure performance as well as determine the resulting size of the object:</p>

<p>``` php
&lt;?php
$iterations = 10000;
$start = microtime(true);
for($i=0;$i&lt;$iterations;$i++) {</p>

<pre><code>$serialized = serialize($post);
</code></pre>

<p>}
$end = microtime(true);</p>

<p>echo &ldquo;Size: &rdquo; . strlen($serialized) . &ldquo;\n&rdquo;;
echo ($end &ndash; $start) * 1000 . &ldquo;Milliseconds\n&rdquo;;
?>
```</p>

<p>On my machine, to serialize 10000 objects it took about 33 milliseconds. The length of the resulting object (its string representation) is 10297 characters. This is kind of expected because the bulk of the object is the long article body. Before start comparing, we can already make one observation: its pretty fast. Now, let&rsquo;s move on to igbinary serialization and see how these results compare.</p>

<h2>Serializing with igbinary</h2>

<p>The <a href="http://pecl.php.net/package/igbinary">igbinary</a> extension was developed as a drop-in replacement for the default PHP serializer. Instead of storing the serialized object as a text, it is stored as binary data. You can install it either through PECL or compile it from source, either way before running the tests make sure you have the <code>igbinary</code> extension enabled:</p>

<pre><code>michael@daschlbook ~ $ php -m | grep igbinary
igbinary
</code></pre>

<p>Instead of using <code>serialize</code> or <code>unserialize</code>, igbinary provides us with appropriate <code>igbinary_serialize</code> and <code>igbinary_unserialize</code> functions. Now we can apply the same microbenchmark and see the results:</p>

<p>``` php
&lt;?php
$iterations = 10000;
$start = microtime(true);
for($i=0;$i&lt;$iterations;$i++) {</p>

<pre><code>$serialized = igbinary_serialize($post);
</code></pre>

<p>}
$end = microtime(true);</p>

<p>echo &ldquo;Size: &rdquo; . strlen($serialized) . &ldquo;\n&rdquo;;
echo ($end &ndash; $start) * 1000 . &ldquo;Milliseconds\n&rdquo;;
?>
```</p>

<p>With default settings, to serialize 10000 objects with igbinary it took 678 milliseconds. The length of the resulting object is 10244 characters. If you compare it with the default serialization mechanism, that is 20 times slower and the resulting object isn&rsquo;t much smaller either. Bummer &ndash; or not? Let&rsquo;s look at why this is happening.</p>

<p>Let&rsquo;s look at a different workload. Let&rsquo;s create a data structure which consist of 30 smaller blog posts and measure the statistics for both again (only doing 1000 iterations instead of 10000):</p>

<p>``` php
&lt;?php
$posts = array();
for($i=0;$i&lt;30;$i++) {</p>

<pre><code>$posts[] = new BlogPost($title, $teaser, $author, $randomString(50));
</code></pre>

<p>}
?>
```</p>

<p>The results are more interesting: on my machine igbinary takes about 95 milliseconds while serialize needs only 41 milliseconds. Now it&rsquo;s just 2 times slower. But here comes the important part: the resulting size of igbinary is 2385 characters, while serialize is 10467 characters! That&rsquo;s about 5 times smaller. Note that this gap increases the larger your PHP object gets (not in terms of long character strings but speaking of complexity like methods).</p>

<p>Note that the igbinary docs say you should set <code>igbinary.compact_strings</code> to <code>Off</code> to increase performance, but there was no real measurable difference in my testings.</p>

<p>There is one more thing we haven&rsquo;t compared: deserializing of previously serialized objects. We can take the same code from above, use the serialized part as input and measure the timings once again (not that we don&rsquo;t need to measure the size of the resulting object because we&rsquo;re creating a &ldquo;live&rdquo; object again):</p>

<p>``` php
&lt;?php
$posts = array();
for($i=0;$i&lt;30;$i++) {</p>

<pre><code>$posts[] = new BlogPost($title, $teaser, $author, $randomString(50));
</code></pre>

<p>}</p>

<p>$serializedIgbinary = igbinary_serialize($posts);
$serializedClassic = serialize($posts);</p>

<p>$iterations = 1000;
$start = microtime(true);
for($i=0;$i&lt;$iterations;$i++) {</p>

<pre><code>$unserialized = igbinary_unserialize($serializedIgbinary);
</code></pre>

<p>}
$end = microtime(true);</p>

<p>echo ($end &ndash; $start) * 1000 . &ldquo;Milliseconds\n&rdquo;;</p>

<p>$start = microtime(true);
for($i=0;$i&lt;$iterations;$i++) {</p>

<pre><code>$unserialized = unserialize($serializedClassic);
</code></pre>

<p>}
$end = microtime(true);</p>

<p>echo ($end &ndash; $start) * 1000 . &ldquo;Milliseconds\n&rdquo;;
?>
```</p>

<p>This is giving us very interesting results: igbinary takes 65 milliseconds while classic unserialize needs 82 milliseconds! So igbinary is faster here. This is pretty good news, because in practice you will need to unserialize (speak &ldquo;fetch from cache&rdquo;) much more often than to serialize (speak &ldquo;store in cache&rdquo;). That&rsquo;s the whole point of a cache.</p>

<p>Before we move on to JSON, I think it&rsquo;s fair to say that igbinary wins this comparison. Most of the time you want to store complex PHP objects and fetch them out fast and quickly. Of course it has the overhead of installing it as an extension, but since it&rsquo;s a drop-in replacement you can change your mind later (but take this with a grain of salt because you can only unserialize what was serialized with igbinary and vice versa &ndash; so you&rsquo;d need to fetch and restore them).</p>

<p>Finally, when you are storing very long strings in objects, both have pretty much the same overhead (because you can&rsquo;t &ldquo;compact&rdquo; this long string very well). One workaround may be to compress and decompress the string as needed, using a mixture of gzip and base64 encoding. When serializing PHP objects, you can use the <a href="http://www.php.net/manual/en/language.oop5.magic.php#object.sleep">__sleep</a> and <a href="http://www.php.net/manual/en/language.oop5.magic.php#object.wakeup">__wakeup</a> methods to perform these kind of transformations.</p>

<p>Adding these two methods to our <code>BlogPost</code> class results in a 20% saving when using the 10k random string again:</p>

<p>``` php
&lt;?php
public function __sleep() {</p>

<pre><code>$this-&gt;body = gzdeflate($this-&gt;body, 9);
return array('title', 'teaser', 'author', 'body');
</code></pre>

<p>}</p>

<p>public function __wakeup() {</p>

<pre><code>$this-&gt;body = gzinflate($this-&gt;body);
</code></pre>

<p>}
?>
```</p>

<p>Note that compressing takes time too, so measure if it makes sense in your case and the space savings are good enough. You also need the <code>zblib</code> extension to make this work properly.</p>

<h2>Transcoding on top of JSON</h2>

<p>First of all, JSON has not the same characteristics as serialization. This is just because JSON only supports a subset of the available data types that PHP supports and therefore encoding/decoding takes some extra steps on the application side. So why are we comparing it here? Well, JSON is used very often for storing data in caches. Not only is it human readable, it can also be used in combination with other languages and applications. Using JSON allows you to store cache information from a Java backend and use it in your PHP application. That doesn&rsquo;t work with traditional serialization approaches.</p>

<p>If you need a primer on JSON and PHP, <a href="http://nitschinger.at/Handling-JSON-like-a-boss-in-PHP">read</a> my other article first. PHP allows you to transcode all objects (except resources) through the <a href="http://www.php.net/manual/en/function.json-encode.php">json_encode</a> and <a href="http://www.php.net/manual/en/function.json-decode.php">json_decode</a> functions. Private and protected variables are not converted, so we either need to make them public or provide a custom method that exports a storable object structure. While we&rsquo;re at it, we can provide a static factory method that initializes our BlogPost from the returned JSON string:</p>

<p>``` php
&lt;?php
public function toJson() {</p>

<pre><code>return array(
    'title' =&gt; $this-&gt;title,
    'teaser' =&gt; $this-&gt;teaser,
    'author' =&gt; $this-&gt;author,
    'body' =&gt; $this-&gt;body
);
</code></pre>

<p>}</p>

<p>public static function fromJson($json) {</p>

<pre><code>$d = json_decode($json, true);
return new BlogPost($d['title'], $d['teaser'], $d['author'], $d['body']);
</code></pre>

<p>}
?>
```</p>

<p>Note that the <code>toJson()</code> method returns a simple representation of the object, which is much less complicated than a full serialization approach. Let&rsquo;s run our benchmark again:</p>

<p>``` php
&lt;?php
$post = new BlogPost($title, $teaser, $author, $randomString(10000));
$post = $post->toJson();</p>

<p>$iterations = 10000;
$start = microtime(true);
for($i=0;$i&lt;$iterations;$i++) {</p>

<pre><code>$encoded = json_encode($post);
</code></pre>

<p>}
echo &ldquo;Size: &rdquo; . strlen($serialized) . &ldquo;\n&rdquo;;
$end = microtime(true);</p>

<p>echo ($end &ndash; $start) * 1000 . &ldquo;Milliseconds\n&rdquo;;
?>
```</p>

<p>On my machine it takes 1.7 seconds (!) to complete the encoding. The resulting object size is 10196 bytes which is comparable to our earlier measurements (again, the large value dominates here). Testing it against complex objects is not interesting because we can&rsquo;t restore them anyway without further modifications. Running <code>json_decode</code> on the encoded object also takes around 1.5 seconds, so there is no major difference here.</p>

<p>Personally, I&rsquo;d expected to have JSON transcoding to perform better, but again normally you don&rsquo;t run 10k iterations in a row. When you break it down to 10 encodings they take about 1 millisecond which is okay for most scenarios (given we encode a really large objects with a few kb here). Smaller objects like user sessions will encode much faster.</p>

<p>Edit: a friendly reader on <a href="http://www.reddit.com/r/PHP/comments/17kcy3/benchmarking_cache_transcoders_in_php/">reddit</a> pointed out that you can (and should) use the <a href="http://www.php.net/manual/en/class.jsonserializable.php">JsonSerializable interface</a> instead of rolling your own method name like <code>toJson()</code>. Thanks!</p>

<p>Edit2: another reader pointed out that naming a method <code>toJson()</code> which does not return JSON but an array is misleading. I agree, so if you adapt this approach in your environment choose a better name like <code>prepareForJson()</code>, <code>toArray()</code> or use the <code>JsonSerializable</code> Interface as shown above.</p>

<h2>Conclusion</h2>

<p>After running these microbenchmarks, my conclusion is that when you need object serialization, go with igbinary. It provides good enough serialization performance and huge wins on object sizes. Decoding performance is also much better than out-ouf-the-box serialization. If you need interoperability with other applications or if you don&rsquo;t want to limit yourself to serialized PHP blobs, go with JSON. JSON requires much more hand wiring but you&rsquo;ll gain a lot of flexibility.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Caching Doctrine Entities With Couchbase]]></title>
    <link href="http://daschl.github.io/Caching-Doctrine-Entities-with-Couchbase"/>
    <updated>2013-01-08T13:49:48+01:00</updated>
    <id>http://daschl.github.io/Caching-Doctrine-Entities-with-Couchbase</id>
    <content type="html"><![CDATA[<h2>Motivation</h2>

<p>As part of our ongoing efforts to make Couchbase more integrated with frameworks and libraries, we added caching support for the <a href="http://www.doctrine-project.org/">Doctrine ORM</a>. Recently, the pull request has been merged into the master branch and is scheduled to be published along with the <a href="http://doctrine-project.org/jira/browse/DCOM/fixforversion/10327">2.4</a> release.</p>

<p>Caching can either be used standalone (through the API provided by <a href="http://www.doctrine-project.org/projects/common.html">doctrine/common</a>) or integrated with the ORM functionality. We&rsquo;ll look at both variants through simple examples, a good documentation can also be found <a href="http://docs.doctrine-project.org/en/latest/reference/caching.html">here</a>. Note that at the time of writing, the CouchbaseCache is not mentioned as a caching driver because the documentation still needs to be updated.</p>

<p>Since 2.4 has not been released yet, we need to work against the <code>2.4.x-dev</code> branch. We&rsquo;ll be using <a href="http://getcomposer.org/">Composer</a> to fetch our dependencies, so just need change the version number if you want to pin it down to 2.4 later.</p>

<h2>Simple Caching</h2>

<p>Our first example shows how the caching API can be used directly. If you are familiar with the Couchbase API, you may think that it&rsquo;s more or less just a different API with the same (and maybe less) semantics, but the point is that it uses the Doctrine Cache API interface and as a result you can switch between different caching implementations very easily.</p>

<p>Create a directory called <code>couchbase-doctrine-simple</code> with the following <code>composer.json</code> inside:</p>

<p>``` javascript
{</p>

<pre><code>"require": {
    "doctrine/common": "2.4.x-dev",
    "ext-couchbase": "1.1.x"
}
</code></pre>

<p>}
```</p>

<p>This installs the <a href="https://packagist.org/packages/doctrine/common">doctrine/common</a> package and also makes sure that we have the <code>couchbase.so</code> extension in place. If you haven&rsquo;t installed the Couchbase PHP extension already, head over to the <a href="http://www.couchbase.com/develop/php/current">official website</a> and install it based on the tutorial and the docs.</p>

<p>Create a <code>index.php</code> with the following content (we&rsquo;ll break up the code afterwards):</p>

<p>``` php
&lt;?php
// 0: Composer Autoloader
require &lsquo;vendor/autoload.php&rsquo;;</p>

<p>// 1: Open the Couchbase Connection
$couchbase = new Couchbase(&ldquo;127.0.0.1&rdquo;, &ldquo;&rdquo;, &ldquo;&rdquo;, &ldquo;default&rdquo;);</p>

<p>// 2: Instantiate the Driver &amp; Inject the Connection
$cacheDriver = new \Doctrine\Common\Cache\CouchbaseCache();
$cacheDriver->setCouchbase($couchbase);</p>

<p>// 3: Execute your commands!
$key = &ldquo;my-cache-item&rdquo;;</p>

<p>if(!$cacheDriver->contains($key)) {</p>

<pre><code>$cacheDriver-&gt;save($key, "my_data");
</code></pre>

<p>} else {</p>

<pre><code>echo $cacheDriver-&gt;fetch($key);
</code></pre>

<p>}
?>
```</p>

<p>First, we need to bootstrap the composer autoloader so we don&rsquo;t have to write all <code>require</code> statements on our own. The next thing we need to do is actually connect to the Couchbase cluster:</p>

<p><code>php
// 1: Open the Couchbase Connection
$couchbase = new Couchbase("127.0.0.1", "", "", "default");
</code></p>

<p>Here, we&rsquo;re connecting to a node in the cluster which points at <code>localhost</code>, but you can pass in an array of nodes as well. We connect to the <code>default</code> bucket, which has no password. Now that we have our connection established, we can instantiate the cache driver and inject our Couchbase client:</p>

<p><code>php
// 2: Instantiate the Driver &amp; Inject the Connection
$cacheDriver = new \Doctrine\Common\Cache\CouchbaseCache();
$cacheDriver-&gt;setCouchbase($couchbase);
</code></p>

<p>From here on, the API is the same for all cache drivers. The following code checks if the cache contains a key. If it is present, it prints out the document but if it isn&rsquo;t it creates a new one. This is a very simple example but shows how you can start to use Couchbase caching in your own projects with just a few lines of bootstrapping!</p>

<p>Aside from these three methods, there is also a <code>delete</code> method available. Finally, you can pass an optional third param on <code>save</code> with a <code>$lifeTime</code> so that the cache item vanishes automatically.</p>

<p>Since Couchbase Server doesn&rsquo;t care what you store, you can also save and fetch any kind of datatype (aside from resources):</p>

<p><code>php
$cacheDriver-&gt;save($key, array('foo' =&gt; 'bar'));
var_dump($cacheDriver-&gt;fetch($key));
</code></p>

<p>Note that when you use the driver at this level, try to store JSON strings when you can (use <code>json_encode</code>/<code>json_decode</code> on your datastructures) This way you can take advantage of the brand new view engine inside Couchbase Server 2.0. You can always just store serialized objects as well (like we need to do with ORM integration) since for Couchbase Server it&rsquo;s just a byte stream.</p>

<p>We can now build on this foundation and see how this works with ORM integration.</p>

<h2>ORM Integration</h2>

<p>Create a new directory called <code>couchbase-doctrine-orm</code> with the following <code>composer.json</code>:</p>

<p>``` javascript
{</p>

<pre><code>"require": {
    "doctrine/orm": "2.4.x-dev",
    "doctrine/dbal": "2.4.x-dev",
    "doctrine/common": "2.4.x-dev",
    "ext-couchbase": "1.1.x"
},
"autoload": {
    "psr-0": {
        "Entities": "src/"
    }
}
</code></pre>

<p>}
```</p>

<p>This time our <code>composer.json</code> file is a little bit longer, because we need to define all of our dependencies by hand (since we don&rsquo;t want to work against the stable release). Since we need to define Doctrine Entities we pass the composer autoloader the custom directory (<code>src/</code>).</p>

<p>The next thing we need is our actual entity that we want to manage through Doctrine. Go ahead and create a <code>Person.php</code> file inside the <code>src/Entities</code> directory with the following content:</p>

<p>``` php
&lt;?php</p>

<p>namespace Entities;</p>

<p>/<em>* @Entity </em>/
class Person {</p>

<pre><code>/**
 * @Id @Column(type="integer") @GeneratedValue(strategy="AUTO")
 */
private $id;

/** @Column(type="string") */
private $firstname;

/** @Column(type="string") */
private $lastname;

public function setFirstname($firstname) {
    $this-&gt;firstname = $firstname;
}

public function getFirstname() {
    return $this-&gt;firstname;
}

public function setLastname($lastname) {
    $this-&gt;lastname = $lastname;
}

public function getLastname() {
    return $this-&gt;lastname;
}
</code></pre>

<p>}</p>

<p>?>
```</p>

<p>This is a very simple Doctrine Entity that has some properties and also a autogenerated <code>ID</code> field. I&rsquo;m going to use <a href="http://www.sqlite.org/">SQLite</a> in the following example, but feel free to use MySQL or any other relational database that you have available.</p>

<p>To wire everything together, we&rsquo;re going to create a <code>index.php</code> file in the root directory of the project. Again, here is the full content and we&rsquo;re going to break it apart afterwards:</p>

<p>``` php
&lt;?php
// Composer autoloader.
$loader = require &lsquo;vendor/autoload.php&rsquo;;</p>

<p>/<em>*
 * Initialize Couchbase &amp; the Cache.
 </em>/
$couchbase = new Couchbase(&ldquo;127.0.0.1&rdquo;, &ldquo;&rdquo;, &ldquo;&rdquo;, &ldquo;default&rdquo;);
$cacheDriver = new \Doctrine\Common\Cache\CouchbaseCache();
$cacheDriver->setCouchbase($couchbase);</p>

<p>/<em>*
 * Initialize the Entity Manager.
 </em>/
$paths = array(<strong>DIR</strong> . &lsquo;/src/Entities/&rsquo;);
$isDevMode = true;
$dbParams = array(</p>

<pre><code>'driver' =&gt; 'pdo_sqlite',
'user' =&gt; 'root',
'password' =&gt; '',
'path' =&gt; __DIR__ . '/cbexample.sqlite'
</code></pre>

<p>);</p>

<p>$config = \Doctrine\ORM\Tools\Setup::createAnnotationMetadataConfiguration($paths, $isDevMode, null, $cacheDriver);
$em = \Doctrine\ORM\EntityManager::create($dbParams, $config);</p>

<p>/<em>*
 * Work with our Entities.
 </em>/
$person = new \Entities\Person();
$person->setFirstname(&ldquo;Michael&rdquo;);
$person->setLastname(&ldquo;Nitschinger&rdquo;);</p>

<p>$em->persist($person);
$em->flush();</p>

<p>// Query with Result Cache
$query = $em->createQuery(&lsquo;select p from Entities\Person p&rsquo;);
$query->useResultCache(true);
$results = $query->getResult();</p>

<p>?>
```</p>

<p>Since this may be a lot to grasp, let&rsquo;s break it into smaller sized chunks.</p>

<p><code>php
$couchbase = new Couchbase("127.0.0.1", "", "", "default");
$cacheDriver = new \Doctrine\Common\Cache\CouchbaseCache();
$cacheDriver-&gt;setCouchbase($couchbase);
</code></p>

<p>After our bootstrapping the autoloader, we&rsquo;re initializing the cache driver. You already know what this means because we&rsquo;ve used the same code in the simple example before.</p>

<p>``` php
$paths = array(<strong>DIR</strong> . &lsquo;/src/Entities/&rsquo;);
$isDevMode = true;
$dbParams = array(</p>

<pre><code>'driver' =&gt; 'pdo_sqlite',
'user' =&gt; 'root',
'password' =&gt; '',
'path' =&gt; __DIR__ . '/cbexample.sqlite'
</code></pre>

<p>);</p>

<p>$config = \Doctrine\ORM\Tools\Setup::createAnnotationMetadataConfiguration($paths, $isDevMode, null, $cacheDriver);
$em = \Doctrine\ORM\EntityManager::create($dbParams, $config);
```</p>

<p>The <code>\Doctrine\ORM\EntityManager</code> is one of the major building blocks inside Doctrine and needs to be initialized accordingly. Therefore, we need to provide it a valid configuration. Here we&rsquo;re going to use annotations (as seen on the Doctrine Entity, but you can also do it through XML or YAML). We also need to provide our database connection and the path to the entities. The important part here is that we pass the <code>$cacheDriver</code> to the factory method. This automatically initializes our <code>CouchbaseCache</code> to be used for all kinds of caching (Query, Metadata and Result caching).</p>

<p>Now we can go ahead and create a record:</p>

<p>``` php
$person = new \Entities\Person();
$person->setFirstname(&ldquo;Michael&rdquo;);
$person->setLastname(&ldquo;Nitschinger&rdquo;);</p>

<p>$em->persist($person);
$em->flush();
```</p>

<p>Afterwards, we can fetch it back through a query:</p>

<p><code>php
$query = $em-&gt;createQuery('select p from Entities\Person p');
$query-&gt;useResultCache(true);
$results = $query-&gt;getResult();
</code></p>

<p>Note that we explicitely tell it to cache this query result for us (by default, result caching won&rsquo;t be used). If open the browser and point it to your Couchbase Server 2.0 management UI, you can see that Doctrine did create lots of documents behind the scenes. These are subsequently used to boost your application performance.</p>

<h2>Summary</h2>

<p>As you can see, using Couchbase as a Cache for Doctrine is not hard. You just need to initialize it and pass it into the configuration. From this point on, everything happens behind the scenes. And don&rsquo;t forget that you not only get exceptional performance, but also persistence, scalability and all the cool stuff that Couchbase Server provides out of the box.</p>

<p>If you have any questions or input, please let me know in the comments! Finally, thanks to <a href="https://twitter.com/Ocramius">Marco Pivetta</a> for helping me debug an <a href="https://github.com/doctrine/common/pull/240">issue</a> with ORM integration!</p>
]]></content>
  </entry>
  
</feed>
